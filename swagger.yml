{
  "swagger": "2.0",
  "info": {
    "title": "area_region_service.proto",
    "version": "version not set"
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/check": {
      "post": {
        "summary": "Create a new check.\nAuthorization scope of `fm.check.create` is required.",
        "operationId": "CheckService_Create",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmCreateCheckResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmCreateCheckRequest"
            }
          }
        ],
        "tags": [
          "CheckService"
        ]
      }
    },
    "/v1/check/checkinout": {
      "post": {
        "summary": "Check can be used to check in a staff to a opening_check and check out to a\nclosing check Authorization scope of `fm.check.in` and `fm.check.out` is\nrequired.",
        "operationId": "CheckService_CheckInOut",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmCheckInOutRequest"
            }
          }
        ],
        "tags": [
          "CheckService"
        ]
      }
    },
    "/v1/check/employee-check": {
      "get": {
        "summary": "Get individual employee checks information. Authorization scope of `fm.employee-check.detail` is required",
        "operationId": "CheckService_GetEmployeeCheck",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmGetEmployeeCheckResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "employee_id",
            "description": "id of employee.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "organization_id",
            "description": "organization id of the employee.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "date",
            "description": "date for check ins and check outs.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "tags": [
          "CheckService"
        ]
      },
      "post": {
        "summary": "Create employee check. Authorization scope of `fm.employee-check.create` is required",
        "operationId": "CheckService_CreateEmployeeCheck",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmCreateEmployeeCheckResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmCreateEmployeeCheckRequest"
            }
          }
        ],
        "tags": [
          "CheckService"
        ]
      }
    },
    "/v1/check/employee-checks": {
      "post": {
        "summary": "Get checks information of multiple employees. Authorization scope of `fm.employee-check.list` is required",
        "operationId": "CheckService_ListEmployeeCheck",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmListEmployeeCheckResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmListEmployeeCheckRequest"
            }
          }
        ],
        "tags": [
          "CheckService"
        ]
      }
    },
    "/v1/check/global-check": {
      "get": {
        "summary": "ListGlobalCheck returns the list of global checks visible to the authorized user in \ndescending order of created date. Authorization scope of `fm.global-check.list` is required.",
        "operationId": "CheckService_ListGlobalCheck",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmListGlobalCheckResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "organization_id",
            "description": "organization id.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "current_date",
            "description": "current date.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "tags": [
          "CheckService"
        ]
      }
    },
    "/v1/check/global-description": {
      "get": {
        "summary": "GetGlobalDescription returns the details of global description on the basis of check type\nAuthorization scope of `fm.global-check.list` is required.",
        "operationId": "CheckService_GetGlobalDescription",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmGetGlobalDescriptionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "check_type",
            "description": "check type i.e. opening or closing check.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "organization_id",
            "description": "organization id.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "CheckService"
        ]
      },
      "post": {
        "summary": "UpsertGlobalDescription creates and updates the description for opening/closing check\nAuthorization scope of `fm.global-check.update` is required",
        "operationId": "CheckService_UpsertGlobalDescription",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmUpsertGlobalDescriptionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmUpsertGlobalDescriptionRequest"
            }
          }
        ],
        "tags": [
          "CheckService"
        ]
      }
    },
    "/v1/check/opening-closing": {
      "get": {
        "summary": "List opening/closing check.\nAuthorization scope of `fm.global-check.update` is required",
        "operationId": "CheckService_ListOpeningClosingCheck",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmListOpeningClosingCheckResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "organization_id",
            "description": "id of organization.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "type",
            "description": "type of opening/closing: GLOBAL, EMPLOYEE, GROUP.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "check_type",
            "description": "check type : CHECK_IN, CHECK_OUT.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "CheckService"
        ]
      },
      "post": {
        "summary": "Add opening/closing check.\nAuthorization scope of `fm.global-check.update` is required",
        "operationId": "CheckService_CreateOpeningClosingCheck",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmCreateOpeningClosingCheckResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmCreateOpeningClosingCheckRequest"
            }
          }
        ],
        "tags": [
          "CheckService"
        ]
      },
      "patch": {
        "summary": "Edit opening/closing check.\nAuthorization scope of `fm.global-check.update` is required",
        "operationId": "CheckService_UpdateOpeningClosingCheck",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmUpdateOpeningClosingCheckResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmUpdateOpeningClosingCheckRequest"
            }
          }
        ],
        "tags": [
          "CheckService"
        ]
      }
    },
    "/v1/check/opening-closing-delete": {
      "post": {
        "summary": "Delete opening/closing check.\nAuthorization scope of `fm.global-check.update` is required",
        "operationId": "CheckService_DeleteOpeningClosingCheck",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmDeleteOpeningClosingCheckRequest"
            }
          }
        ],
        "tags": [
          "CheckService"
        ]
      }
    },
    "/v1/checks": {
      "get": {
        "summary": "List returns the list of check visible to the authroized user in descending\ndate order. Authorization scope of `fm.check.list` is required.",
        "operationId": "CheckService_List",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmListCheckResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "filter.limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "organization_id",
            "description": "filter for selected organization check request.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "CheckService"
        ]
      }
    },
    "/v1/client": {
      "post": {
        "summary": "Create a new client.\nAuthorization scope of `fm.client.create` is required.",
        "operationId": "ClientService_Create",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmCreateClientResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmCreateClientRequest"
            }
          }
        ],
        "tags": [
          "ClientService"
        ]
      },
      "patch": {
        "summary": "Update an existing client.\nAuthorization scope of `fm.client.update` is required.",
        "operationId": "ClientService_Update",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmUpdateClientResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmUpdateClientRequest"
            }
          }
        ],
        "tags": [
          "ClientService"
        ]
      }
    },
    "/v1/client-area": {
      "patch": {
        "summary": "Update area of clients if it is empty.\nAuthorization scope of `fm.client.update` is required.",
        "operationId": "ClientService_UpdateClientArea",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmUpdateClientAreaResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmUpdateClientAreaRequest"
            }
          }
        ],
        "tags": [
          "ClientService"
        ]
      }
    },
    "/v1/client-area-delete": {
      "post": {
        "summary": "Make area field null.\nAuthorization scope of `fm.client.update` is required.",
        "operationId": "ClientService_DeleteClientArea",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmDeleteClientAreaRequest"
            }
          }
        ],
        "tags": [
          "ClientService"
        ]
      }
    },
    "/v1/client-employee/feedback": {
      "get": {
        "summary": "List feedbacks.\nAuthorization scope of `fm.client-employee.feedback.list` is required.",
        "operationId": "ClientEmployeeService_ListFeedback",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmListFeedbackResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "filter.limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "organization_id",
            "description": "organization id.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "client_id",
            "description": "unique id of client who is providing feedback.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "employee_id",
            "description": "unique id of employee.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ClientEmployeeService"
        ]
      },
      "post": {
        "summary": "Create a new feedback.\nAuthorization scope of `fm.client-employee.feedback.create` is required.",
        "operationId": "ClientEmployeeService_CreateFeedback",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmCreateFeedbackResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmCreateFeedbackRequest"
            }
          }
        ],
        "tags": [
          "ClientEmployeeService"
        ]
      }
    },
    "/v1/client-employee/target-tasks": {
      "put": {
        "summary": "Assign target tasks for each day of the week in a fixed interval of time\nfor an employee for a client\nAuthorization scope of `fm.client-employee.assign-target-tasks` is\nrequired.",
        "operationId": "ClientEmployeeService_AssignTargetTasks",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmAssignTargetTasksResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmAssignTargetTasksRequest"
            }
          }
        ],
        "tags": [
          "ClientEmployeeService"
        ]
      }
    },
    "/v1/client-employee/target-tasks/{client_employee_id}": {
      "get": {
        "summary": "Get the assigned target tasks of an employee for a client\nAuthorization scope of `fm.client-employee.get-target-tasks` is required.",
        "operationId": "ClientEmployeeService_GetTargetTasks",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmGetTargetTasksResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "client_employee_id",
            "description": "unique identifier for the client employee relation",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ClientEmployeeService"
        ]
      }
    },
    "/v1/client-employee/training-status/update": {
      "patch": {
        "summary": "Update status of training of employee.\nAuthorization scope of `fm.client-employee.update-employee-training-status` is required.",
        "operationId": "ClientEmployeeService_UpdateEmployeeTrainingStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmUpdateEmployeeTrainingStatusResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmUpdateEmployeeTrainingStatusRequest"
            }
          }
        ],
        "tags": [
          "ClientEmployeeService"
        ]
      }
    },
    "/v1/client-employee/training/create": {
      "post": {
        "summary": "Create training for employee.\nAuthorization scope of `fm.client-employee.create-employee-training` is\nrequired",
        "operationId": "ClientEmployeeService_CreateEmployeeTraining",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmCreateEmployeeTrainingResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmCreateEmployeeTrainingRequest"
            }
          }
        ],
        "tags": [
          "ClientEmployeeService"
        ]
      }
    },
    "/v1/client-employee/training/delete": {
      "post": {
        "summary": "Delete training of employee.\nAuthorization scope of `fm.client-employee.delete-employee-training` is required.",
        "operationId": "ClientEmployeeService_DeleteEmployeeTraining",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmDeleteEmployeeTrainingRequest"
            }
          }
        ],
        "tags": [
          "ClientEmployeeService"
        ]
      }
    },
    "/v1/client-employee/training/list": {
      "get": {
        "summary": "Get employee trainings\nAuthorization scope of `fm.client-employee.get-employee-trainings` is\nrequired.",
        "operationId": "ClientEmployeeService_GetEmployeeTraining",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmGetEmployeeTrainingResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "organization_id",
            "description": "organization id of the employee.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "trainee_id",
            "description": "filter response by unique id of trainee employee (optional).",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "training_subject",
            "description": "filter response by subject of the training (optional).",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "start_date",
            "description": "start date to filter by training_date.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "end_date",
            "description": "end date to filter by training_date.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "filter.limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "ClientEmployeeService"
        ]
      }
    },
    "/v1/client-employee/training/update": {
      "patch": {
        "summary": "Update training of employee.\nAuthorization scope of `fm.client-employee.update-employee-training` is required.",
        "operationId": "ClientEmployeeService_UpdateEmployeeTraining",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmUpdateEmployeeTrainingResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmUpdateEmployeeTrainingRequest"
            }
          }
        ],
        "tags": [
          "ClientEmployeeService"
        ]
      }
    },
    "/v1/client-employee/transfer": {
      "post": {
        "summary": "Create a new transfer.\nAuthorization scope of `fm.client-employee.transfer.create` is required.",
        "operationId": "ClientEmployeeService_CreateTransfer",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmCreateTransferResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmCreateTransferRequest"
            }
          }
        ],
        "tags": [
          "ClientEmployeeService"
        ]
      }
    },
    "/v1/client-employee/transfers": {
      "get": {
        "summary": "List transfers.\nAuthorization scope of `fm.client-employee.transfer.list` is required.",
        "operationId": "ClientEmployeeService_ListTransfer",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmListTransferResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "filter.limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "employee_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "client_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ClientEmployeeService"
        ]
      }
    },
    "/v1/client-region": {
      "patch": {
        "summary": "Update region of clients if it is empty.\nAuthorization scope of `fm.client.update` is required.",
        "operationId": "ClientService_UpdateClientRegion",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmUpdateClientRegionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmUpdateClientRegionRequest"
            }
          }
        ],
        "tags": [
          "ClientService"
        ]
      }
    },
    "/v1/client-region-delete": {
      "post": {
        "summary": "Make region field null.\nAuthorization scope of `fm.client.update` is required.",
        "operationId": "ClientService_DeleteClientRegion",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmDeleteClientRegionRequest"
            }
          }
        ],
        "tags": [
          "ClientService"
        ]
      }
    },
    "/v1/client/appointment/create": {
      "post": {
        "summary": "Create an Appointment.\nAuthorization scope of `fm.appointment.create` is required",
        "operationId": "ClientService_CreateAppointment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmCreateAppointmentResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmCreateAppointmentRequest"
            }
          }
        ],
        "tags": [
          "ClientService"
        ]
      }
    },
    "/v1/client/appointment/delete": {
      "post": {
        "summary": "Delete an appointment\nAuthorization scope of `fm.appointment,delete` is required",
        "operationId": "ClientService_DeleteAppointment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmDeleteAppointmentRequest"
            }
          }
        ],
        "tags": [
          "ClientService"
        ]
      }
    },
    "/v1/client/appointment/list": {
      "get": {
        "summary": "Returns the list of appointments visible to the authorized user in descending order\nAuthorization scope of `fm.appointment.list` is required",
        "operationId": "ClientService_ListAppointment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmListAppointmentResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "filter.limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "organization_id",
            "description": "organization id.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ClientService"
        ]
      }
    },
    "/v1/client/appointment/update": {
      "patch": {
        "summary": "Update an appointment\nAuthorization scope of `fm.appointment.update` is required",
        "operationId": "ClientService_UpdateAppointment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmUpdateAppointmentResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmUpdateAppointmentRequest"
            }
          }
        ],
        "tags": [
          "ClientService"
        ]
      }
    },
    "/v1/client/bid-planner": {
      "post": {
        "summary": "Create Bid Planner\nAuthorization scope of `fm.bid.create` is required",
        "operationId": "ClientService_CreateBidPlanner",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmCreateBidPlannerResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmCreateBidPlannerRequest"
            }
          }
        ],
        "tags": [
          "ClientService"
        ]
      }
    },
    "/v1/client/bid-planner-status/create": {
      "post": {
        "summary": "Create bid planner status\nAuthorization scope of `fm.bid-status.create` is required",
        "operationId": "ClientService_CreateBidPlannerStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmCreateBidPlannerStatusResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmCreateBidPlannerStatusRequest"
            }
          }
        ],
        "tags": [
          "ClientService"
        ]
      }
    },
    "/v1/client/bid-planner-status/delete": {
      "post": {
        "summary": "Delete a bid planner status\nAuthorization scope of `fm.bid-status.delete` is required",
        "operationId": "ClientService_DeleteBidPlannerStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmDeleteBidPlannerStatusRequest"
            }
          }
        ],
        "tags": [
          "ClientService"
        ]
      }
    },
    "/v1/client/bid-planner-status/list": {
      "get": {
        "summary": "ListBidPlannerStatus returns the list of bid planner status visible to the authorized user in\nascending order of title",
        "operationId": "ClientService_ListBidPlannerStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmListBidPlannerStatusResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "filter.limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "organization_id",
            "description": "organization id.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ClientService"
        ]
      }
    },
    "/v1/client/bid-planner-status/update": {
      "patch": {
        "summary": "Update bid planner status\nAuthorization scope of `fm.bid-status.update` is required",
        "operationId": "ClientService_UpdateBidPlannerStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmUpdateBidPlannerStatusResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmUpdateBidPlannerStatusRequest"
            }
          }
        ],
        "tags": [
          "ClientService"
        ]
      }
    },
    "/v1/client/bid-planner/list": {
      "get": {
        "summary": "Returns all the bid planner and stages information \nAuthorization scope of `fm.bid.list` is required",
        "operationId": "ClientService_ListBidPlanner",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmListBidPlannerResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "organization_id",
            "description": "fetch bid planner information for this organization id.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "description": "name of the client whose information is to be fetched.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "status",
            "description": "status of the stage.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "start_date",
            "description": "start date to filter by deadline.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "end_date",
            "description": "end date to filter by deadline.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "tags": [
          "ClientService"
        ]
      }
    },
    "/v1/client/bid-planner/update": {
      "patch": {
        "summary": "Updates the bid planner and its stages\nAuthorization scope of `fm.bid.update` is required",
        "operationId": "ClientService_UpdateBidPlanner",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmUpdateBidPlannerResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmUpdateBidPlannerRequest"
            }
          }
        ],
        "tags": [
          "ClientService"
        ]
      }
    },
    "/v1/client/categories-questions/list": {
      "get": {
        "summary": "Returns the lists of categories and their associated questions.\nAuthorization scope of `fm.category-question.list` is required.",
        "operationId": "ClientService_ListCategoriesAndQuestions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmListCategoriesAndQuestionsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "organization_id",
            "description": "id of the organization.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "client_id",
            "description": "unique id of the client (optional).",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ClientService"
        ]
      }
    },
    "/v1/client/category/answer/update": {
      "patch": {
        "summary": "Update answer of a particular question.\nAuthorization scope of `fm.category-answer.update` is required.",
        "operationId": "ClientService_UpdateCategoryAnswer",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmUpdateCategoryAnswerResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmUpdateCategoryAnswerRequest"
            }
          }
        ],
        "tags": [
          "ClientService"
        ]
      }
    },
    "/v1/client/category/create": {
      "post": {
        "summary": "Create a Category.\nAuthorization scope of `fm.category.create` is required.",
        "operationId": "ClientService_CreateCategory",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmCreateCategoryResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmCreateCategoryRequest"
            }
          }
        ],
        "tags": [
          "ClientService"
        ]
      }
    },
    "/v1/client/category/delete": {
      "post": {
        "summary": "Delete a Category.\nAuthorization scope of `fm.category.delete` is required.",
        "operationId": "ClientService_DeleteCategory",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmDeleteCategoryRequest"
            }
          }
        ],
        "tags": [
          "ClientService"
        ]
      }
    },
    "/v1/client/category/list": {
      "get": {
        "summary": "ListCategory returns the list of category visible to the authorized user in descending order.\nAuthorization scope of `fm.category.list` is required.",
        "operationId": "ClientService_ListCategory",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmListCategoryResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "organization_id",
            "description": "id of the organization.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "client_id",
            "description": "unique id of the client.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ClientService"
        ]
      }
    },
    "/v1/client/category/question/create": {
      "post": {
        "summary": "Create a Question for a particular category.\nAuthorization scope of `fm.category-question.create` is required.",
        "operationId": "ClientService_CreateCategoryQuestion",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmCreateCategoryQuestionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmCreateCategoryQuestionRequest"
            }
          }
        ],
        "tags": [
          "ClientService"
        ]
      }
    },
    "/v1/client/category/question/delete": {
      "post": {
        "summary": "Delete a question of a particular category.\nAuthorization scope of `fm.category-question.delete` is required.",
        "operationId": "ClientService_DeleteCategoryQuestion",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmDeleteCategoryQuestionRequest"
            }
          }
        ],
        "tags": [
          "ClientService"
        ]
      }
    },
    "/v1/client/category/question/list": {
      "get": {
        "summary": "Returns the lists of questions of a particular category visible to the authorized user in descending order.\nAuthorization scope of `fm.category-question.list` is required.",
        "operationId": "ClientService_ListCategoryQuestions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmListCategoryQuestionsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "category_id",
            "description": "id of the category whose questions are to be displayed.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "organization_id",
            "description": "id of the organization.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ClientService"
        ]
      }
    },
    "/v1/client/category/question/update": {
      "patch": {
        "summary": "Update a question of a particular category.\nAuthorization scope of `fm.category-question.update` is required.",
        "operationId": "ClientService_UpdateCategoryQuestion",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmUpdateCategoryQuestionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmUpdateCategoryQuestionRequest"
            }
          }
        ],
        "tags": [
          "ClientService"
        ]
      }
    },
    "/v1/client/category/update": {
      "patch": {
        "summary": "Update a Category.\nAuthorization scope of `fm.category.update` is required.",
        "operationId": "ClientService_UpdateCategory",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmUpdateCategoryResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmUpdateCategoryRequest"
            }
          }
        ],
        "tags": [
          "ClientService"
        ]
      }
    },
    "/v1/client/change-status": {
      "patch": {
        "summary": "Change status of a client.\nScope of `fm.client.status-change` is required.",
        "operationId": "ClientService_ChangeStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmClientChangeStatusResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmClientChangeStatusRequest"
            }
          }
        ],
        "tags": [
          "ClientService"
        ]
      }
    },
    "/v1/client/confidential/list": {
      "get": {
        "summary": "Returns confidential details of a client.\nAuthorization scope of `fm.client.confidential` is required.",
        "operationId": "ClientService_ClientConfidentialDetail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmClientConfidentialDetailResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "client_id",
            "description": "id of the client.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "username",
            "description": "username of the user.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "password",
            "description": "password of the user.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ClientService"
        ]
      }
    },
    "/v1/client/confidential/update": {
      "patch": {
        "summary": "Updates the confidential details of a client.\nAuthorization scope of `fm.client.confidential` is required.",
        "operationId": "ClientService_UpdateClientConfidential",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmUpdateClientConfidentialResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmUpdateClientConfidentialRequest"
            }
          }
        ],
        "tags": [
          "ClientService"
        ]
      }
    },
    "/v1/client/crm-mobilization-task": {
      "post": {
        "summary": "Updates or creates a crm-mobilization task.\nAuthorization scope of `fm.crm-mobilization-task.create` is required.",
        "operationId": "ClientService_UpsertCRMMobilizationTask",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmUpsertCRMMobilizationTaskResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmUpsertCRMMobilizationTaskRequest"
            }
          }
        ],
        "tags": [
          "ClientService"
        ]
      }
    },
    "/v1/client/crm-mobilization-task-date": {
      "post": {
        "summary": "Updates or creates a crm-mobilization-task date.\nAuthorization scope of `fm.crm-mobilization-task-date.create` is required.",
        "operationId": "ClientService_UpsertCRMMobilizationTaskDate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmUpsertCRMMobilizationTaskDateResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmUpsertCRMMobilizationTaskDateRequest"
            }
          }
        ],
        "tags": [
          "ClientService"
        ]
      }
    },
    "/v1/client/crm-mobilization-task-date/create": {
      "post": {
        "summary": "Creates multiple CRM mobilization task dates.\nAuthorization scope of `fm.crm-mobilization-task-date.create` is required.",
        "operationId": "ClientService_CreateCRMMobilizationTaskDates",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmCreateCRMMobilizationTaskDatesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmCreateCRMMobilizationTaskDatesRequest"
            }
          }
        ],
        "tags": [
          "ClientService"
        ]
      }
    },
    "/v1/client/crm-mobilization-task-date/delete": {
      "post": {
        "summary": "Delete a particular task-date of CRM mobilization-task.\nAuthorization scope of `fm.crm-mobilization-task-date.delete` is required.",
        "operationId": "ClientService_DeleteCRMMobilizationTaskDate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmDeleteCRMMobilizationTaskDateRequest"
            }
          }
        ],
        "tags": [
          "ClientService"
        ]
      }
    },
    "/v1/client/crm-mobilization-task/create-all": {
      "post": {
        "summary": "Creates or updates multiple CRM mobilization tasks.\nAuthorization scope of `fm.crm-mobilization-task.create` is required.",
        "operationId": "ClientService_UpsertCRMMobilizationTasks",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmUpsertCRMMobilizationTasksResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmUpsertCRMMobilizationTasksRequest"
            }
          }
        ],
        "tags": [
          "ClientService"
        ]
      }
    },
    "/v1/client/crm-mobilization-task/delete": {
      "post": {
        "summary": "Delete a particular task of CRM mobilization.\nAuthorization scope of `fm.crm-mobilization-task.delete` is required.",
        "operationId": "ClientService_DeleteCRMMobilizationTask",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmDeleteCRMMobilizationTaskRequest"
            }
          }
        ],
        "tags": [
          "ClientService"
        ]
      }
    },
    "/v1/client/crm-mobilization/create": {
      "post": {
        "summary": "Create a CRM mobilization.\nAuthorization scope of `fm.crm-mobilization.create` is required.",
        "operationId": "ClientService_CreateCRMMobilization",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmCreateCRMMobilizationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmCreateCRMMobilizationRequest"
            }
          }
        ],
        "tags": [
          "ClientService"
        ]
      }
    },
    "/v1/client/crm-mobilization/create-all": {
      "post": {
        "summary": "Create multiple CRM mobilizations.\nAuthorization scope of `fm.crm-mobilization.create` is required.",
        "operationId": "ClientService_CreateCRMMobilizations",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmCreateCRMMobilizationsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmCreateCRMMobilizationsRequest"
            }
          }
        ],
        "tags": [
          "ClientService"
        ]
      }
    },
    "/v1/client/crm-mobilization/delete": {
      "post": {
        "summary": "Delete a CRM mobilization.\nAuthorization scope of `fm.crm-mobilization.delete` is required.",
        "operationId": "ClientService_DeleteCRMMobilization",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmDeleteCRMMobilizationRequest"
            }
          }
        ],
        "tags": [
          "ClientService"
        ]
      }
    },
    "/v1/client/crm-mobilization/list": {
      "get": {
        "summary": "Return the list of CRM mobilization visible to the authorized user in descending order.\nAuthorization scope of `fm.crm-mobilization.list` is required.",
        "operationId": "ClientService_ListCRMMobilization",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmListCRMMobilizationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "filter.limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "organization_id",
            "description": "id of the organization.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "client_id",
            "description": "filter by client id (optional).",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ClientService"
        ]
      }
    },
    "/v1/client/lead": {
      "post": {
        "summary": "Create a new client lead\nAuthorization scope of `fm.client.lead` is required.",
        "operationId": "ClientService_CreateLead",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmCreateClientResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmCreateClientRequest"
            }
          }
        ],
        "tags": [
          "ClientService"
        ]
      }
    },
    "/v1/client/lead/status": {
      "patch": {
        "summary": "Change lead client status\nAuthorization scope of `fm.client.lead` is required.",
        "operationId": "ClientService_LeadStatusChange",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmLeadStatusChangeRequest"
            }
          }
        ],
        "tags": [
          "ClientService"
        ]
      }
    },
    "/v1/client/lead/transfer": {
      "get": {
        "summary": "Transfer lead to prospect\nAuthorization scope of `fm.cleint.prospect` is required.",
        "operationId": "ClientService_TransferLeadToProspect",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "client_id",
            "description": "unique id of client.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ClientService"
        ]
      }
    },
    "/v1/client/mobilization-template/create": {
      "post": {
        "summary": "Creates a mobilization template.\nAuthorization scope of `fm.mobilization-template.create` is required.",
        "operationId": "ClientService_CreateMobilizationTemplate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmCreateMobilizationTemplateResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmCreateMobilizationTemplateRequest"
            }
          }
        ],
        "tags": [
          "ClientService"
        ]
      }
    },
    "/v1/client/mobilization-template/delete": {
      "post": {
        "summary": "Deletes a particular template\nAuthorization scope of `fm.mobilization-template.delete` is required.",
        "operationId": "ClientService_DeleteMobilizationTemplate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmDeleteMobilizationTemplateRequest"
            }
          }
        ],
        "tags": [
          "ClientService"
        ]
      }
    },
    "/v1/client/mobilization-template/list": {
      "get": {
        "summary": "Returns the list of mobilization templates visible to the authorized user in descending order.\nAuthorization scope of `fm.mobilization-template.list` is required.",
        "operationId": "ClientService_ListMobilizationTemplate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmListMobilizationTemplateResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "filter.limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "organization_id",
            "description": "id of the organization.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ClientService"
        ]
      }
    },
    "/v1/client/mobilization-template/update": {
      "patch": {
        "summary": "Updates a particular template\nAuthorization scope of `fm.mobilization-template.update` is required.",
        "operationId": "ClientService_UpdateMobilizationTemplate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmUpdateMobilizationTemplateResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmUpdateMobilizationTemplateRequest"
            }
          }
        ],
        "tags": [
          "ClientService"
        ]
      }
    },
    "/v1/client/new-mobilization/create": {
      "post": {
        "summary": "Create a new mobilization.\nAuthorization scope of `fm.new-mobilization.create` is required.",
        "operationId": "ClientService_CreateNewMobilization",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmCreateNewMobilizationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmCreateNewMobilizationRequest"
            }
          }
        ],
        "tags": [
          "ClientService"
        ]
      }
    },
    "/v1/client/new-mobilization/delete": {
      "post": {
        "summary": "Deletes a particular new-mobilization.\nAuthorization scope of `fm.new-mobilization.delete` is required.",
        "operationId": "ClientService_DeleteNewMobilization",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmDeleteNewMobilizationRequest"
            }
          }
        ],
        "tags": [
          "ClientService"
        ]
      }
    },
    "/v1/client/new-mobilization/list": {
      "get": {
        "summary": "Return the list of new mobilization visible to the authorized user in descending order.\nAuthorization scope of `fm.new-mobilization.list` is required.",
        "operationId": "ClientService_ListNewMobilization",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmListNewMobilizationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "organization_id",
            "description": "id of the organization.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "client_id",
            "description": "filter by client_id (optional).",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "status",
            "description": "filter response by status of clients.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "ClientService"
        ]
      }
    },
    "/v1/client/new-mobilization/update": {
      "patch": {
        "summary": "Updates a particular new-mobilization.\nAuthorization scope of `fm.new-mobilization.update` is required.",
        "operationId": "ClientService_UpdateNewMobilization",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmUpdateNewMobilizationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmUpdateNewMobilizationRequest"
            }
          }
        ],
        "tags": [
          "ClientService"
        ]
      }
    },
    "/v1/client/parent-mobilization-template": {
      "post": {
        "summary": "Creates or Updates a parent mobilization.\nAuthorization scope of `fm.parent-mobilization-template.create` is required.",
        "operationId": "ClientService_UpsertParentMobilization",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmUpsertParentMobilizationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmUpsertParentMobilizationRequest"
            }
          }
        ],
        "tags": [
          "ClientService"
        ]
      }
    },
    "/v1/client/parent-mobilization-template/delete": {
      "post": {
        "summary": "Deletes a parent mobilization.\nAuthorization scope of `fm.parent-mobilization-template.delete` is required.",
        "operationId": "ClientService_DeleteParentMobilization",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmDeleteParentMobilizationRequest"
            }
          }
        ],
        "tags": [
          "ClientService"
        ]
      }
    },
    "/v1/client/parent-mobilization-template/list": {
      "get": {
        "summary": "Returns the list of parent mobilization templates visible to the authorized user in descending order.\nAuthorization scope of `fm.parent-mobilization-template.list` is required.",
        "operationId": "ClientService_ListParentMobilization",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmListParentMobilizationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "filter.limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "organization_id",
            "description": "id of the organization.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parent_mobilization_id",
            "description": "parent mobilization id to filter the request (optional).",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ClientService"
        ]
      }
    },
    "/v1/client/planner/create": {
      "post": {
        "summary": "Creates a planner for client.\nAuthorization scope of `fm.planner.create` is required.",
        "operationId": "ClientService_CreatePlanner",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmCreatePlannerResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmCreatePlannerRequest"
            }
          }
        ],
        "tags": [
          "ClientService"
        ]
      }
    },
    "/v1/client/planner/delete": {
      "post": {
        "summary": "Deletes a planner.\nAuthorization scope of `fm.planner.delete` is required.",
        "operationId": "ClientService_DeletePlanner",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmDeletePlannerRequest"
            }
          }
        ],
        "tags": [
          "ClientService"
        ]
      }
    },
    "/v1/client/planner/list": {
      "get": {
        "summary": "Returns the list of planners visible to the authorized user in descending order.\nAuthorization scope of `fm.planner.list` is required.",
        "operationId": "ClientService_ListPlanner",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmListPlannerResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "filter.limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "organization_id",
            "description": "id of the organization.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "client_id",
            "description": "filter by client id (optional).",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "start_date",
            "description": "start date to filter by task-date.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "end_date",
            "description": "end date to filter by task-date.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "tags": [
          "ClientService"
        ]
      }
    },
    "/v1/client/planner/update": {
      "patch": {
        "summary": "Updates a particular planner.\nAuthorization scope of `fm.planner.update` is required.",
        "operationId": "ClientService_UpdatePlanner",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmUpdatePlannerResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmUpdatePlannerRequest"
            }
          }
        ],
        "tags": [
          "ClientService"
        ]
      }
    },
    "/v1/client/set-head-office": {
      "post": {
        "summary": "set a single head office from clients.\nScope of `fm.client.set-headoffice` is required.",
        "operationId": "ClientService_SetHeadOffice",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmClientSetHeadOfficeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmClientSetHeadOfficeRequest"
            }
          }
        ],
        "tags": [
          "ClientService"
        ]
      }
    },
    "/v1/client/stage-status-change": {
      "patch": {
        "summary": "Change status of a bid-planner stage\nAuthorization scope of `fm.bid.change-status` is required",
        "operationId": "ClientService_StageStatusChange",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmStageStatusChangeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmStageStatusChangeRequest"
            }
          }
        ],
        "tags": [
          "ClientService"
        ]
      }
    },
    "/v1/client/stage/create": {
      "post": {
        "summary": "Create a Stage\nAuthorization scope of `fm.stage.create` is required",
        "operationId": "ClientService_CreateNewStage",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmCreateNewStageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmCreateNewStageRequest"
            }
          }
        ],
        "tags": [
          "ClientService"
        ]
      }
    },
    "/v1/client/stage/delete": {
      "post": {
        "summary": "Delete a stage\nAuthorization scope of `fm.stage,delete` is required",
        "operationId": "ClientService_DeleteNewStage",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmDeleteNewStageRequest"
            }
          }
        ],
        "tags": [
          "ClientService"
        ]
      }
    },
    "/v1/client/stage/list": {
      "get": {
        "summary": "ListNewStage returns the list of new stages visible to the authorized user in \nascending order of title",
        "operationId": "ClientService_ListNewStage",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmListNewStageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "filter.limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "organization_id",
            "description": "organization id.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ClientService"
        ]
      }
    },
    "/v1/client/stage/update": {
      "patch": {
        "summary": "Update a Stage\nAuthorization scope of `fm.stage.update` is required",
        "operationId": "ClientService_UpdateNewStage",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmUpdateNewStageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmUpdateNewStageRequest"
            }
          }
        ],
        "tags": [
          "ClientService"
        ]
      }
    },
    "/v1/client/tender-status": {
      "post": {
        "summary": "UpsertTenderStatus creates or updates the tender status.\nAuthorization scope of `fm.tender-status.create` is required.",
        "operationId": "ClientService_UpsertTenderStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmUpsertTenderStatusResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmUpsertTenderStatusRequest"
            }
          }
        ],
        "tags": [
          "ClientService"
        ]
      }
    },
    "/v1/client/tender-status/list": {
      "get": {
        "summary": "Returns the list of tender status.\nAuthorization scope of `fm.tender-status.list` is required.",
        "operationId": "ClientService_ListTenderStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmListTenderStatusResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "organization_id",
            "description": "organization id.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "client_ids",
            "description": "filter by ids of clients.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "start_date",
            "description": "start date to filter by created_date.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "end_date",
            "description": "end date to filter by created_date.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "tags": [
          "ClientService"
        ]
      }
    },
    "/v1/client/tupe/create": {
      "post": {
        "summary": "Creates a tupe.\nAuthorization scope of `fm.tupe.create` is required.",
        "operationId": "ClientService_CreateTupe",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmCreateTupeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmCreateTupeRequest"
            }
          }
        ],
        "tags": [
          "ClientService"
        ]
      }
    },
    "/v1/client/tupe/delete": {
      "post": {
        "summary": "Deletes an existing tupe.\nAuthorization scope of `fm.tupe.delete` is required.",
        "operationId": "ClientService_DeleteTupe",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmDeleteTupeRequest"
            }
          }
        ],
        "tags": [
          "ClientService"
        ]
      }
    },
    "/v1/client/tupe/list": {
      "get": {
        "summary": "Returns the list of tupe visible to the authorized user in descending order.\nAuthorization scope of `fm.tupe.list` is required.",
        "operationId": "ClientService_ListTupe",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmListTupeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "filter.limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "organization_id",
            "description": "id of the organization.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "client_id",
            "description": "filter by client id (optional).",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ClientService"
        ]
      }
    },
    "/v1/client/tupe/update": {
      "patch": {
        "summary": "Updates an existing tupe.\nAuthorization scope of `fm.tupe.update` is required.",
        "operationId": "ClientService_UpdateTupe",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmUpdateTupeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmUpdateTupeRequest"
            }
          }
        ],
        "tags": [
          "ClientService"
        ]
      }
    },
    "/v1/client/{client_id}": {
      "get": {
        "summary": "Details of client.\nScope of `fm.client.detail` is required.",
        "operationId": "ClientService_Detail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmClientDetailResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "client_id",
            "description": "Client Id of the client",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ClientService"
        ]
      }
    },
    "/v1/client/{client_id}/attachment": {
      "get": {
        "summary": "Lists attachment for a client.\nScope of `fm.client.list-attachment` is required.",
        "operationId": "ClientService_ListAttachment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmClientListAttachmentResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "client_id",
            "description": "unique identifier of the client",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "attachment_type",
            "description": "type of attachment to list.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ClientService"
        ]
      },
      "post": {
        "summary": "Adds attachment for a client.\nScope of `fm.client.add-attachment` is required.",
        "operationId": "ClientService_AddAttachment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmClientAddAttachmentResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "client_id",
            "description": "unique identifier of the client",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmClientAddAttachmentRequest"
            }
          }
        ],
        "tags": [
          "ClientService"
        ]
      }
    },
    "/v1/client/{client_id}/mobilization": {
      "get": {
        "summary": "List client mobilization\nAuthorization scope of `fm.client.get-client-mobilization` is required",
        "operationId": "ClientService_ListClientMobilization",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmListClientMobilizationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "client_id",
            "description": "client id of the requested mobilization",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "filter.limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "ClientService"
        ]
      },
      "post": {
        "summary": "Create a new client mobilization\nAuthorization scope of `fm.client.create-client-mobilization` is required",
        "operationId": "ClientService_CreateClientMobilization",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmCreateClientMobilizationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "client_id",
            "description": "client id for the mobilization",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmCreateClientMobilizationRequest"
            }
          }
        ],
        "tags": [
          "ClientService"
        ]
      },
      "patch": {
        "summary": "Update client mobilization\nAuthorization scope of `fm.client.update-client-mobilization` is required",
        "operationId": "ClientService_UpdateClientMobilization",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmUpdateClientMobilizationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "client_id",
            "description": "client id for the mobilization",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmUpdateClientMobilizationRequest"
            }
          }
        ],
        "tags": [
          "ClientService"
        ]
      }
    },
    "/v1/clients": {
      "get": {
        "summary": "List returns the list of client visible to the authorized user in\ndescending order. Scope of `fm.client.list` is required.",
        "operationId": "ClientService_List",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmListClientResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "filter.limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "organization_id",
            "description": "fetch clients for this organization_id.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "client_ids",
            "description": "list of client ids to fetch by.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "status",
            "description": "status to fetch clients by.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "search.name",
            "description": "name of client.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "search.client_code",
            "description": "unique client code.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "search.area",
            "description": "area of client.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "search.region",
            "description": "region of client.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "search.head_office_id",
            "description": "head office id.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "search.lead_status",
            "description": "status of lead client : allowed \"ACTIVE\", \"INACTIVE\".",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "search.lead_employees",
            "description": "lead client estimated employees required.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "search.lead_employee_hours",
            "description": "estimated hours required.",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "float"
          },
          {
            "name": "search.sector_id",
            "description": "unique id of sector.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "search.city",
            "description": "city of client.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "search.post_code",
            "description": "post code.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ClientService"
        ]
      }
    },
    "/v1/clients-date/list": {
      "get": {
        "summary": "Client Date Details\nscope of `fm.client.list` is required.",
        "operationId": "ClientService_DateDetail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmClientDateDetailResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "organization_id",
            "description": "unique id of organization.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "client_ids",
            "description": "ids of clients.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "ClientService"
        ]
      }
    },
    "/v1/comment": {
      "post": {
        "summary": "Store new comment",
        "operationId": "CommentService_CreateComment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmCommentResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmCreateCommentRequest"
            }
          }
        ],
        "tags": [
          "CommentService"
        ]
      }
    },
    "/v1/comment-reply": {
      "post": {
        "summary": "Store Comment Reply",
        "operationId": "CommentService_CreateReply",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmCreateReplyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmCreateReplyRequest"
            }
          }
        ],
        "tags": [
          "CommentService"
        ]
      }
    },
    "/v1/comment-reply/{reply_id}": {
      "delete": {
        "summary": "Delete a comment reply",
        "operationId": "CommentService_DeleteReply",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmDeleteReplyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "reply_id",
            "description": "the unique id of comment",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmDeleteReplyRequest"
            }
          }
        ],
        "tags": [
          "CommentService"
        ]
      },
      "put": {
        "summary": "Update a comment reply",
        "operationId": "CommentService_UpdateReply",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmUpdateReplyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "reply_id",
            "description": "the unique id of reply",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmUpdateReplyRequest"
            }
          }
        ],
        "tags": [
          "CommentService"
        ]
      }
    },
    "/v1/comment/{comment_id}": {
      "delete": {
        "summary": "Delete a comment",
        "operationId": "CommentService_DeleteComment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmDeleteCommentResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "comment_id",
            "description": "the unique id of comment",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmDeleteCommentRequest"
            }
          }
        ],
        "tags": [
          "CommentService"
        ]
      },
      "put": {
        "summary": "Update a comment",
        "operationId": "CommentService_UpdateComment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmUpdateCommentResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "comment_id",
            "description": "the unique id of comment",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmUpdateCommentRequest"
            }
          }
        ],
        "tags": [
          "CommentService"
        ]
      }
    },
    "/v1/comments/{commentable_id}/{commentable_type}/all": {
      "get": {
        "summary": "Get list of comments of a commentable type and id.",
        "operationId": "CommentService_GetAllComments",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmListCommentResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "commentable_id",
            "description": "Id to uniquely identify the commentable",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "commentable_type",
            "description": "The type of commentable",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "employee_id",
            "description": "Employee id to filter the data\nOptional.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "organization_id",
            "description": "Currently logged in organization_id.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "CommentService"
        ]
      }
    },
    "/v1/department": {
      "post": {
        "summary": "Create a new department. Authorization scope of `fm.department.create` is\nrequired",
        "operationId": "DepartmentService_Create",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmCreateDepartmentResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmCreateDepartmentRequest"
            }
          }
        ],
        "tags": [
          "DepartmentService"
        ]
      },
      "put": {
        "summary": "Update department of an organization. Authorization scope of `fm.department.update`\nis required",
        "operationId": "DepartmentService_Update",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmUpdateDepartmentResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmUpdateDepartmentRequest"
            }
          }
        ],
        "tags": [
          "DepartmentService"
        ]
      }
    },
    "/v1/department-delete": {
      "post": {
        "summary": "Delete a department. Authorization scope of `fm.department.delete` is required",
        "operationId": "DepartmentService_Delete",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmDeleteDepartmentRequest"
            }
          }
        ],
        "tags": [
          "DepartmentService"
        ]
      }
    },
    "/v1/department/area": {
      "post": {
        "summary": "Create a new Area. Authorization scope of `fm.area.create` is\nrequired",
        "operationId": "AreaRegionService_CreateArea",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmUpsertAreaResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmCreateAreaRequest"
            }
          }
        ],
        "tags": [
          "AreaRegionService"
        ]
      },
      "put": {
        "summary": "Update existing Area. Authorization scope of `fm.area.update` is required",
        "operationId": "AreaRegionService_UpdateArea",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmUpsertAreaResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmUpdateAreaRequest"
            }
          }
        ],
        "tags": [
          "AreaRegionService"
        ]
      }
    },
    "/v1/department/area-delete": {
      "post": {
        "summary": "Delete existing Area. Authorization scope of `fm.area.delete` is required",
        "operationId": "AreaRegionService_DeleteArea",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmDeleteAreaResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmDeleteAreaRequest"
            }
          }
        ],
        "tags": [
          "AreaRegionService"
        ]
      }
    },
    "/v1/department/areas": {
      "get": {
        "summary": "List returns the list of Area\nascending order of Area title",
        "operationId": "AreaRegionService_ListArea",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmListAreaResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "filter.limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "region_id",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "AreaRegionService"
        ]
      }
    },
    "/v1/department/region": {
      "post": {
        "summary": "Create a new Region. Authorization scope of `fm.region.create` is\nrequired",
        "operationId": "AreaRegionService_CreateRegion",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmUpsertRegionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmCreateRegionRequest"
            }
          }
        ],
        "tags": [
          "AreaRegionService"
        ]
      },
      "put": {
        "summary": "Create a new Region. Authorization scope of `fm.region.update` is required",
        "operationId": "AreaRegionService_UpdateRegion",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmUpsertRegionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmUpdateRegionRequest"
            }
          }
        ],
        "tags": [
          "AreaRegionService"
        ]
      }
    },
    "/v1/department/region-delete": {
      "post": {
        "summary": "Delete an existing Region. Authorization scope of `fm.region.delete` is required",
        "operationId": "AreaRegionService_DeleteRegion",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmDeleteRegionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmDeleteRegionRequest"
            }
          }
        ],
        "tags": [
          "AreaRegionService"
        ]
      }
    },
    "/v1/department/regions": {
      "get": {
        "summary": "List returns the list of regions\nascending order of region title",
        "operationId": "AreaRegionService_ListRegion",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmListRegionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "filter.limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "AreaRegionService"
        ]
      }
    },
    "/v1/department/sector": {
      "post": {
        "summary": "Create a new sector. Authorization scope of `fm.sector.create` is required",
        "operationId": "SectorService_Create",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmCreateSectorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmCreateSectorRequest"
            }
          }
        ],
        "tags": [
          "SectorService"
        ]
      },
      "put": {
        "summary": "Update sector details. Authorization scope of `fm.sector.update` is required",
        "operationId": "SectorService_UpdateSector",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmUpdateSectorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmUpdateSectorRequest"
            }
          }
        ],
        "tags": [
          "SectorService"
        ]
      }
    },
    "/v1/department/sector-delete": {
      "post": {
        "summary": "Delete a sector. Authorization scope of `fm.sector.delete` is required",
        "operationId": "SectorService_DeleteSector",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmDeleteSectorRequest"
            }
          }
        ],
        "tags": [
          "SectorService"
        ]
      }
    },
    "/v1/department/sectors": {
      "get": {
        "summary": "List returns the list of sector visible to the authorized user in\nascending order of sector title",
        "operationId": "SectorService_List",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmListSectorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "filter.limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "SectorService"
        ]
      }
    },
    "/v1/department/sub-area": {
      "post": {
        "summary": "Create a new Sub-Area. Authorization scope of `fm.sub-area.create` is \nrequired",
        "operationId": "AreaRegionService_CreateSubArea",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmUpsertSubAreaResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmCreateSubAreaRequest"
            }
          }
        ],
        "tags": [
          "AreaRegionService"
        ]
      },
      "put": {
        "summary": "Update existing Sub Area. Authorization scope of `fm.sub-area.update` is required",
        "operationId": "AreaRegionService_UpdateSubArea",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmUpsertSubAreaResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmUpdateSubAreaRequest"
            }
          }
        ],
        "tags": [
          "AreaRegionService"
        ]
      }
    },
    "/v1/department/sub-area-delete": {
      "post": {
        "summary": "Delete existing Sub-Area of an Area. Authorizaton scope of `fm.sub-area.delete` is required",
        "operationId": "AreaRegionService_DeleteSubArea",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmDeleteSubAreaResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmDeleteSubAreaRequest"
            }
          }
        ],
        "tags": [
          "AreaRegionService"
        ]
      }
    },
    "/v1/department/training-type": {
      "get": {
        "summary": "ListTrainingType returns the list of training type visible to the authorized user in\nascending order of training type title",
        "operationId": "DepartmentService_ListTrainingType",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmListTrainingTypeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "filter.limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "organization_id",
            "description": "organization id.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "DepartmentService"
        ]
      },
      "post": {
        "summary": "Create a new training type\nAuthorization scope of `fm.training-type.create` is required",
        "operationId": "DepartmentService_CreateTrainingType",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmCreateTrainingTypeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmCreateTrainingTypeRequest"
            }
          }
        ],
        "tags": [
          "DepartmentService"
        ]
      },
      "patch": {
        "summary": "Update training type.\nAuthorization scope of `fm.training-type.update` is required",
        "operationId": "DepartmentService_UpdateTrainingType",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmUpdateTrainingTypeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmUpdateTrainingTypeRequest"
            }
          }
        ],
        "tags": [
          "DepartmentService"
        ]
      }
    },
    "/v1/department/training-type-delete": {
      "post": {
        "summary": "Delete a training type. \nAuthorization scope of `fm.training-type.delete` is required",
        "operationId": "DepartmentService_DeleteTrainingType",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmDeleteTrainingTypeRequest"
            }
          }
        ],
        "tags": [
          "DepartmentService"
        ]
      }
    },
    "/v1/departments": {
      "get": {
        "summary": "List returns the list of department visible to the authroized user in\nascending order of department title",
        "operationId": "DepartmentService_List",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmListDepartmentResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "filter.limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "DepartmentService"
        ]
      }
    },
    "/v1/designation": {
      "post": {
        "summary": "Create a new designation. Authorization scope of `fm.designation.create`\nis required",
        "operationId": "DesignationService_Create",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmCreateDesignationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmCreateDesignationRequest"
            }
          }
        ],
        "tags": [
          "DesignationService"
        ]
      },
      "put": {
        "summary": "Update designation details. Authorization scope of `fm.designation.update` is required",
        "operationId": "DesignationService_UpdateDesignation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmUpdateDesignationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmUpdateDesignationRequest"
            }
          }
        ],
        "tags": [
          "DesignationService"
        ]
      }
    },
    "/v1/designation-delete": {
      "post": {
        "summary": "Delete a designation. Authorization scope of `fm.designation.delete` is required",
        "operationId": "DesignationService_DeleteDesignation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmDeleteDesignationRequest"
            }
          }
        ],
        "tags": [
          "DesignationService"
        ]
      }
    },
    "/v1/designations": {
      "get": {
        "summary": "List returns the list of designation visible to the authorized user in\ndescending",
        "operationId": "DesignationService_List",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmListDesignationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "filter.limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "DesignationService"
        ]
      }
    },
    "/v1/employee": {
      "post": {
        "summary": "Create a new employee.\nAuthorization scope of `fm.employee.create` is required.",
        "operationId": "EmployeeService_Create",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmCreateEmployeeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmCreateEmployeeRequest"
            }
          }
        ],
        "tags": [
          "EmployeeService"
        ]
      },
      "patch": {
        "summary": "Update an existing employee.\nAuthorization scope of `fm.employee.update` is required.",
        "operationId": "EmployeeService_Update",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmUpdateEmployeeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmUpdateEmployeeRequest"
            }
          }
        ],
        "tags": [
          "EmployeeService"
        ]
      }
    },
    "/v1/employee/confidential/list": {
      "get": {
        "summary": "Returns confidential details of an employee.\nAuthorization scope of `fm.employee.confidential` is required.",
        "operationId": "EmployeeService_ConfidentialDetail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmEmployeeConfidentialDetailResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "employee_id",
            "description": "id of the employee.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "username",
            "description": "username of the user.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "password",
            "description": "password of the user.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "EmployeeService"
        ]
      }
    },
    "/v1/employee/confidential/update": {
      "patch": {
        "summary": "Updates the confidential details of an employee.\nAuthorization scope of `fm.employee.confidential` is required.",
        "operationId": "EmployeeService_UpdateEmployeeConfidential",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmUpdateEmployeeConfidentialResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmUpdateEmployeeConfidentialRequest"
            }
          }
        ],
        "tags": [
          "EmployeeService"
        ]
      }
    },
    "/v1/employee/new/create": {
      "post": {
        "summary": "Creates a new employee.",
        "operationId": "EmployeeService_CreateNewEmployee",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmCreateNewEmployeeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmCreateNewEmployeeRequest"
            }
          }
        ],
        "tags": [
          "EmployeeService"
        ]
      }
    },
    "/v1/employee/organization-code": {
      "post": {
        "summary": "Creates or Updates a unique code for an organization.\nAuthorization scope of `fm.employee.create` is required.",
        "operationId": "EmployeeService_UpsertOrganizationCode",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmUpsertOrganizationCodeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmUpsertOrganizationCodeRequest"
            }
          }
        ],
        "tags": [
          "EmployeeService"
        ]
      }
    },
    "/v1/employee/organization-code/detail": {
      "get": {
        "summary": "Get code of an organization.\nAuthorization scope of `fm.employee.create` is required.",
        "operationId": "EmployeeService_GetOrganizationCode",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmGetOrganizationCodeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "organization_id",
            "description": "id of the organization.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "EmployeeService"
        ]
      }
    },
    "/v1/employee/status": {
      "post": {
        "summary": "Update an employee status\nAuthorization scope of `fm.employee.update-status` is required.",
        "operationId": "EmployeeService_UpdateStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmUpdateEmployeeStatusResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmUpdateEmployeeStatusRequest"
            }
          }
        ],
        "tags": [
          "EmployeeService"
        ]
      }
    },
    "/v1/employee/{employee_id}": {
      "get": {
        "summary": "Details of employee.\nScope of `fm.employee.detail` is required.",
        "operationId": "EmployeeService_Detail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmEmployeeDetailResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "employee_id",
            "description": "employee Id of the employee",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "EmployeeService"
        ]
      }
    },
    "/v1/employee/{employee_id}/attachment": {
      "get": {
        "summary": "Lists attachment for an employee.\nScope of `fm.employee.list-attachment` is required.",
        "operationId": "EmployeeService_ListAttachment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmEmployeeListAttachmentResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "employee_id",
            "description": "unique identifier of the employee",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "attachment_type",
            "description": "type of attachment to list.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "EmployeeService"
        ]
      },
      "post": {
        "summary": "Adds attachment for an employee.\nScope of `fm.employee.add-attachment` is required.",
        "operationId": "EmployeeService_AddAttachment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmEmployeeAddAttachmentResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "employee_id",
            "description": "unique identifier of the employee",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmEmployeeAddAttachmentRequest"
            }
          }
        ],
        "tags": [
          "EmployeeService"
        ]
      }
    },
    "/v1/employee/{employee_id}/attachment/{attachment_id}": {
      "delete": {
        "summary": "Soft deletes an attachment for an employee.\nScope of `fm.employee.delete-attachment` is required.",
        "operationId": "EmployeeService_DeleteAttachment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmEmployeeDeleteAttachmentResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "employee_id",
            "description": "unique identifier for an employee",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "attachment_id",
            "description": "unique identifier for an attachment",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmEmployeeDeleteAttachmentRequest"
            }
          }
        ],
        "tags": [
          "EmployeeService"
        ]
      }
    },
    "/v1/employees": {
      "get": {
        "summary": "List returns the list of employee visible to the authroized user in\ndescending order. Authorization scope of `fm.employee.list` is required.",
        "operationId": "EmployeeService_List",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmListEmployeeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "filter.limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "organization_id",
            "description": "fetch employees this organization_id belongs to.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "status",
            "description": "fetch employees of this status.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "search.name",
            "description": "name of client.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "search.employee_code",
            "description": "unique client code.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "search.area",
            "description": "area of client.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "search.region",
            "description": "region of client.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "EmployeeService"
        ]
      }
    },
    "/v1/employees/covers": {
      "get": {
        "operationId": "EmployeeCoverService_ListEmployeeCover",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmListCoverResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "filter.limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "organization_id",
            "description": "fetch employees this organization_id belongs to.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "employee_d",
            "description": "fetch cover for employee id.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "EmployeeCoverService"
        ]
      }
    },
    "/v1/employees/leavers": {
      "get": {
        "summary": "List employees that are leaving or left\nAuthentication scope of `fm.employee.leaver.list` is required",
        "operationId": "EmployeeLeaverService_ListEmployeeLeaver",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmListEmployeeLeaverResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "client_id",
            "description": "fetch leaver employees this client_id belongs to.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "employee_id",
            "description": "unique id of employee.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "organization_id",
            "description": "fetch leaver employees this organization_id belongs to.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "EmployeeLeaverService"
        ]
      }
    },
    "/v1/inventory": {
      "get": {
        "summary": "Returns the list of inventory items in ascending order of name.\nAuthorization scope of `fm.inventory.list` is required.",
        "operationId": "InventoryService_ListInventoryItem",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmListInventoryItemResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "filter.limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "organization_id",
            "description": "filter for selected organization check request.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "inventory_item_ids",
            "description": "list of item ids to fetch by.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "InventoryService"
        ]
      },
      "post": {
        "summary": "Create a new inventory item.\nAuthorization scope of `fm.inventory.create` is required.",
        "operationId": "InventoryService_CreateInventoryItem",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmCreateInventoryItemResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmCreateInventoryItemRequest"
            }
          }
        ],
        "tags": [
          "InventoryService"
        ]
      }
    },
    "/v1/inventory/category": {
      "get": {
        "summary": "Returns the list of inventory item categories in ascending order of name.\nAuthorization scope of `fm.inventory.category.list` is required.",
        "operationId": "InventoryService_ListInventoryCategory",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmListInventoryCategoryResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "organization_id",
            "description": "Organization id.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "inventory_category_ids",
            "description": "list of inventory category ids to fetch by.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "InventoryService"
        ]
      },
      "post": {
        "summary": "Create a new inventory category.\nAuthorization scope of `fm.inventory.category.create` is required.",
        "operationId": "InventoryService_CreateInventoryCategory",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmCreateInventoryCategoryResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmCreateInventoryCategoryRequest"
            }
          }
        ],
        "tags": [
          "InventoryService"
        ]
      }
    },
    "/v1/issue": {
      "post": {
        "summary": "Create a new issue.\nAuthorization scope of `fm.issue.create` is required.",
        "operationId": "IssueService_CreateIssue",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmCreateIssueResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmCreateIssueRequest"
            }
          }
        ],
        "tags": [
          "IssueService"
        ]
      },
      "patch": {
        "summary": "Update an existing issue.\nAuthorization scope of `fm.issue.update` is required.",
        "operationId": "IssueService_UpdateIssue",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmUpdateIssueResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmUpdateIssueRequest"
            }
          }
        ],
        "tags": [
          "IssueService"
        ]
      }
    },
    "/v1/issue/delete": {
      "post": {
        "summary": "Deletes an existing issue.\nAuthorization scope of `fm.issue.delete` is required.",
        "operationId": "IssueService_DeleteIssue",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmDeleteIssueRequest"
            }
          }
        ],
        "tags": [
          "IssueService"
        ]
      }
    },
    "/v1/issue/status-update": {
      "patch": {
        "summary": "Updates the status of an issue.\nAuthorization scope of `fm.issue.status-update` is required.",
        "operationId": "IssueService_UpdateIssueStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmUpdateIssueStatusResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmUpdateIssueStatusRequest"
            }
          }
        ],
        "tags": [
          "IssueService"
        ]
      }
    },
    "/v1/issues": {
      "get": {
        "summary": "List returns the list of all issues visible to the authroized user in\ndescending date order. Authorization scope of `fm.issue.list` is required.",
        "operationId": "IssueService_ListIssues",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmListIssuesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "filter.limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "organization_id",
            "description": "unique id of the organization.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "client_id",
            "description": "unique id of the client (optional).",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "employee_id",
            "description": "id of the employee (optional).",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "issue_type",
            "description": "type of issue.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "start_date",
            "description": "start date to filter issues.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "end_date",
            "description": "end date to filter issues.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "status",
            "description": "status of the issue i.e. PENDING, COMPLETED, INPROGRESS.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "IssueService"
        ]
      }
    },
    "/v1/job-type": {
      "post": {
        "summary": "Create a new job type. Authorization scope of `fm.job-type.create` is\nrequired",
        "operationId": "JobTypeService_Create",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmCreateJobTypeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmCreateJobTypeRequest"
            }
          }
        ],
        "tags": [
          "JobTypeService"
        ]
      }
    },
    "/v1/job-types": {
      "get": {
        "summary": "List returns the list of job type visible to the authorized user in\nascending order of job type title",
        "operationId": "JobTypeService_List",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmListJobTypeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "filter.limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "JobTypeService"
        ]
      }
    },
    "/v1/login": {
      "post": {
        "summary": "authenticates user and returns tokens",
        "operationId": "JWTTokenService_Login",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmLoginResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmLoginRequest"
            }
          }
        ],
        "tags": [
          "JWTTokenService"
        ]
      }
    },
    "/v1/logout": {
      "post": {
        "summary": "logout the user and invalidate refresh token",
        "operationId": "JWTTokenService_Logout",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmLogoutResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmLogoutRequest"
            }
          }
        ],
        "tags": [
          "JWTTokenService"
        ]
      }
    },
    "/v1/meeting": {
      "get": {
        "summary": "List returns the list of meeting visible to the authorized user in\ndescending order. Scope of `fm.meeting.list` is required.",
        "operationId": "MeetingService_List",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmListMeetingResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "filter.limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "organization_id",
            "description": "fetch meetings for this organization_id.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "meeting_ids",
            "description": "list of meeting ids to fetch by.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "status",
            "description": "filter option of status (inprogress, cancel, completed).",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "start_date",
            "description": "start date to filter meeting by.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "end_date",
            "description": "end date to filter meeting by.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "client_ids",
            "description": "ids of client whose meeting is to be fetched.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "department_id",
            "description": "id of department.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "MeetingService"
        ]
      },
      "post": {
        "summary": "Create a new meeting.\nAuthorization scope of `fm.meeting.create` is required.",
        "operationId": "MeetingService_Create",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmCreateMeetingResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmCreateMeetingRequest"
            }
          }
        ],
        "tags": [
          "MeetingService"
        ]
      },
      "put": {
        "summary": "Update an existing meeting.\nAuthorization scope of `fm.meeting.update` is required.",
        "operationId": "MeetingService_Update",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmUpdateMeetingResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmUpdateMeetingRequest"
            }
          }
        ],
        "tags": [
          "MeetingService"
        ]
      }
    },
    "/v1/meeting-status": {
      "patch": {
        "summary": "Update status of a meeting.\nAuthorization scope of `fm.meeting-status.update` is required.",
        "operationId": "MeetingService_UpdateMeetingStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmUpdateMeetingStatusResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmUpdateMeetingStatusRequest"
            }
          }
        ],
        "tags": [
          "MeetingService"
        ]
      }
    },
    "/v1/meeting-timer/update": {
      "patch": {
        "summary": "start/stop meeting",
        "operationId": "MeetingService_MeetingTimerUpdate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmMeetingTimerUpdateResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmMeetingTimerUpdateRequest"
            }
          }
        ],
        "tags": [
          "MeetingService"
        ]
      }
    },
    "/v1/meeting/add-attendees": {
      "post": {
        "summary": "Add Attendees to existing meetings.\nAuthorization scope of `fm.meeting.update` is required.",
        "operationId": "MeetingService_AddAttendees",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmAddAttendeesRequest"
            }
          }
        ],
        "tags": [
          "MeetingService"
        ]
      }
    },
    "/v1/meeting/agenda/decision": {
      "post": {
        "summary": "Add decision of an agenda",
        "operationId": "MeetingService_AddAgendaDecision",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmUpsertAgendaDecisionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmAddAgendaDecisionRequest"
            }
          }
        ],
        "tags": [
          "MeetingService"
        ]
      },
      "put": {
        "summary": "Update decision of an agenda",
        "operationId": "MeetingService_UpdateAgendaDecision",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmUpsertAgendaDecisionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmUpdateAgendaDecisionRequest"
            }
          }
        ],
        "tags": [
          "MeetingService"
        ]
      }
    },
    "/v1/meeting/agenda/decision/objection": {
      "post": {
        "summary": "Add objection of decision of agenda",
        "operationId": "MeetingService_AddAgendaDecisionObjection",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmUpsertAgendaDecisionObjectionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmAddAgendaDecisionObjectionRequest"
            }
          }
        ],
        "tags": [
          "MeetingService"
        ]
      }
    },
    "/v1/meeting/agenda/decision/objection-delete": {
      "post": {
        "summary": "Delete objection made for decisions of an agenda",
        "operationId": "MeetingService_DeleteAgendaDecisionObjection",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmDeleteAgendaDecisionObjectionRequest"
            }
          }
        ],
        "tags": [
          "MeetingService"
        ]
      }
    },
    "/v1/meeting/agenda/decision/support": {
      "post": {
        "summary": "Add support to a decision of agenda",
        "operationId": "MeetingService_AddAgendaDecisionSupport",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmAddAgendaDecisionSupportResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmAddAgendaDecisionSupportRequest"
            }
          }
        ],
        "tags": [
          "MeetingService"
        ]
      }
    },
    "/v1/meeting/agenda/decision/timer": {
      "post": {
        "summary": "Start/Stop decision for an agenda of a meeting.\nAuthorization scope of `fm.agenda-decision-timer.update` is required",
        "operationId": "MeetingService_AgendaDecisionTimer",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmAgendaDecisionTimerResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmAgendaDecisionTimerRequest"
            }
          }
        ],
        "tags": [
          "MeetingService"
        ]
      }
    },
    "/v1/meeting/agenda/timer": {
      "post": {
        "summary": "start/stop agenda of meeting",
        "operationId": "MeetingService_AgendaTimerUpdate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmAgendaTimerResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmAgendaTimerRequest"
            }
          }
        ],
        "tags": [
          "MeetingService"
        ]
      }
    },
    "/v1/meeting/agenda/view": {
      "post": {
        "summary": "Add views to a given agenda in a meeting.",
        "operationId": "MeetingService_AddAgendaView",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmUpsertAgendaViewResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmAddAgendaViewRequest"
            }
          }
        ],
        "tags": [
          "MeetingService"
        ]
      },
      "put": {
        "summary": "Edit views of a given agenda in a meeting.",
        "operationId": "MeetingService_EditAgendaView",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmUpsertAgendaViewResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmEditAgendaViewRequest"
            }
          }
        ],
        "tags": [
          "MeetingService"
        ]
      }
    },
    "/v1/meeting/agenda/view-delete": {
      "post": {
        "summary": "Delete views of a given agenda in a meeting.",
        "operationId": "MeetingService_DeleteAgendaView",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmDeleteAgendaViewRequest"
            }
          }
        ],
        "tags": [
          "MeetingService"
        ]
      }
    },
    "/v1/meeting/agenda/view/reply": {
      "post": {
        "summary": "Add reply to a given agenda view.",
        "operationId": "MeetingService_AddAgendaViewReply",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmAddAgendaViewReplyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmAddAgendaViewReplyRequest"
            }
          }
        ],
        "tags": [
          "MeetingService"
        ]
      }
    },
    "/v1/meeting/call/create": {
      "post": {
        "summary": "Create a Call\nAuthorization scope of `fm.call.create` is required.",
        "operationId": "MeetingService_CreateCall",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmCreateCallResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmCreateCallRequest"
            }
          }
        ],
        "tags": [
          "MeetingService"
        ]
      }
    },
    "/v1/meeting/call/delete": {
      "post": {
        "summary": "Delete a call\nAuthorization scope of `fm.call,delete` is required",
        "operationId": "MeetingService_DeleteCall",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmDeleteCallRequest"
            }
          }
        ],
        "tags": [
          "MeetingService"
        ]
      }
    },
    "/v1/meeting/call/list": {
      "get": {
        "summary": "Returns the list of call visible to the authorized user in descending order\nAuthorization scope of `fm.call.list` is required",
        "operationId": "MeetingService_ListCall",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmListCallResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "filter.limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "client_id",
            "description": "client id to filter the response.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "organization_id",
            "description": "organization id.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "MeetingService"
        ]
      }
    },
    "/v1/meeting/call/update": {
      "patch": {
        "summary": "Update a call\nAuthorization scope of `fm.call.update` is required",
        "operationId": "MeetingService_UpdateCall",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmUpdateCallResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmUpdateCallRequest"
            }
          }
        ],
        "tags": [
          "MeetingService"
        ]
      }
    },
    "/v1/meeting/communication/count-all": {
      "get": {
        "summary": "List the count of call, issue, note and email.",
        "operationId": "MeetingService_ListAllCount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmListAllCountResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "organization_id",
            "description": "organization id.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "client_ids",
            "description": "client ids to filter the response (optional).",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "MeetingService"
        ]
      }
    },
    "/v1/meeting/email/create": {
      "post": {
        "summary": "Creates an email.\nAuthorization scope of `fm.email.create` is required.",
        "operationId": "MeetingService_CreateEmail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmCreateEmailResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmCreateEmailRequest"
            }
          }
        ],
        "tags": [
          "MeetingService"
        ]
      }
    },
    "/v1/meeting/email/delete": {
      "post": {
        "summary": "Deletes an email.\nAuthorization scope of `fm.email.delete` is required.",
        "operationId": "MeetingService_DeleteEmail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmDeleteEmailRequest"
            }
          }
        ],
        "tags": [
          "MeetingService"
        ]
      }
    },
    "/v1/meeting/email/list": {
      "get": {
        "summary": "Returns the list of emails visible to the authorized user in descending order.\nAuthorization scope of `fm.email.list` is required.",
        "operationId": "MeetingService_ListEmail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmListEmailResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "filter.limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "client_id",
            "description": "client id to filter the response.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "organization_id",
            "description": "organization id.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "MeetingService"
        ]
      }
    },
    "/v1/meeting/email/update": {
      "patch": {
        "summary": "Updates an email.\nAuthorization scope of `fm.email.update` is required.",
        "operationId": "MeetingService_UpdateEmail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmUpdateEmailResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmUpdateEmailRequest"
            }
          }
        ],
        "tags": [
          "MeetingService"
        ]
      }
    },
    "/v1/meeting/marketing-campaign/create": {
      "post": {
        "summary": "Creates a marketing-campaign.\nAuthorization scope of `fm.marketing-campaign.create` is required.",
        "operationId": "MeetingService_CreateMarketingCampaign",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmCreateMarketingCampaignResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmCreateMarketingCampaignRequest"
            }
          }
        ],
        "tags": [
          "MeetingService"
        ]
      }
    },
    "/v1/meeting/marketing-campaign/delete": {
      "post": {
        "summary": "Deletes an existing marketing-campaign.\nAuthorization scope of `fm.marketing-campaign.delete` is required.",
        "operationId": "MeetingService_DeleteMarketingCampaign",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmDeleteMarketingCampaignRequest"
            }
          }
        ],
        "tags": [
          "MeetingService"
        ]
      }
    },
    "/v1/meeting/marketing-campaign/list": {
      "get": {
        "summary": "Returns the list of campaigns visible to the authorized user in descending order.\nAuthorization scope of `fm.marketing-campaign.list` is required.",
        "operationId": "MeetingService_ListMarketingCampaign",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmListMarketingCampaignResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "filter.limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "client_id",
            "description": "client id to filter the response.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "organization_id",
            "description": "organization id.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "MeetingService"
        ]
      }
    },
    "/v1/meeting/marketing-campaign/update": {
      "patch": {
        "summary": "Updates a marketing-campaign.\nAuthorization scope of `fm.marketing-campaign.update` is required.",
        "operationId": "MeetingService_UpdateMarketingCampaign",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmUpdateMarketingCampaignResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmUpdateMarketingCampaignRequest"
            }
          }
        ],
        "tags": [
          "MeetingService"
        ]
      }
    },
    "/v1/meeting/{meeting_id}": {
      "get": {
        "summary": "Detail returns the detail of meeting along with its agendas, views, decisions and objections\nAttendees/Creator of meeting can view the details.",
        "operationId": "MeetingService_Detail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmDetailMeetingResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "meeting_id",
            "description": "meeting Id of the meeting to view",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "MeetingService"
        ]
      }
    },
    "/v1/note": {
      "post": {
        "summary": "Create a new note.\nAuthorization scope of `fm.note.create` is required.",
        "operationId": "NoteService_Create",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmCreateNoteResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmCreateNoteRequest"
            }
          }
        ],
        "tags": [
          "NoteService"
        ]
      },
      "patch": {
        "summary": "Update an existing note.\nAuthorization scope of `fm.note.update` is required.",
        "operationId": "NoteService_Update",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmUpdateNoteResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmUpdateNoteRequest"
            }
          }
        ],
        "tags": [
          "NoteService"
        ]
      }
    },
    "/v1/note/delete": {
      "post": {
        "summary": "Delete an existing note.\nAuthorization scope of `fm.note.delete` is required.",
        "operationId": "NoteService_Delete",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmDeleteNoteRequest"
            }
          }
        ],
        "tags": [
          "NoteService"
        ]
      }
    },
    "/v1/notes": {
      "get": {
        "summary": "Returns list of notes.\nAuthorization scope of `fm.note.list` is required.",
        "operationId": "NoteService_List",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmListNotesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "created_by",
            "description": "id of the note creator.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "for",
            "description": "id for whom notes are created.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "organization_id",
            "description": "unique id of the organization.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "client_id",
            "description": "unique id of the client (optional).",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "employee_id",
            "description": "id of the employee (optional).",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "note_type",
            "description": "type of note to filter response.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "NoteService"
        ]
      }
    },
    "/v1/organization": {
      "post": {
        "summary": "Create a new organization.",
        "operationId": "OrganizationService_Create",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmCreateOrganizationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmCreateOrganizationRequest"
            }
          }
        ],
        "tags": [
          "OrganizationService"
        ]
      }
    },
    "/v1/organization/detail/{organization_id}": {
      "get": {
        "summary": "Returns the details of a particular organization and its associated employees.",
        "operationId": "OrganizationService_Detail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmOrganizationDetailResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "organization_id",
            "description": "id of the organization whose information is to be fetched",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "OrganizationService"
        ]
      }
    },
    "/v1/organization/reset-passwords": {
      "post": {
        "summary": "Reset all user password",
        "operationId": "OrganizationService_ResetAllUserPassword",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmResetAllUserPasswordResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmResetAllUserPasswordRequest"
            }
          }
        ],
        "tags": [
          "OrganizationService"
        ]
      }
    },
    "/v1/organization/roles/list": {
      "get": {
        "summary": "Lists the roles and scopes of a particular organization.",
        "operationId": "OrganizationService_ListOrganizationRoles",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmListOrganizationRolesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "organization_id",
            "description": "unique id of the organization.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "OrganizationService"
        ]
      }
    },
    "/v1/organization/user-employee": {
      "post": {
        "summary": "Checks and Creates user and user-employee for an employee if not exists.",
        "operationId": "OrganizationService_CreateUserEmployee",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmCreateUserEmployeeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmCreateUserEmployeeRequest"
            }
          }
        ],
        "tags": [
          "OrganizationService"
        ]
      }
    },
    "/v1/organization/user-employee/password": {
      "patch": {
        "summary": "Changes password of a user-employee.",
        "operationId": "OrganizationService_ChangeUserEmployeePassword",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmChangeUserEmployeePasswordResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmChangeUserEmployeePasswordRequest"
            }
          }
        ],
        "tags": [
          "OrganizationService"
        ]
      }
    },
    "/v1/organization/user/roles-scopes": {
      "patch": {
        "summary": "Updates roles and scopes of a user-employee.",
        "operationId": "OrganizationService_UpdateUserEmployeeRolesScopes",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmUpdateUserEmployeeRolesScopesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmUpdateUserEmployeeRolesScopesRequest"
            }
          }
        ],
        "tags": [
          "OrganizationService"
        ]
      }
    },
    "/v1/organization/user/roles-scopes/list": {
      "get": {
        "summary": "Lists user-employee roles and scopes.",
        "operationId": "OrganizationService_ListUserEmployeeRolesScopes",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmListUserEmployeeRolesScopesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "organization_id",
            "description": "unique id of organization.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "user_employee_ids",
            "description": "ids of user employee to fetch roles and scopes.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "OrganizationService"
        ]
      }
    },
    "/v1/organizations": {
      "get": {
        "summary": "List returns the list of organization visible to the authroized user in\ndescending order.",
        "operationId": "OrganizationService_List",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmListOrganizationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "filter.limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "OrganizationService"
        ]
      }
    },
    "/v1/refresh": {
      "post": {
        "summary": "refresh an existing token and return new tokens",
        "operationId": "JWTTokenService_Refresh",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmLoginResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmRefreshRequest"
            }
          }
        ],
        "tags": [
          "JWTTokenService"
        ]
      }
    },
    "/v1/task": {
      "post": {
        "summary": "Create a new task.\nAuthorization scope of `fm.task.create` is required.",
        "operationId": "TaskService_Create",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmCreateTaskResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmCreateTaskRequest"
            }
          }
        ],
        "tags": [
          "TaskService"
        ]
      },
      "put": {
        "summary": "Update an existing task.\nAuthorization scope of `fm.task.update` is required.",
        "operationId": "TaskService_Update",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmUpdateTaskResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmUpdateTaskRequest"
            }
          }
        ],
        "tags": [
          "TaskService"
        ]
      }
    },
    "/v1/task/cancel": {
      "post": {
        "summary": "Cancels a task where check-in has not been done yet.\nAuthorization scope of `fm.task.cancel` is required.",
        "operationId": "TaskService_CancelTask",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmCancelTaskResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmCancelTaskRequest"
            }
          }
        ],
        "tags": [
          "TaskService"
        ]
      }
    },
    "/v1/task/checkin": {
      "post": {
        "summary": "Checkin can be used to check in a staff to a task.\nAuthorization scope of `fm.task.checkin` is required.",
        "operationId": "TaskService_Checkin",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmCheckinTaskRequest"
            }
          }
        ],
        "tags": [
          "TaskService"
        ]
      }
    },
    "/v1/task/checkout": {
      "post": {
        "summary": "Checkout can be used to check-out a staff from an existing checked-in task.\nAuthorization scope of `fm.task.checkout` is required.",
        "operationId": "TaskService_Checkout",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmCheckoutTaskRequest"
            }
          }
        ],
        "tags": [
          "TaskService"
        ]
      }
    },
    "/v1/task/correction": {
      "get": {
        "summary": "List returns the list of task corrections visible to the\nauthorized user in descending date order. Authorization scope of\n`fm.task.correction.list` is required.",
        "operationId": "TaskService_ListCorrection",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmListCorrectionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "start_date",
            "description": "the correction report starts from this date.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "end_date",
            "description": "the Correction report upto this date.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "filter.limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "organization_id",
            "description": "fetch periodic timesheet for this organization_id.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "client_id",
            "description": "client id to filter the list.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "employee_id",
            "description": "employee id to filter the list.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "TaskService"
        ]
      },
      "post": {
        "summary": "UpsertTaskCorrection creates or updates the task correction.\nAuthorization scope of `fm.task.correction` is required.",
        "operationId": "TaskService_UpsertTaskCorrection",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmUpsertTaskCorrectionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmUpsertTaskCorrectionRequest"
            }
          }
        ],
        "tags": [
          "TaskService"
        ]
      },
      "patch": {
        "summary": "ApproveTaskCorrection updates the status of task correction.\nAuthorization scope of `fm.task.correction.approve` is required.",
        "operationId": "TaskService_ApproveTaskCorrection",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmApproveTaskCorrectionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmApproveTaskCorrectionRequest"
            }
          }
        ],
        "tags": [
          "TaskService"
        ]
      }
    },
    "/v1/task/correction-all": {
      "post": {
        "summary": "Creates new task-corrections or approves the existing ones.\nAuthorization scope of `fm.task.correction.approve-all` is required.",
        "operationId": "TaskService_UpsertAllTaskCorrection",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmUpsertAllTaskCorrectionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmUpsertAllTaskCorrectionRequest"
            }
          }
        ],
        "tags": [
          "TaskService"
        ]
      }
    },
    "/v1/task/detail/{task_id}": {
      "get": {
        "summary": "List returns the list of all tasks visible to the authorized user in\ndescending date order. Authorization scope of `fm.task.detail` is required.",
        "operationId": "TaskService_Detail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmTaskDetailResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "task_id",
            "description": "unique id of task",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "TaskService"
        ]
      }
    },
    "/v1/task/employee-absence/change-status": {
      "patch": {
        "summary": "Change status of employee absence\nAuthorization scope of `fm.absence.change-status` is required.",
        "operationId": "TaskService_ChangeAbsenceStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmChangeAbsenceStatusResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmChangeAbsenceStatusRequest"
            }
          }
        ],
        "tags": [
          "TaskService"
        ]
      }
    },
    "/v1/task/employee-absence/cover": {
      "post": {
        "summary": "Add Cover for absence\nAuthorization scope of `fm.cover.create` is required.",
        "operationId": "TaskService_CreateCover",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmCreateCoverResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmCreateCoverRequest"
            }
          }
        ],
        "tags": [
          "TaskService"
        ]
      }
    },
    "/v1/task/employee-absence/create": {
      "post": {
        "summary": "Creates absence for an employee.\nAuthorization scope of `fm.absence.create` is required.",
        "operationId": "TaskService_CreateAbsence",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmCreateAbsenceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmCreateAbsenceRequest"
            }
          }
        ],
        "tags": [
          "TaskService"
        ]
      }
    },
    "/v1/task/employee-absence/list": {
      "get": {
        "summary": "ListAbsence returns the list of all employee absence visible to the authorized user in\ndescending date order. Authorization scope of `fm.absence.list` is required.",
        "operationId": "TaskService_ListAbsence",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmListAbsenceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "filter.limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "organization_id",
            "description": "organization to which the employee belongs.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "employee_id",
            "description": "employee id to filter the absence response.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "TaskService"
        ]
      }
    },
    "/v1/task/employee-absence/update": {
      "patch": {
        "summary": "Updates the detail of an employee absence. \nAuthorization scope of `fm.absence.update` is required.",
        "operationId": "TaskService_UpdateAbsence",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmUpdateAbsenceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmUpdateAbsenceRequest"
            }
          }
        ],
        "tags": [
          "TaskService"
        ]
      }
    },
    "/v1/task/recurrence": {
      "put": {
        "summary": "Update task recurrence.\nAuthorization scope of `fm.task.update` is required.",
        "operationId": "TaskService_UpdateRecurrence",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmUpdateRecurrenceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmUpdateRecurrenceRequest"
            }
          }
        ],
        "tags": [
          "TaskService"
        ]
      }
    },
    "/v1/task/update-by-client": {
      "put": {
        "summary": "Update an existing task by client_id\nAuthorization scope of `fm.task.update-by-client` is required.",
        "operationId": "TaskService_UpdateByClient",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmUpdateTaskByClientResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmUpdateTaskByClientRequest"
            }
          }
        ],
        "tags": [
          "TaskService"
        ]
      }
    },
    "/v1/task/update-by-employee": {
      "put": {
        "summary": "Update an existing task by employee_id\nAuthorization scope of `fm.task.update-by-client` is required.",
        "operationId": "TaskService_UpdateByEmployee",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmUpdateTaskByEmployeeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmUpdateTaskByEmployeeRequest"
            }
          }
        ],
        "tags": [
          "TaskService"
        ]
      }
    },
    "/v1/task/update-vary-time": {
      "post": {
        "summary": "Task Edit: Update Vary Time\nAuthorization scope of `fm.task.update` is required.",
        "operationId": "TaskService_UpdateTaskVarytime",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmUpdateTaskVarytimeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmUpdateTaskVarytimeRequest"
            }
          }
        ],
        "tags": [
          "TaskService"
        ]
      }
    },
    "/v1/tasks": {
      "get": {
        "summary": "List returns the list of all tasks visible to the authorized user in\ndescending date order. Authorization scope of `fm.task.list` is required.",
        "operationId": "TaskService_List",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmListTaskResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "filter.limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "organization_id",
            "description": "organization of employee the task is assigned to.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "start_date",
            "description": "For task filter based on task start time (optional).",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "end_date",
            "description": "For task filter based on task start time (optional).",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "employee_id",
            "description": "id of employee (optional).",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "status",
            "description": "status of task : \"COMPLETE\", \"INCOMPLETE\".",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "client_ids",
            "description": "filter by ids of clients.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "task_type",
            "description": "type of task - eg: DOC, VARIATION, MOBILE, OTHERS, PERIODIC(REGULAR), PERIODIC(ONE OFF), PERIODIC(WINDOW), PERIODIC(ACCOMODATION).",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "TaskService"
        ]
      }
    },
    "/v1/tasks/approved/group_by_client": {
      "get": {
        "summary": "Task Group Data By Client\nAuthorization scope of `fm.task.list` is required.",
        "operationId": "TaskService_ListTaskGroupByClientApproved",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmTaskGroupByClientResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "group_type",
            "description": "type of group : WEEKLY, MONTHLY, YEARLY.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "client_id",
            "description": "id of client.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "start_date",
            "description": "start date.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "end_date",
            "description": "end date.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "task_type",
            "description": "type of task - eg: DOC, VARIATION, MOBILE, OTHERS, PERIODIC(REGULAR), PERIODIC(ONE OFF), PERIODIC(WINDOW), PERIODIC(ACCOMODATION).",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "TaskService"
        ]
      }
    },
    "/v1/tasks/approved/group_by_client/all": {
      "get": {
        "summary": "Task Group Data By all the Clients.\nAuthorization scope of `fm.task.list` is required.",
        "operationId": "TaskService_ListTaskGroupByAllClientApproved",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmListTaskGroupByAllClientResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "organization_id",
            "description": "id of the organization.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "group_type",
            "description": "type of group : WEEKLY, MONTHLY, YEARLY.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "start_date",
            "description": "start date to filter response.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "end_date",
            "description": "end date to filter response.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "task_type",
            "description": "type of task - eg: DOC, VARIATION, MOBILE, OTHERS, PERIODIC(REGULAR), PERIODIC(ONE OFF), PERIODIC(WINDOW), PERIODIC(ACCOMODATION).",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "TaskService"
        ]
      }
    },
    "/v1/tasks/approved/group_by_employee": {
      "get": {
        "summary": "Task Group Data By Employee\nAuthorization scope of `fm.task.list` is required.",
        "operationId": "TaskService_ListTaskGroupByEmployeeApproved",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmTaskGroupByEmployeeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "group_type",
            "description": "type of group.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "employee_id",
            "description": "id of employee.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "start_date",
            "description": "start date.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "end_date",
            "description": "end date.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "task_type",
            "description": "type of task - eg: DOC, VARIATION, MOBILE, OTHERS, PERIODIC(REGULAR), PERIODIC(ONE OFF), PERIODIC(WINDOW), PERIODIC(ACCOMODATION).",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "client_ids",
            "description": "multiple  client ids.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "TaskService"
        ]
      }
    },
    "/v1/tasks/approved/groups": {
      "get": {
        "summary": "Task Group Data By Period (One of : Weekly, Monthly, Yearly)\nAuthorization scope of `fm.task.list` is required.",
        "operationId": "TaskService_ListTaskGroupApproved",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmTaskGroupResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "organization_id",
            "description": "unique id of organization.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "group_type",
            "description": "type of group : eg: YEARLY ,MONTHLY, WEEKLY.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "start_date",
            "description": "start date.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "end_date",
            "description": "end date.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "task_type",
            "description": "type of task - eg: DOC, VARIATION, MOBILE, OTHERS, PERIODIC(REGULAR), PERIODIC(ONE OFF), PERIODIC(WINDOW), PERIODIC(ACCOMODATION).",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "employee_ids",
            "description": "multiple employee ids.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "client_ids",
            "description": "multiple  client ids.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "TaskService"
        ]
      }
    },
    "/v1/tasks/approved/groups/all": {
      "get": {
        "summary": "Task Group Data All Periods\nAuthorization scope of `fm.task.list` is required.",
        "operationId": "TaskService_ListAllTaskGroupApproved",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmAllTaskGroupResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "organization_id",
            "description": "unique id of organization.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "description": "filter : Allowed values : EMPLOYEE, CLIENT.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter_id",
            "description": "id of filter : client_id or employee_id (optional).",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "start_date",
            "description": "start date of the week.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "end_date",
            "description": "end date of the week.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "current_date",
            "description": "current date.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "task_type",
            "description": "type of task - eg: DOC, VARIATION, MOBILE, OTHERS, PERIODIC(REGULAR), PERIODIC(ONE OFF), PERIODIC(WINDOW), PERIODIC(ACCOMODATION).",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "TaskService"
        ]
      }
    },
    "/v1/tasks/change-timesheet-correction-status": {
      "patch": {
        "summary": "Change timesheet correction request status",
        "operationId": "TaskService_ChangeTimesheetCorrectionStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmChangeTimesheetCorrectionStatusResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmChangeTimesheetCorrectionStatusRequest"
            }
          }
        ],
        "tags": [
          "TaskService"
        ]
      }
    },
    "/v1/tasks/employee-list": {
      "get": {
        "summary": "Returns the list of employee ids of tasks visible to the authorized user in\ndescending date order. Authorization scope of `fm.task.list` is required.",
        "operationId": "TaskService_ListTaskEmployee",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmListTaskEmployeeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "filter.limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "organization_id",
            "description": "organization of employee the task is assigned to.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "start_date",
            "description": "For task filter based on task start time (optional).",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "end_date",
            "description": "For task filter based on task start time (optional).",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "status",
            "description": "status of task : \"COMPLETE\", \"INCOMPLETE\".",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "TaskService"
        ]
      }
    },
    "/v1/tasks/group_by_client": {
      "get": {
        "summary": "Task Group Data By Client\nAuthorization scope of `fm.task.list` is required.",
        "operationId": "TaskService_ListTaskGroupByClient",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmTaskGroupByClientResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "group_type",
            "description": "type of group : WEEKLY, MONTHLY, YEARLY.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "client_id",
            "description": "id of client.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "start_date",
            "description": "start date.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "end_date",
            "description": "end date.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "task_type",
            "description": "type of task - eg: DOC, VARIATION, MOBILE, OTHERS, PERIODIC(REGULAR), PERIODIC(ONE OFF), PERIODIC(WINDOW), PERIODIC(ACCOMODATION).",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "TaskService"
        ]
      }
    },
    "/v1/tasks/group_by_client/all": {
      "get": {
        "summary": "Task Group Data By all the Clients.\nAuthorization scope of `fm.task.list` is required.",
        "operationId": "TaskService_ListTaskGroupByAllClient",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmListTaskGroupByAllClientResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "organization_id",
            "description": "id of the organization.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "group_type",
            "description": "type of group : WEEKLY, MONTHLY, YEARLY.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "start_date",
            "description": "start date to filter response.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "end_date",
            "description": "end date to filter response.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "task_type",
            "description": "type of task - eg: DOC, VARIATION, MOBILE, OTHERS, PERIODIC(REGULAR), PERIODIC(ONE OFF), PERIODIC(WINDOW), PERIODIC(ACCOMODATION).",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "TaskService"
        ]
      }
    },
    "/v1/tasks/group_by_employee": {
      "get": {
        "summary": "Task Group Data By Employee\nAuthorization scope of `fm.task.list` is required.",
        "operationId": "TaskService_ListTaskGroupByEmployee",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmTaskGroupByEmployeeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "group_type",
            "description": "type of group.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "employee_id",
            "description": "id of employee.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "start_date",
            "description": "start date.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "end_date",
            "description": "end date.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "task_type",
            "description": "type of task - eg: DOC, VARIATION, MOBILE, OTHERS, PERIODIC(REGULAR), PERIODIC(ONE OFF), PERIODIC(WINDOW), PERIODIC(ACCOMODATION).",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "client_ids",
            "description": "multiple  client ids.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "TaskService"
        ]
      }
    },
    "/v1/tasks/groups": {
      "get": {
        "summary": "Task Group Data By Period (One of : Weekly, Monthly, Yearly)\nAuthorization scope of `fm.task.list` is required.",
        "operationId": "TaskService_ListTaskGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmTaskGroupResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "organization_id",
            "description": "unique id of organization.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "group_type",
            "description": "type of group : eg: YEARLY ,MONTHLY, WEEKLY.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "start_date",
            "description": "start date.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "end_date",
            "description": "end date.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "task_type",
            "description": "type of task - eg: DOC, VARIATION, MOBILE, OTHERS, PERIODIC(REGULAR), PERIODIC(ONE OFF), PERIODIC(WINDOW), PERIODIC(ACCOMODATION).",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "employee_ids",
            "description": "multiple employee ids.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "client_ids",
            "description": "multiple  client ids.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "TaskService"
        ]
      }
    },
    "/v1/tasks/groups/all": {
      "get": {
        "summary": "Task Group Data All Periods\nAuthorization scope of `fm.task.list` is required.",
        "operationId": "TaskService_ListAllTaskGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmAllTaskGroupResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "organization_id",
            "description": "unique id of organization.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "description": "filter : Allowed values : EMPLOYEE, CLIENT.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter_id",
            "description": "id of filter : client_id or employee_id (optional).",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "start_date",
            "description": "start date of the week.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "end_date",
            "description": "end date of the week.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "current_date",
            "description": "current date.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "task_type",
            "description": "type of task - eg: DOC, VARIATION, MOBILE, OTHERS, PERIODIC(REGULAR), PERIODIC(ONE OFF), PERIODIC(WINDOW), PERIODIC(ACCOMODATION).",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "TaskService"
        ]
      }
    },
    "/v1/tasks/list-by-client": {
      "get": {
        "summary": "List returns the list of task by client visible to the authorized user in\ndescending date order. Authorization scope of `fm.task.list-by-client` is\nrequired.",
        "operationId": "TaskService_ListByClient",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmListTaskByClientResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "start_date",
            "description": "the client timesheet report starts from this date.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "end_date",
            "description": "the client timesheet report  upto this date.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "filter.limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "client_id",
            "description": "fetch timesheet for this client_id.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "TaskService"
        ]
      }
    },
    "/v1/tasks/list-by-employee": {
      "get": {
        "summary": "List returns the list of task by employee visible to the authorized user in\ndescending date order.\nAuthorization scope of `fm.task.list-by-employee` is required.",
        "operationId": "TaskService_ListByEmployee",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmListTaskByEmployeeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "start_date",
            "description": "the client timesheet report starts from this date.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "end_date",
            "description": "the client timesheet report  upto this date.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "filter.limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "employee_id",
            "description": "fetch timesheet for this employee_id.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "TaskService"
        ]
      }
    },
    "/v1/tasks/list-by-mobile-employees": {
      "get": {
        "summary": "List returns the list of task by mobile employees visible to the authorized\nuser in descending date order.\nAuthorization scope of `fm.task.list-by-mobile-employees` is required.",
        "operationId": "TaskService_ListByMobileEmployees",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmListTaskByMobileEmployeesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "start_date",
            "description": "the client timesheet report starts from this date.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "end_date",
            "description": "the client timesheet report  upto this date.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "filter.limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "organization_id",
            "description": "fetch mobile employee timesheet for this organization_id.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "TaskService"
        ]
      }
    },
    "/v1/tasks/list-by-variation-clients": {
      "get": {
        "summary": "List returns the list of task by variation clients visible to the\nauthorized user in descending date order. Authorization scope of\n`fm.task.list-by-variation-clients` is required.",
        "operationId": "TaskService_ListByVariationClients",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmListTaskByVariationClientsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "start_date",
            "description": "the client timesheet report starts from this date.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "end_date",
            "description": "the client timesheet report  upto this date.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "filter.limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "organization_id",
            "description": "fetch mobile employee timesheet for this organization_id.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "TaskService"
        ]
      }
    },
    "/v1/user": {
      "post": {
        "summary": "Create a new user.\nAuthorization scope of `fm.user.create` is required.",
        "operationId": "UserService_Create",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmCreateUserResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmCreateUserRequest"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v1/user/associate": {
      "post": {
        "summary": "associates login with an employee record.\nAuthorization scope of `fm.user.associate` is required.",
        "operationId": "UserService_AssociateWithEmployee",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmAssociateWithEmployeeRequest"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      },
      "patch": {
        "summary": "update scopes of user\nAuthorization scope of `` is required.",
        "operationId": "UserService_UpdateEmployeeScope",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmUpdateEmployeeScopeRequest"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v1/user/auto-create": {
      "post": {
        "summary": "create user with no password and email is sent with password link \nAuthorization scope of `fm.user.associate` is required.",
        "operationId": "UserService_CreateUserOnEmployeeCreate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmCreateUserOnEmployeeCreateResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmCreateUserOnEmployeeCreateRequest"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v1/user/change-password": {
      "post": {
        "summary": "change password endpoint for logged in user to change their own password",
        "operationId": "UserService_ChangePassword",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmChangePasswordResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmChangePasswordRequest"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v1/user/disable/user-employee": {
      "post": {
        "summary": "Disable active status of a user-employee.\nAuthorization scope of `fm.userEmployee.disable` is required.",
        "operationId": "UserService_DisableUserEmployee",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmDisableUserEmployeeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmDisableUserEmployeeRequest"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v1/user/enable/user-employee": {
      "post": {
        "summary": "Enable active status of a user-employee.\nAuthorization scope of `fm.userEmployee.enable` is required.",
        "operationId": "UserService_EnableUserEmployee",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmEnableUserEmployeeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmEnableUserEmployeeRequest"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v1/user/forgot-password": {
      "post": {
        "summary": "forgot password endpoint",
        "operationId": "UserService_ForgotPassword",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmForgotPasswordResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmForgotPasswordRequest"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v1/user/list_by_employees": {
      "post": {
        "summary": "get user list according to employee id for changing roles/scopes\nAuthorization scope of `` is required",
        "operationId": "UserService_GetUserListByEmployeeIds",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmGetUserListResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmGetUserListRequest"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v1/user/list_by_role": {
      "get": {
        "summary": "get list of users from role name",
        "operationId": "UserService_GetUserListFromRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmGetUserListFromRoleResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "organization_id",
            "description": "id of organization.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "role",
            "description": "name of role.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v1/user/reset-password": {
      "post": {
        "summary": "update password using token from email",
        "operationId": "UserService_ResetPassword",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmResetPasswordResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmResetPasswordRequest"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v1/user/role": {
      "post": {
        "summary": "insert or update role scopes.\nAuthorization scope of `fm.role.create` and \"fm.role.update\" is required.",
        "operationId": "UserService_UpsertRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmUpsertRoleRequest"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v1/user/role/user-employee": {
      "post": {
        "summary": "Assign a role to multiple user-employees.\nAuthorization scope of `fm.role.create` is required.",
        "operationId": "UserService_AddRoleToUsers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmAddRoleToUsersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmAddRoleToUsersRequest"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v1/user/roles": {
      "get": {
        "summary": "get roles\nAuthorization scope of `` is required.",
        "operationId": "UserService_GetAvailableRoles",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmRoleResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "organization_id",
            "description": "id of organization.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v1/user/scopes": {
      "get": {
        "summary": "get all scopes\nAuthorization scope of `` is required",
        "operationId": "UserService_GetAvailableScopes",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fmScopeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "organization_id",
            "description": "id of organization.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "UserService"
        ]
      },
      "post": {
        "summary": "Insert or update a scope group.\nAuthorization scope of `` is required.",
        "operationId": "UserService_UpsertScope",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fmUpsertScopeRequest"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    }
  },
  "definitions": {
    "AddRoleToUsersRequestUserEmployee": {
      "type": "object",
      "properties": {
        "user_id": {
          "type": "string",
          "title": "id of user"
        },
        "employee_id": {
          "type": "string",
          "title": "id of employee"
        }
      }
    },
    "AllTaskGroupResponseSectorTaskGroupData": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "unique id of client/employee"
        },
        "task_data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AllTaskGroupResponseTaskGroupData"
          },
          "title": "task data"
        }
      }
    },
    "AllTaskGroupResponseTaskGroupData": {
      "type": "object",
      "properties": {
        "group_type": {
          "type": "string",
          "title": "group type: DAILY, WEEKLY, MONTHLY, YEARLY"
        },
        "total_tasks": {
          "type": "integer",
          "format": "int32",
          "title": "total tasks done"
        },
        "task_total_time": {
          "type": "number",
          "format": "double",
          "title": "total task working duration in seconds"
        }
      }
    },
    "ClientListAttachmentResponseClientAttachmentPayload": {
      "type": "object",
      "properties": {
        "attachment_id": {
          "type": "string",
          "title": "unique identifier of the newly created attachment record"
        },
        "attachment_path": {
          "type": "string",
          "title": "attachment path"
        },
        "attachment_type": {
          "type": "string",
          "title": "attachment type"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "title": "created at timestamp"
        },
        "uploaded_by": {
          "type": "string",
          "title": "uploaded by"
        }
      }
    },
    "ContactDetailAddress": {
      "type": "object",
      "properties": {
        "address1": {
          "type": "string",
          "title": "address_line 1"
        },
        "address2": {
          "type": "string",
          "title": "address line 2"
        },
        "city": {
          "type": "string",
          "title": "city"
        },
        "post_code": {
          "type": "string",
          "title": "post_code"
        },
        "county": {
          "type": "string",
          "title": "county"
        },
        "town": {
          "type": "string",
          "title": "town"
        }
      },
      "title": "Address details"
    },
    "CreateCRMMobilizationsRequestReqTemplates": {
      "type": "object",
      "properties": {
        "client_id": {
          "type": "string",
          "title": "id of the client"
        },
        "template_id": {
          "type": "string",
          "title": "id of the mobilization template"
        },
        "tasks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fmReqTasks"
          },
          "title": "tasks of the mobilization"
        }
      }
    },
    "CreateOrganizationRequestOrganizationDetails": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "name of the organization"
        },
        "contact_details": {
          "$ref": "#/definitions/fmContactDetail",
          "title": "contact details of the organization"
        }
      }
    },
    "CreateOrganizationRequestUserDetails": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "title": "username of the user"
        },
        "password": {
          "type": "string",
          "title": "password of the user"
        },
        "name": {
          "type": "string",
          "title": "name of the user"
        }
      }
    },
    "EmployeeConfidentialDetailResponseConfidentialDetails": {
      "type": "object",
      "properties": {
        "employee_details": {
          "$ref": "#/definitions/fmConfidentialEmployeeDetails",
          "title": "confidential details of the employee"
        },
        "bank_account_details": {
          "$ref": "#/definitions/fmEmployeeBankAccountDetails",
          "title": "confidential bank details of the employee"
        }
      }
    },
    "EmployeeListAttachmentResponseEmployeeAttachmentPayload": {
      "type": "object",
      "properties": {
        "attachment_id": {
          "type": "string",
          "title": "unique identifier of the newly created attachment record"
        },
        "attachment_path": {
          "type": "string",
          "title": "attachment path"
        },
        "attachment_type": {
          "type": "string",
          "title": "attachment type"
        },
        "attachment_name": {
          "type": "string",
          "title": "name of attachment"
        },
        "uploaded_by": {
          "type": "string",
          "title": "uploaded by"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "title": "created at timestamp"
        }
      }
    },
    "GetEmployeeIdsByClientIdResponseEmployeeListData": {
      "type": "object",
      "properties": {
        "client_employee_id": {
          "type": "string",
          "title": "client-employee id : unique id of client employee relation"
        },
        "employee_id": {
          "type": "string",
          "title": "id of employee"
        }
      }
    },
    "GetEmployeeTrainingResponseEmployeeTrainingResponse": {
      "type": "object",
      "properties": {
        "employee_training_id": {
          "type": "string",
          "title": "Unique id of the training for employee"
        },
        "trainee_id": {
          "type": "string",
          "title": "Unique id of trainee employee"
        },
        "trainer_id": {
          "type": "string",
          "title": "Unique id of trainer employee"
        },
        "training_subject": {
          "type": "string",
          "title": "Subject of the training"
        },
        "training_date": {
          "type": "string",
          "format": "date-time",
          "title": "Date of the training"
        },
        "attachment_file": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Attachment files regarding training"
        },
        "organization_id": {
          "type": "string",
          "title": "organization id of the employee"
        },
        "status": {
          "type": "string",
          "title": "status of the training"
        },
        "completion_date": {
          "type": "string",
          "format": "date-time",
          "title": "training completion date"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "title": "Date of training creation"
        }
      }
    },
    "GetGlobalDescriptionResponseGlobalDescriptionDetails": {
      "type": "object",
      "properties": {
        "check_type": {
          "type": "string",
          "title": "check type i.e. opening or closing check"
        },
        "description": {
          "type": "string",
          "title": "description of the check"
        }
      }
    },
    "ListAbsenceResponseAbsenceList": {
      "type": "object",
      "properties": {
        "employee_absence_id": {
          "type": "string",
          "title": "id of the employee absence"
        },
        "employee_id": {
          "type": "string",
          "title": "Employee id of the associated employee"
        },
        "client_id": {
          "type": "string",
          "title": "Client id"
        },
        "organization_id": {
          "type": "string",
          "title": "Organization id of the employee"
        },
        "type": {
          "type": "string",
          "title": "type of leave i.e. HOLIDAY, SICK OR ABSENT"
        },
        "payment_type": {
          "type": "string",
          "title": "type of payment i.e. PAID OR UNPAID"
        },
        "description": {
          "type": "string",
          "title": "description regarding the leave"
        },
        "approved_by": {
          "type": "string",
          "title": "id of emoloyee who approved"
        },
        "rejected_by": {
          "type": "string",
          "title": "id of employee who rejected"
        },
        "status": {
          "type": "string",
          "title": "status i.e. PENDING, APPROVED OR REJECTED"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "title": "timestamp at which the employee absence was created"
        },
        "dates": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "date-time"
          },
          "title": "dates for which leave is taken"
        },
        "covers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fmListCoverData"
          },
          "title": "All covers of absence"
        }
      },
      "title": "individual employee absence response"
    },
    "ListAllCountResponseCountResponse": {
      "type": "object",
      "properties": {
        "client_id": {
          "type": "string",
          "title": "unique id of the client"
        },
        "call": {
          "type": "integer",
          "format": "int32",
          "title": "count of Call"
        },
        "issue": {
          "type": "integer",
          "format": "int32",
          "title": "count of Issue"
        },
        "note": {
          "type": "integer",
          "format": "int32",
          "title": "count of Note"
        },
        "meeting": {
          "type": "integer",
          "format": "int32",
          "title": "count of Meetings"
        },
        "email": {
          "type": "integer",
          "format": "int32",
          "title": "count of Emails"
        }
      },
      "title": "individual count response"
    },
    "ListAppointmentResponseAppointmentResponse": {
      "type": "object",
      "properties": {
        "appointment_id": {
          "type": "string",
          "title": "unique appointment id"
        },
        "client_id": {
          "type": "string",
          "title": "client id"
        },
        "organization_id": {
          "type": "string",
          "title": "organization id to which the appointment belongs"
        },
        "appointment_date": {
          "type": "string",
          "format": "date-time",
          "title": "date for the appointment"
        },
        "estimated_time": {
          "type": "string",
          "title": "estimated time of the appointment"
        },
        "location": {
          "type": "string",
          "title": "location of the appointment"
        },
        "attendee_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "id of employees who come for the appointment"
        },
        "subject": {
          "type": "string",
          "title": "subject of appointment"
        },
        "note": {
          "type": "string",
          "title": "note detail"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "title": "time the appointment was created at"
        }
      },
      "title": "individual list response of appointment"
    },
    "ListAreaResponseAreaResponse": {
      "type": "object",
      "properties": {
        "area_id": {
          "type": "string",
          "title": "id of area"
        },
        "region_id": {
          "type": "string",
          "title": "region that area belongs to"
        },
        "title": {
          "type": "string",
          "title": "title of area"
        },
        "organization_id": {
          "type": "string",
          "title": "organization id"
        },
        "area_manager": {
          "type": "string",
          "title": "single area manager"
        },
        "areamanager_restricted_clients": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "id of clients disabled for area_manager"
        },
        "sub_areas": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fmSubAreaDetails"
          },
          "title": "list of sub areas of the particular area"
        },
        "area_supervisors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fmAreaSupervisor"
          },
          "title": "list of area supervisors in that area"
        }
      }
    },
    "ListBidPlannerResponseBidPlannerResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "bid planner id"
        },
        "organization_id": {
          "type": "string",
          "title": "organization id to which the client belongs"
        },
        "name": {
          "type": "string",
          "title": "name of the client"
        },
        "client_code": {
          "type": "string",
          "title": "client's code"
        },
        "client_id": {
          "type": "string",
          "title": "client's id"
        },
        "source": {
          "type": "string",
          "title": "source of the bid planner"
        },
        "value": {
          "type": "string",
          "title": "value of the bid planner"
        },
        "deadline": {
          "type": "string",
          "format": "date-time",
          "title": "deadline of the bid planner"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "title": "time at which the bid planner was created"
        },
        "stages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ListBidPlannerResponseStagesList"
          },
          "title": "list of stages of the particular bid planner"
        }
      },
      "title": "individual bid planner response"
    },
    "ListBidPlannerResponseStagesList": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "stage id"
        },
        "bid_planner_id": {
          "type": "string",
          "title": "bid planner to which the stage belongs"
        },
        "title": {
          "type": "string",
          "title": "title of the stage"
        },
        "employee_id": {
          "type": "string",
          "title": "employee id"
        },
        "description": {
          "type": "string",
          "title": "description of the stage"
        },
        "status": {
          "type": "string",
          "title": "status of the stage"
        },
        "deadline": {
          "type": "string",
          "format": "date-time",
          "title": "deadline of the stage"
        }
      },
      "title": "individual stage response of the particular bid planner"
    },
    "ListBidPlannerStatusResponseBidPlannerStatusResponse": {
      "type": "object",
      "properties": {
        "bid_planner_status_id": {
          "type": "string",
          "title": "id of the bid planner status"
        },
        "title": {
          "type": "string",
          "title": "title of the bid planner status"
        },
        "description": {
          "type": "string",
          "title": "description"
        },
        "organization_id": {
          "type": "string",
          "title": "organization id to which it belongs"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "title": "time the bid planner status was created at"
        }
      }
    },
    "ListCRMMobilizationResponseCRMMobilizationList": {
      "type": "object",
      "properties": {
        "crm_mobilization_id": {
          "type": "string",
          "title": "unique id of the crm mobilization"
        },
        "client_id": {
          "type": "string",
          "title": "id of the client"
        },
        "template_id": {
          "type": "string",
          "title": "id of the mobilization template"
        },
        "organization_id": {
          "type": "string",
          "title": "id of the organization"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "title": "created date of the mobilization"
        },
        "tasks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ListCRMMobilizationResponseCRMTasksList"
          },
          "title": "tasks of the mobilization"
        }
      }
    },
    "ListCRMMobilizationResponseCRMTaskDatesList": {
      "type": "object",
      "properties": {
        "crm_task_date_id": {
          "type": "string",
          "title": "unique id of the crm-task-date"
        },
        "crm_task_id": {
          "type": "string",
          "title": "id of the associated crm-task"
        },
        "task_date": {
          "type": "string",
          "format": "date-time",
          "title": "date of the task"
        },
        "status": {
          "type": "string",
          "title": "status of the task date"
        }
      }
    },
    "ListCRMMobilizationResponseCRMTasksList": {
      "type": "object",
      "properties": {
        "crm_task_id": {
          "type": "string",
          "title": "unique id of the crm_task"
        },
        "crm_mobilization_id": {
          "type": "string",
          "title": "id of the associated crm mobilization"
        },
        "title": {
          "type": "string",
          "title": "title name"
        },
        "task_owner": {
          "type": "string",
          "title": "task_owner : employee_id"
        },
        "deadline": {
          "type": "string",
          "format": "date-time",
          "title": "deadline of the task"
        },
        "task_detail": {
          "type": "string",
          "title": "task detail"
        },
        "status": {
          "type": "string",
          "title": "status of the task"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "title": "created date of the crm task"
        },
        "task_dates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ListCRMMobilizationResponseCRMTaskDatesList"
          },
          "title": "dates of the crm task"
        }
      }
    },
    "ListCallResponseCallResponse": {
      "type": "object",
      "properties": {
        "call_id": {
          "type": "string",
          "title": "id of the call"
        },
        "client_id": {
          "type": "string",
          "title": "client id"
        },
        "organization_id": {
          "type": "string",
          "title": "organization id"
        },
        "call_date": {
          "type": "string",
          "format": "date-time",
          "title": "date of the call"
        },
        "call_duration": {
          "type": "string",
          "title": "duration of the call"
        },
        "subject": {
          "type": "string",
          "title": "subject of the call"
        },
        "caller": {
          "type": "string",
          "title": "caller"
        },
        "receiver": {
          "type": "string",
          "title": "receiver"
        },
        "message": {
          "type": "string",
          "title": "message details"
        },
        "caller_receiver": {
          "type": "string",
          "title": "whether the individual is a caller or a receiver"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "title": "time the call was created at"
        }
      },
      "title": "individual call response"
    },
    "ListCategoriesAndQuestionsResponseAllCategoryResponse": {
      "type": "object",
      "properties": {
        "category_id": {
          "type": "string",
          "title": "id of the category"
        },
        "client_id": {
          "type": "string",
          "title": "id of the client"
        },
        "organization_id": {
          "type": "string",
          "title": "id of the organization to which the category belongs"
        },
        "category_name": {
          "type": "string",
          "title": "name of the category"
        },
        "employee_id": {
          "type": "string",
          "title": "id of the employee"
        },
        "percentage": {
          "type": "number",
          "format": "float",
          "title": "percentage"
        },
        "deadline": {
          "type": "string",
          "format": "date-time",
          "title": "deadline of the category"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "title": "time the category was created at"
        },
        "questions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fmAllCategoryQuestionsResponse"
          },
          "title": "lists of questions of the category"
        }
      },
      "title": "individual response of category"
    },
    "ListCategoryQuestionsResponseCategoryQuestions": {
      "type": "object",
      "properties": {
        "question_id": {
          "type": "string",
          "title": "unique id of the question"
        },
        "category_id": {
          "type": "string",
          "title": "id of the category to which the question belongs"
        },
        "organization_id": {
          "type": "string",
          "title": "id of the organization"
        },
        "client_id": {
          "type": "string",
          "title": "id of the client"
        },
        "question": {
          "type": "string",
          "title": "the actual question"
        },
        "answer_type": {
          "type": "string",
          "title": "type of answer allowed"
        },
        "answer": {
          "type": "string",
          "title": "the answer of the particular question"
        },
        "answer_word_count": {
          "type": "integer",
          "format": "int32",
          "title": "number of words allowed for the answer"
        },
        "approved_by": {
          "type": "string",
          "title": "approved_by : employee_id"
        },
        "approved_date": {
          "type": "string",
          "format": "date-time",
          "title": "date of approval"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "title": "time the question was created at"
        },
        "deadline": {
          "type": "string",
          "format": "date-time",
          "title": "deadline of the question"
        }
      },
      "title": "individual response"
    },
    "ListCategoryResponseCategoryResponse": {
      "type": "object",
      "properties": {
        "category_id": {
          "type": "string",
          "title": "id of the category"
        },
        "client_id": {
          "type": "string",
          "title": "id of the client"
        },
        "organization_id": {
          "type": "string",
          "title": "id of the organization to which the category belongs"
        },
        "category_name": {
          "type": "string",
          "title": "name of the category"
        },
        "employee_id": {
          "type": "string",
          "title": "id of the employee"
        },
        "percentage": {
          "type": "number",
          "format": "float",
          "title": "percentage"
        },
        "deadline": {
          "type": "string",
          "format": "date-time",
          "title": "deadline of the category"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "title": "time the category was created at"
        }
      },
      "title": "individual response of category"
    },
    "ListCheckResponseCheckResponse": {
      "type": "object",
      "properties": {
        "check_id": {
          "type": "string",
          "title": "unique identifier for the check"
        },
        "title": {
          "type": "string",
          "title": "title of the check"
        },
        "instruction": {
          "type": "string",
          "title": "detail instruction of the check"
        },
        "employee_id": {
          "type": "string",
          "title": "employee the check is assigned to"
        },
        "start_time": {
          "type": "string",
          "format": "date-time",
          "title": "check must start by at least this time. Start time is combination of\nappointment date and time"
        },
        "check_time": {
          "type": "string",
          "format": "date-time",
          "title": "checked in time for check_type=opening or checked out time for\ncheck_type=closing"
        },
        "check_type": {
          "type": "string",
          "title": "check_type = opening for opening check and check_type = closing for\nclosing check"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "title": "time generated by system at the instance the opening_check was created"
        },
        "organization_id": {
          "type": "string",
          "title": "organization id of the check"
        }
      },
      "title": "Check definition"
    },
    "ListClientEmployeeResponseClientEmployeeResponse": {
      "type": "object",
      "properties": {
        "client_employee_id": {
          "type": "string"
        },
        "client_id": {
          "type": "string",
          "title": "client the employee is assigned to"
        },
        "department_id": {
          "type": "string",
          "title": "department of employee in the client"
        },
        "designation": {
          "type": "string",
          "title": "designation of employee in the client"
        },
        "employee_id": {
          "type": "string",
          "title": "employee the client is assigned to"
        },
        "organization_id": {
          "type": "string",
          "title": "organization id of the client-employee link"
        },
        "shift_contracted_day_hours": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fmShiftContractedDayHours"
          },
          "title": "contracted hours for the day of the week"
        },
        "start_date": {
          "type": "string",
          "format": "date-time",
          "title": "contract start date"
        },
        "end_date": {
          "type": "string",
          "format": "date-time",
          "title": "contract end date"
        },
        "is_head_office": {
          "type": "boolean",
          "title": "is employee from head office"
        },
        "allow_all_clients": {
          "type": "boolean",
          "title": "allow access to all client"
        },
        "allowed_client_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "list of allowed clients"
        }
      }
    },
    "ListClientMobilizationResponseClientMobilizationResponse": {
      "type": "object",
      "properties": {
        "client_id": {
          "type": "string",
          "title": "client id for the mobilization"
        },
        "category": {
          "type": "string",
          "title": "category of mobilization"
        },
        "subject": {
          "type": "string",
          "title": "subject of mobilization"
        },
        "message": {
          "type": "string",
          "title": "message for the mobilization"
        },
        "by": {
          "$ref": "#/definitions/fmMobilizationPrincipal",
          "title": "mobilization by"
        },
        "to": {
          "$ref": "#/definitions/fmMobilizationPrincipal",
          "title": "mobilization to"
        },
        "date_of_mobilization": {
          "type": "string",
          "format": "date-time",
          "title": "mobilization date"
        },
        "client_mobilization_id": {
          "type": "string",
          "title": "unique id of the client mobilization"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "title": "date of mobilization creation"
        }
      }
    },
    "ListClientResponseClientResponse": {
      "type": "object",
      "properties": {
        "client_id": {
          "type": "string",
          "title": "unique identifier of the client"
        },
        "organization_id": {
          "type": "string",
          "title": "organization id the client belongs to"
        },
        "client_code": {
          "type": "string",
          "title": "client code"
        },
        "name": {
          "type": "string",
          "title": "unique name of the client"
        },
        "contact_detail": {
          "$ref": "#/definitions/fmContactDetail",
          "title": "contact details of the client"
        },
        "client_detail": {
          "$ref": "#/definitions/fmClientDetail",
          "title": "information details of the client"
        },
        "contact_people": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fmContactPerson"
          },
          "title": "Contact Person details of the client. Backend saves to\nClientContactPersonService"
        },
        "bank_account_details": {
          "$ref": "#/definitions/fmBankAccountDetails",
          "title": "Bank account details of the client"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "title": "time the client was created at"
        },
        "confidential_contact_people": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fmContactPerson"
          },
          "title": "Confidential Contact Person detail of the client"
        },
        "is_head_office": {
          "type": "boolean",
          "title": "Boolean: shows wether client is head office or not"
        },
        "profile_image": {
          "type": "string",
          "title": "profile image of client"
        },
        "total_branches": {
          "type": "integer",
          "format": "int32",
          "title": "If current client is main office, count of branches"
        },
        "branch_head_office_id": {
          "type": "string",
          "title": "If current client is branch, it shows the head office branch"
        },
        "lead_detail": {
          "$ref": "#/definitions/fmLeadClientDetail",
          "title": "Details for lead client"
        }
      },
      "title": "individual client response"
    },
    "ListCorrectionResponseCorrectionResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "task correction id"
        },
        "task_id": {
          "type": "string",
          "title": "task id"
        },
        "correction": {
          "type": "string",
          "title": "correction time of the task report"
        },
        "status": {
          "type": "string",
          "title": "status of the correction"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "title": "timestamp at which the correction was created"
        },
        "corrected_by": {
          "type": "string",
          "title": "name of the person who correctes timesheet"
        },
        "approved_by": {
          "type": "string",
          "title": "name of the person who approves this correction"
        },
        "is_negative": {
          "type": "boolean",
          "title": "whether the correction time is negative or not"
        }
      }
    },
    "ListDepartmentResponseDepartmentResponse": {
      "type": "object",
      "properties": {
        "department_id": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "organization_id": {
          "type": "string"
        }
      }
    },
    "ListDesignationResponseDesignationResponse": {
      "type": "object",
      "properties": {
        "designation_id": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "department_id": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "organization_id": {
          "type": "string"
        }
      }
    },
    "ListEmailResponseEmailResponse": {
      "type": "object",
      "properties": {
        "email_id": {
          "type": "string",
          "title": "unique id of the email"
        },
        "client_id": {
          "type": "string",
          "title": "client id"
        },
        "organization_id": {
          "type": "string",
          "title": "organization id"
        },
        "email_date": {
          "type": "string",
          "format": "date-time",
          "title": "date on which the email was sent"
        },
        "subject": {
          "type": "string",
          "title": "subject of the email"
        },
        "sender": {
          "type": "string",
          "title": "email sender's id"
        },
        "receiver": {
          "type": "string",
          "title": "email receiver's id"
        },
        "message": {
          "type": "string",
          "title": "message details"
        },
        "sender_receiver": {
          "type": "string",
          "title": "to identify whether the individual is a 'SENDER' or a 'RECEIVER'"
        },
        "sender_email": {
          "type": "string",
          "title": "sender's email"
        },
        "receiver_email": {
          "type": "string",
          "title": "receiver's email"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "title": "time the email was created at"
        },
        "cc": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fmEmailCC"
          },
          "title": "cc of the email"
        }
      },
      "title": "individual email response"
    },
    "ListEmployeeResponseEmployeeResponse": {
      "type": "object",
      "properties": {
        "employee_id": {
          "type": "string",
          "title": "unique id of the employee"
        },
        "title": {
          "type": "string",
          "title": "title of employee : eg: Mr, Mrs, Miss"
        },
        "first_name": {
          "type": "string",
          "title": "first name of the employee"
        },
        "middle_name": {
          "type": "string",
          "title": "middle_name of the employee"
        },
        "last_name": {
          "type": "string",
          "title": "last name of the employee"
        },
        "contact_detail": {
          "$ref": "#/definitions/fmContactDetail",
          "title": "contact details of the employee"
        },
        "organization_id": {
          "type": "string",
          "title": "organization the employee belongs to"
        },
        "created_date": {
          "type": "string",
          "format": "date-time",
          "title": "time the employee was created"
        },
        "employee_info": {
          "$ref": "#/definitions/fmEmployeeInformationForListing",
          "title": "Employee information"
        },
        "confidential_employee_info": {
          "$ref": "#/definitions/fmConfidentialEmployeeInfo",
          "title": "Confidential employee information"
        },
        "status": {
          "type": "string",
          "title": "Employee status"
        },
        "training_info": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fmTrainingEmployeeInfo"
          },
          "title": "trainig Information filled by the organization"
        },
        "history_info": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fmEmploymentHistoryInfo"
          },
          "title": "employment history Information filled by the organization"
        },
        "reference_employee_info": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fmReferenceEmployeeInfo"
          },
          "title": "Reference Information about the employee"
        },
        "criminal_conv_emp_info": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fmCriminalConvictionEmployeeInfo"
          },
          "title": "Criminal Conviction Information about the employee"
        },
        "next_of_keen_employee_info": {
          "$ref": "#/definitions/fmNextOfKeenEmployeeInfo",
          "title": "Next of kee Information about the employee"
        },
        "education_employee_info": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fmEducationEmployeeInformation"
          },
          "title": "education Information about the employee"
        },
        "job_description": {
          "type": "string",
          "title": "job description"
        },
        "reference": {
          "type": "string",
          "title": "reference"
        }
      },
      "title": "individual employee record"
    },
    "ListGlobalCheckResponseGlobalCheckResponse": {
      "type": "object",
      "properties": {
        "global_check_id": {
          "type": "string",
          "title": "id of global check"
        },
        "check_type": {
          "type": "string",
          "title": "type  of check"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fmGlobalCheckDetail"
          },
          "title": "details of the global check"
        }
      },
      "title": "Global Check Definition"
    },
    "ListInventoryCategoryResponseInventoryCategory": {
      "type": "object",
      "properties": {
        "organization_id": {
          "type": "string",
          "title": "Organization id"
        },
        "category_name": {
          "type": "string",
          "title": "Inventory category name"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "title": "Created At"
        },
        "category_detail": {
          "type": "string",
          "title": "Category detail"
        },
        "parent_category_id": {
          "type": "string",
          "title": "Parent category"
        },
        "status": {
          "type": "string",
          "title": "Status"
        }
      },
      "title": "Single Inventory category"
    },
    "ListInventoryItemResponseInventoryItem": {
      "type": "object",
      "properties": {
        "organization_id": {
          "type": "string",
          "title": "Organization id for the item"
        },
        "item_name": {
          "type": "string",
          "title": "Item name"
        },
        "category_id": {
          "type": "string",
          "title": "Item Category"
        },
        "category_name": {
          "type": "string",
          "title": "Category name"
        },
        "supplier_id": {
          "type": "string",
          "title": "Supplier id"
        },
        "unit_price": {
          "type": "number",
          "format": "float",
          "title": "Unit price"
        },
        "item_code": {
          "type": "string",
          "title": "Item code"
        },
        "comment": {
          "type": "string",
          "title": "Comment on the item"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "title": "Created at"
        }
      },
      "title": "Single inventory item"
    },
    "ListJobTypeResponseJobTypeResponse": {
      "type": "object",
      "properties": {
        "job_type_id": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "organization_id": {
          "type": "string"
        }
      }
    },
    "ListMarketingCampaignResponseMarketingCampaignResponse": {
      "type": "object",
      "properties": {
        "marketing_campaign_id": {
          "type": "string",
          "title": "unique id of the marketing-campaign"
        },
        "title": {
          "type": "string",
          "title": "title of the campaign"
        },
        "organization_id": {
          "type": "string",
          "title": "organization id"
        },
        "email_date": {
          "type": "string",
          "format": "date-time",
          "title": "date on which the email was sent"
        },
        "subject": {
          "type": "string",
          "title": "subject of the email"
        },
        "sender": {
          "type": "string",
          "title": "email sender's id"
        },
        "receiver": {
          "type": "string",
          "title": "email receiver's id"
        },
        "message": {
          "type": "string",
          "title": "message details"
        },
        "sender_receiver": {
          "type": "string",
          "title": "to identify whether the individual is a 'SENDER' or a 'RECEIVER'"
        },
        "sender_email": {
          "type": "string",
          "title": "sender's email"
        },
        "receiver_email": {
          "type": "string",
          "title": "receiver's email"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "title": "time the campaign was created at"
        },
        "cc": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fmEmailCC"
          },
          "title": "cc of the email"
        }
      },
      "title": "individual campaign response"
    },
    "ListMeetingResponseMeetingResponse": {
      "type": "object",
      "properties": {
        "meeting_id": {
          "type": "string",
          "title": "unique identifier of the meeting"
        },
        "meeting_date": {
          "type": "string",
          "format": "date-time",
          "title": "date of the meeting"
        },
        "estimated_time": {
          "type": "string",
          "title": "duration time of the meeting"
        },
        "title": {
          "type": "string",
          "title": "title of the meeting"
        },
        "employees_info": {
          "$ref": "#/definitions/fmEmployees",
          "title": "ids of employees"
        },
        "attendee_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "attendees of  meeting"
        },
        "department_id": {
          "type": "string",
          "title": "department id of the meeting"
        },
        "organization_id": {
          "type": "string",
          "title": "organization id of the meeting"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "title": "timestamp at which the meeting was created"
        },
        "location": {
          "type": "string",
          "title": "location of meeting"
        },
        "client_id": {
          "type": "string",
          "title": "required if meeting is for client else it is optional"
        },
        "status": {
          "type": "string",
          "title": "status of the meeting"
        },
        "meeting_type": {
          "type": "string",
          "title": "type of meeting i.e.\"OPEN\" or \"CLOSE\""
        }
      },
      "title": "individual meeting response"
    },
    "ListMobilizationTemplateResponseMobilizationTemplateResponse": {
      "type": "object",
      "properties": {
        "mobilization_template_id": {
          "type": "string",
          "title": "unique id of the mobilization template"
        },
        "parent_mobilization_id": {
          "type": "string",
          "title": "id of the associated parent mobilization"
        },
        "organization_id": {
          "type": "string",
          "title": "organization id"
        },
        "name": {
          "type": "string",
          "title": "name of the mobilization template"
        },
        "tasks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fmMobilizationTasks"
          },
          "title": "tasks of the template"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "title": "created date of the template"
        }
      },
      "title": "individual response"
    },
    "ListNewMobilizationResponseNewMobilizationList": {
      "type": "object",
      "properties": {
        "new_mobilization_id": {
          "type": "string",
          "title": "unique id of the new mobilization"
        },
        "client_id": {
          "type": "string",
          "title": "unique client id"
        },
        "organization_id": {
          "type": "string",
          "title": "id of the organization"
        },
        "owner": {
          "type": "string",
          "title": "owner : employee_id"
        },
        "status": {
          "type": "string",
          "title": "status of the mobilization"
        },
        "start_date": {
          "type": "string",
          "format": "date-time",
          "title": "start date of the mobilization"
        },
        "end_date": {
          "type": "string",
          "format": "date-time",
          "title": "end date of the mobilization"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "title": "created date of the mobilization"
        }
      }
    },
    "ListNewStageResponseNewStagesResponse": {
      "type": "object",
      "properties": {
        "stage_id": {
          "type": "string",
          "title": "id of the new stage"
        },
        "title": {
          "type": "string",
          "title": "title of the stage"
        },
        "description": {
          "type": "string",
          "title": "description of the stage"
        },
        "organization_id": {
          "type": "string",
          "title": "organization id to which the stage belongs"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "title": "time the new stage was created at"
        }
      }
    },
    "ListOrganizationResponseOrganizationResponse": {
      "type": "object",
      "properties": {
        "organization_id": {
          "type": "string",
          "title": "unique id of organization"
        },
        "name": {
          "type": "string",
          "title": "name of organization"
        },
        "contact_detail": {
          "$ref": "#/definitions/fmContactDetail",
          "title": "contact details of the organization"
        },
        "created_date": {
          "type": "string",
          "format": "date-time",
          "title": "time the organization is created at"
        }
      },
      "title": "inividual organization response"
    },
    "ListOrganizationRolesResponseOrganizationRoles": {
      "type": "object",
      "properties": {
        "role_id": {
          "type": "string",
          "title": "unique id of the role"
        },
        "role_name": {
          "type": "string",
          "title": "unique name of the role"
        },
        "scopes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "scopes for this role"
        }
      }
    },
    "ListParentMobilizationResponseParentMobilizationResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "id of the parent mobilization"
        },
        "organization_id": {
          "type": "string",
          "title": "id of the organization"
        },
        "name": {
          "type": "string",
          "title": "name of the parent mobilization"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "title": "created date of the mobilization"
        },
        "templates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fmMobilizationTemplates"
          },
          "title": "associated mobilization templates"
        }
      },
      "title": "individual response"
    },
    "ListPlannerResponsePlannerList": {
      "type": "object",
      "properties": {
        "planner_id": {
          "type": "string",
          "title": "unique id of the planner"
        },
        "client_id": {
          "type": "string",
          "title": "id of the client"
        },
        "organization_id": {
          "type": "string",
          "title": "id of the organization"
        },
        "task_title": {
          "type": "string",
          "title": "title of the task"
        },
        "description": {
          "type": "string",
          "title": "description of the task"
        },
        "task_type": {
          "type": "string",
          "title": "type of task"
        },
        "task_date": {
          "type": "string",
          "format": "date-time",
          "title": "date of the task"
        },
        "created_date": {
          "type": "string",
          "format": "date-time",
          "title": "created date of the planner"
        }
      },
      "title": "individual planner response"
    },
    "ListRegionResponseRegionResponse": {
      "type": "object",
      "properties": {
        "region_id": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "organization_id": {
          "type": "string"
        },
        "regional_manager": {
          "type": "string"
        }
      }
    },
    "ListSectorResponseSectorResponse": {
      "type": "object",
      "properties": {
        "sector_id": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "organization_id": {
          "type": "string"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "ListTaskByClientResponseTaskByClientResponse": {
      "type": "object",
      "properties": {
        "employee_id": {
          "type": "string",
          "title": "unique identifier of the employee involved with the client"
        },
        "task_id": {
          "type": "string",
          "title": "unique identifier of the task completed by employee on the client in\nparticular date"
        },
        "start_time": {
          "type": "string",
          "format": "date-time",
          "title": "task must start by at least this time. Start time is combination of\nappointment date and time"
        },
        "estimate_time": {
          "type": "string",
          "title": "the estimated time period to complete the task"
        },
        "check_in_time": {
          "type": "string",
          "format": "date-time",
          "title": "check in time of the task on the particular date"
        },
        "check_out_time": {
          "type": "string",
          "format": "date-time",
          "title": "check out time of the task on the particular date"
        },
        "title": {
          "type": "string",
          "title": "task title"
        },
        "description": {
          "type": "string",
          "title": "task description"
        }
      }
    },
    "ListTaskEmployeeResponseTaskEmployeeResponse": {
      "type": "object",
      "properties": {
        "employee_id": {
          "type": "string",
          "title": "id of the employee to whom the task is assigned"
        }
      },
      "title": "individual response"
    },
    "ListTenderStatusResponseTenderStatusResponse": {
      "type": "object",
      "properties": {
        "tender_status_id": {
          "type": "string",
          "title": "id of the tender status"
        },
        "client_id": {
          "type": "string",
          "title": "unique id of the client"
        },
        "organization_id": {
          "type": "string",
          "title": "organization id"
        },
        "status": {
          "type": "string",
          "title": "status of the tender"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "title": "created date of the tender status"
        }
      },
      "title": "individual response"
    },
    "ListTrainingTypeResponseTrainingTypeResponse": {
      "type": "object",
      "properties": {
        "training_type_id": {
          "type": "string",
          "title": "id of the training type"
        },
        "title": {
          "type": "string",
          "title": "title of the training type"
        },
        "description": {
          "type": "string",
          "title": "description of the training type"
        },
        "frequency": {
          "type": "string",
          "title": "frequency"
        },
        "organization_id": {
          "type": "string",
          "title": "organization id"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "title": "time the training type was created at"
        }
      }
    },
    "ListTupeResponseTupeResponse": {
      "type": "object",
      "properties": {
        "tupe_id": {
          "type": "string",
          "title": "unique id of the tupe"
        },
        "client_id": {
          "type": "string",
          "title": "id of the client"
        },
        "organization_id": {
          "type": "string",
          "title": "id of the organization"
        },
        "job_detail": {
          "$ref": "#/definitions/fmJobDetails",
          "title": "details about the job"
        },
        "job_dates": {
          "$ref": "#/definitions/fmJobDates",
          "title": "details about job dates"
        },
        "age_range": {
          "type": "string",
          "title": "age range"
        },
        "holiday_entitlement_days": {
          "type": "integer",
          "format": "int32",
          "title": "number of holidays entitled"
        },
        "employee_notice_period": {
          "type": "string",
          "title": "notice period for employee"
        },
        "employer_notice_period": {
          "type": "string",
          "title": "notice period for employer"
        },
        "records_detail": {
          "$ref": "#/definitions/fmRecords",
          "title": "details about different kinds of records"
        },
        "pension_detail": {
          "$ref": "#/definitions/fmPensionDetails",
          "title": "details about pension"
        },
        "benefits_detail": {
          "$ref": "#/definitions/fmBenefits",
          "title": "details about benefits"
        },
        "created_date": {
          "type": "string",
          "format": "date-time",
          "title": "created date of the tupe"
        }
      },
      "title": "individual tupe response"
    },
    "ListUserEmployeeRolesScopesResponseUserEmployeeRolesScopes": {
      "type": "object",
      "properties": {
        "user_employee_id": {
          "type": "string",
          "title": "unique id of the user-employee"
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "roles of the user-employee"
        },
        "scopes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "scopes of the user-employee"
        }
      }
    },
    "RecurrenceTypeDetailsMonthlyWeekDetails": {
      "type": "object",
      "properties": {
        "week_no": {
          "type": "string",
          "title": "week no : allowed FIRST, SECOND, THIRD, FOURTH, FIFTH, LAST"
        },
        "week_days": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "multiple week_days name: allowed SUNDAY, MONDAY, ... SATURDAY"
        }
      }
    },
    "RoleResponseUserRole": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "unique role id"
        },
        "role": {
          "type": "string",
          "title": "name of role"
        },
        "scopes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "scopes for the given role"
        }
      }
    },
    "TaskGroupByClientResponseTaskEmployeeDetailedInformation": {
      "type": "object",
      "properties": {
        "employee_id": {
          "type": "string"
        },
        "task_information": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fmTaskDetailedInformation"
          }
        }
      }
    },
    "TaskGroupResponseEmployeeTaskData": {
      "type": "object",
      "properties": {
        "employee_id": {
          "type": "string",
          "title": "unique id of employee"
        },
        "total_tasks": {
          "type": "integer",
          "format": "int32",
          "title": "total tasks done"
        },
        "task_total_time": {
          "type": "number",
          "format": "double",
          "title": "total task working duration in seconds"
        },
        "weekly_data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fmTaskGroupWeeklyData"
          },
          "title": "weekly data"
        }
      }
    },
    "TaskResponseTaskCorrectionData": {
      "type": "object",
      "properties": {
        "task_correction_id": {
          "type": "string",
          "title": "unique id of task correction"
        },
        "correction": {
          "type": "string",
          "title": "correction time of the task report"
        },
        "status": {
          "type": "string",
          "title": "status of the correction"
        },
        "corrected_by": {
          "type": "string",
          "title": "name of the person who correctes timesheet"
        },
        "approved_by": {
          "type": "string",
          "title": "name of the person who approves this correction"
        },
        "is_negative": {
          "type": "boolean",
          "title": "whether the correction time is negative or not"
        }
      }
    },
    "TaskResponseTaskEmployeeAbsence": {
      "type": "object",
      "properties": {
        "employee_absence_id": {
          "type": "string",
          "title": "unique id of employee absence"
        },
        "type": {
          "type": "string",
          "title": "holiday type: HOLIDAY, SICK, ABSENT"
        },
        "payment_type": {
          "type": "string",
          "title": "payment type : PAID or UNPAID"
        },
        "description": {
          "type": "string",
          "title": "reason"
        },
        "status": {
          "type": "string",
          "title": "status of absence"
        }
      }
    },
    "UpdateBidPlannerRequestUpdateStages": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "stage id"
        },
        "bid_planner_id": {
          "type": "string",
          "title": "bid planner to which the stage belongs"
        },
        "title": {
          "type": "string",
          "title": "title of the stage"
        },
        "employee_id": {
          "type": "string",
          "title": "employee id"
        },
        "description": {
          "type": "string",
          "title": "description of the stage"
        },
        "deadline": {
          "type": "string",
          "format": "date-time",
          "title": "deadline of the stage"
        }
      },
      "title": "individual stage to be updated"
    },
    "UpdateTaskByClientRequestUpdateTaskByClient": {
      "type": "object",
      "properties": {
        "task_id": {
          "type": "string",
          "title": "unique id of the task"
        },
        "check_in_time": {
          "type": "string",
          "format": "date-time",
          "title": "time the task was checked in"
        },
        "check_out_time": {
          "type": "string",
          "format": "date-time",
          "title": "time the task was checked out"
        },
        "contracted_hours": {
          "type": "string",
          "title": "contracted hours of the employee with the client"
        }
      }
    },
    "UpdateTaskByEmployeeRequestUpdateTaskByEmployee": {
      "type": "object",
      "properties": {
        "task_id": {
          "type": "string",
          "title": "unique id of the task"
        },
        "check_in_time": {
          "type": "string",
          "format": "date-time",
          "title": "time the task was checked in"
        },
        "check_out_time": {
          "type": "string",
          "format": "date-time",
          "title": "time the task was checked out"
        },
        "contracted_hours": {
          "type": "string",
          "title": "contracted hours of the employee with the client"
        }
      }
    },
    "UpsertAllTaskCorrectionRequestAllTasks": {
      "type": "object",
      "properties": {
        "task_id": {
          "type": "string",
          "title": "unique id of the task"
        },
        "client_id": {
          "type": "string",
          "title": "id of the client"
        },
        "employee_id": {
          "type": "string",
          "title": "id of the employee"
        },
        "organization_id": {
          "type": "string",
          "title": "id of the organization"
        },
        "task_date": {
          "type": "string",
          "format": "date-time",
          "title": "date of the task"
        }
      }
    },
    "fmAddAgendaDecisionObjectionRequest": {
      "type": "object",
      "properties": {
        "agenda_decision_id": {
          "type": "string",
          "title": "id of decision"
        },
        "agenda_id": {
          "type": "string",
          "title": "id of agenda"
        },
        "meeting_id": {
          "type": "string",
          "title": "id of meeting"
        },
        "objection": {
          "type": "string",
          "title": "string objection of decision"
        },
        "objection_by": {
          "type": "string",
          "title": "objection done by"
        },
        "objection_type": {
          "type": "string",
          "title": "type of objection : NEUTRAL, LIKE OR DISLIKE"
        }
      }
    },
    "fmAddAgendaDecisionRequest": {
      "type": "object",
      "properties": {
        "meeting_id": {
          "type": "string",
          "title": "id of meeting"
        },
        "agenda_id": {
          "type": "string",
          "title": "id of agenda"
        },
        "decision": {
          "type": "string",
          "title": "string decision of agenda"
        },
        "action_by": {
          "type": "string",
          "title": "action to be taken by"
        },
        "action_plan": {
          "type": "string",
          "title": "action plan"
        },
        "action": {
          "type": "string",
          "title": "particular action that is taken"
        },
        "deadline_date": {
          "type": "string",
          "format": "date-time",
          "title": "deadline for action to be taken"
        }
      }
    },
    "fmAddAgendaDecisionSupportRequest": {
      "type": "object",
      "properties": {
        "agenda_decision_id": {
          "type": "string",
          "title": "id of decision"
        },
        "agenda_id": {
          "type": "string",
          "title": "id of agenda"
        },
        "meeting_id": {
          "type": "string",
          "title": "id of meeting"
        },
        "supported_by": {
          "type": "string",
          "title": "id of employee who supports the decision"
        },
        "support": {
          "type": "string",
          "title": "reason to support the decision"
        }
      }
    },
    "fmAddAgendaDecisionSupportResponse": {
      "type": "object",
      "properties": {
        "agenda_decision_support_id": {
          "type": "string",
          "title": "id of decision support"
        }
      }
    },
    "fmAddAgendaViewReplyRequest": {
      "type": "object",
      "properties": {
        "agenda_view_id": {
          "type": "string",
          "title": "id of the agenda view"
        },
        "agenda_id": {
          "type": "string",
          "title": "id of the agenda to which the agenda view belongs"
        },
        "meeting_id": {
          "type": "string",
          "title": "id of the meeting associated with the agenda view"
        },
        "reply": {
          "type": "string",
          "title": "the actual reply message"
        },
        "replied_by": {
          "type": "string",
          "title": "id of the employee who replied to the agenda view"
        }
      }
    },
    "fmAddAgendaViewReplyResponse": {
      "type": "object",
      "properties": {
        "agenda_view_reply_id": {
          "type": "string",
          "title": "id of the created agend view reply"
        }
      }
    },
    "fmAddAgendaViewRequest": {
      "type": "object",
      "properties": {
        "meeting_id": {
          "type": "string",
          "title": "id of meeting"
        },
        "agenda_id": {
          "type": "string",
          "title": "id of agenda"
        },
        "proposed_by": {
          "type": "string",
          "title": "view proposed by : employee_id"
        },
        "description": {
          "type": "string",
          "title": "details"
        }
      }
    },
    "fmAddAttendeesRequest": {
      "type": "object",
      "properties": {
        "meeting_id": {
          "type": "string",
          "title": "id of meeting"
        },
        "invitee_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "employee ids of additional attendees"
        }
      }
    },
    "fmAddRoleToUsersRequest": {
      "type": "object",
      "properties": {
        "organization_id": {
          "type": "string",
          "title": "id of the organization"
        },
        "role": {
          "type": "string",
          "title": "role to be assigned"
        },
        "user_employee": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AddRoleToUsersRequestUserEmployee"
          },
          "title": "ids of user and employee"
        }
      }
    },
    "fmAddRoleToUsersResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "boolean",
          "title": "acknowledgement response"
        }
      }
    },
    "fmAgenda": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "title": "title of agenda"
        },
        "description": {
          "type": "string",
          "title": "description of agenda"
        },
        "proposed_by": {
          "type": "string",
          "title": "id of the employee that proposed the agenda"
        },
        "estimated_time": {
          "type": "string",
          "title": "estimated time to discuss the agenda"
        }
      }
    },
    "fmAgendaDecision": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "id of agenda decisions"
        },
        "agenda_id": {
          "type": "string",
          "title": "agenda it belongs to"
        },
        "decision": {
          "type": "string",
          "title": "decision details"
        },
        "action_by": {
          "type": "string",
          "title": "action taken by : employee_id"
        },
        "action_plan": {
          "type": "string",
          "title": "action plan"
        },
        "action": {
          "type": "string",
          "title": "particular action that is taken"
        },
        "deadline": {
          "type": "string",
          "format": "date-time",
          "title": "deadline to take action"
        },
        "agenda_decision_objections": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fmAgendaDecisionObjection"
          },
          "title": "objections of decisions of agenda"
        },
        "agenda_decision_supports": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fmAgendaDecisionSupport"
          },
          "title": "supports for decisions of agenda"
        }
      },
      "title": "details of decisions within an agenda"
    },
    "fmAgendaDecisionObjection": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "id of objection of decision"
        },
        "agenda_decision_id": {
          "type": "string",
          "title": "id of decision of agenda"
        },
        "agenda_id": {
          "type": "string",
          "title": "agenda it belongs to"
        },
        "objection": {
          "type": "string",
          "title": "objection details"
        },
        "objection_by": {
          "type": "string",
          "title": "objection done by : employee_id"
        },
        "objection_type": {
          "type": "string",
          "title": "type of objection : NEUTRAL, LIKE OR DISLIKE"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "title": "objection created date"
        }
      },
      "title": "details of objection of decision made for an agenda"
    },
    "fmAgendaDecisionSupport": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "id of support of decision"
        },
        "agenda_decision_id": {
          "type": "string",
          "title": "id of decision of agenda"
        },
        "agenda_id": {
          "type": "string",
          "title": "id of agenda the decision support belongs to"
        },
        "supported_by": {
          "type": "string",
          "title": "supported by : employee_id"
        },
        "support": {
          "type": "string",
          "title": "reason to support the decision"
        }
      }
    },
    "fmAgendaDecisionTimerRequest": {
      "type": "object",
      "properties": {
        "meeting_id": {
          "type": "string",
          "title": "id of meeting"
        },
        "agenda_id": {
          "type": "string",
          "title": "id of agenda"
        },
        "action": {
          "type": "string",
          "title": "timer - action : Allowed values [\"START\",\"STOP\"]"
        }
      }
    },
    "fmAgendaDecisionTimerResponse": {
      "type": "object",
      "properties": {
        "agenda_id": {
          "type": "string",
          "title": "unique id of agenda"
        }
      }
    },
    "fmAgendaDetail": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "id of agenda"
        },
        "title": {
          "type": "string",
          "title": "title of agenda"
        },
        "description": {
          "type": "string",
          "title": "description of agenda"
        },
        "proposed_by": {
          "type": "string",
          "title": "id of the employee that proposed the agenda"
        },
        "estimated_time": {
          "type": "string",
          "title": "estimated time to discuss the agenda"
        },
        "actual_time": {
          "type": "string",
          "title": "actual time of the agenda discussed"
        },
        "start_time": {
          "type": "string",
          "format": "date-time",
          "title": "start time of agenda"
        },
        "end_time": {
          "type": "string",
          "format": "date-time",
          "title": "end time of agenda"
        },
        "agenda_views": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fmAgendaView"
          },
          "title": "views of agenda"
        },
        "agenda_decisions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fmAgendaDecision"
          },
          "title": "decisions of agenda"
        }
      },
      "title": "Agenda details with complete info on views/decisions/objections"
    },
    "fmAgendaTimerRequest": {
      "type": "object",
      "properties": {
        "meeting_id": {
          "type": "string",
          "title": "id of meeting"
        },
        "agenda_id": {
          "type": "string",
          "title": "id of agenda"
        },
        "action": {
          "type": "string",
          "title": "timer - action : Allowed values [\"START\",\"STOP\"]"
        }
      }
    },
    "fmAgendaTimerResponse": {
      "type": "object",
      "properties": {
        "agenda_id": {
          "type": "string",
          "title": "agenda id"
        }
      }
    },
    "fmAgendaUpdateDetail": {
      "type": "object",
      "properties": {
        "agenda_id": {
          "type": "string",
          "title": "id of agenda for update"
        },
        "title": {
          "type": "string",
          "title": "title of agenda"
        },
        "description": {
          "type": "string",
          "title": "description of agenda"
        },
        "proposed_by": {
          "type": "string",
          "title": "id of the employee that proposed the agenda"
        },
        "estimated_time": {
          "type": "string",
          "title": "estimated time to discuss the agenda"
        }
      }
    },
    "fmAgendaView": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "id of agenda view"
        },
        "agenda_id": {
          "type": "string",
          "title": "agenda it belongs to"
        },
        "proposed_by": {
          "type": "string",
          "title": "view proposed by : employee_id"
        },
        "description": {
          "type": "string",
          "title": "details"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "title": "created date"
        },
        "delete_history": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "delete history"
        },
        "agenda_view_replies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fmAgendaViewReply"
          },
          "title": "replies of agenda views"
        }
      },
      "title": "details of Views within an agenda"
    },
    "fmAgendaViewReply": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "id of reply of agenda view"
        },
        "agenda_view_id": {
          "type": "string",
          "title": "id of agenda view"
        },
        "agenda_id": {
          "type": "string",
          "title": "id of agenda the view reply belongs to"
        },
        "reply": {
          "type": "string",
          "title": "actual reply message"
        },
        "replied_by": {
          "type": "string",
          "title": "replied by : employee_id"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "title": "reply created date"
        }
      }
    },
    "fmAllCategoryQuestionsResponse": {
      "type": "object",
      "properties": {
        "question_id": {
          "type": "string",
          "title": "unique id of the question"
        },
        "category_id": {
          "type": "string",
          "title": "id of the category to which the question belongs"
        },
        "organization_id": {
          "type": "string",
          "title": "id of the organization"
        },
        "client_id": {
          "type": "string",
          "title": "id of the client"
        },
        "question": {
          "type": "string",
          "title": "the actual question"
        },
        "answer_type": {
          "type": "string",
          "title": "type of answer allowed"
        },
        "answer": {
          "type": "string",
          "title": "the answer of the particular question"
        },
        "answer_word_count": {
          "type": "integer",
          "format": "int32",
          "title": "number of words allowed for the answer"
        },
        "approved_by": {
          "type": "string",
          "title": "approved_by : employee_id"
        },
        "approved_date": {
          "type": "string",
          "format": "date-time",
          "title": "date of approval"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "title": "time the question was created at"
        },
        "deadline": {
          "type": "string",
          "format": "date-time",
          "title": "deadline of the question"
        }
      },
      "title": "individual response of question of the category"
    },
    "fmAllTaskGroupResponse": {
      "type": "object",
      "properties": {
        "filter": {
          "type": "string",
          "title": "filter : EMPLOYEE, CLIENT"
        },
        "total_data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AllTaskGroupResponseSectorTaskGroupData"
          },
          "title": "Clientwise or emplooyeewise data"
        }
      }
    },
    "fmApproveTaskCorrectionRequest": {
      "type": "object",
      "properties": {
        "task_correction_id": {
          "type": "string",
          "title": "task correction id"
        },
        "organization_id": {
          "type": "string",
          "title": "organization id"
        },
        "approved_by": {
          "type": "string",
          "title": "approved by i.e. id"
        }
      }
    },
    "fmApproveTaskCorrectionResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "boolean",
          "title": "action response"
        }
      }
    },
    "fmArea": {
      "type": "object",
      "properties": {
        "total_area": {
          "type": "string"
        },
        "area": {
          "type": "string"
        },
        "area_manager": {
          "type": "string",
          "title": "Area manager employee_id"
        }
      }
    },
    "fmAreaSupervisor": {
      "type": "object",
      "properties": {
        "area_supervisor": {
          "type": "string",
          "title": "id of area supervisor (employee-id)"
        },
        "allowed_client_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "list of allowed clients"
        }
      }
    },
    "fmAssignClientEmployeeShiftResponse": {
      "type": "object",
      "properties": {
        "client_employee_id": {
          "type": "string",
          "title": "unique id of client employee relation"
        }
      },
      "title": "Response for client-employee shift assignment"
    },
    "fmAssignContractedHoursResponse": {
      "type": "object",
      "properties": {
        "client_employee_id": {
          "type": "string",
          "title": "unique id of client employee relation"
        }
      }
    },
    "fmAssignTargetTasksRequest": {
      "type": "object",
      "properties": {
        "client_employee_id": {
          "type": "string",
          "title": "unique identifier for the client employee relation"
        },
        "start_date": {
          "type": "string",
          "format": "date-time",
          "title": "start date for target tasks"
        },
        "end_date": {
          "type": "string",
          "format": "date-time",
          "title": "end date for target tasks"
        },
        "weekly_target_tasks": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "int64"
          },
          "title": "The target tasks for the 7 days"
        }
      },
      "title": "Request for assigning target tasks to an employee"
    },
    "fmAssignTargetTasksResponse": {
      "type": "object",
      "properties": {
        "client_employee_id": {
          "type": "string",
          "title": "unique identifier for the client employee relation"
        }
      },
      "title": "Response for assigning target tasks to an employee"
    },
    "fmAssociateWithEmployeeRequest": {
      "type": "object",
      "properties": {
        "employee_id": {
          "type": "string",
          "title": "id the employee to associate"
        },
        "user_id": {
          "type": "string",
          "title": "user_id to associate"
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "roles for this association"
        },
        "scopes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "scopes for this association"
        },
        "organization_id": {
          "type": "string",
          "title": "id of organization"
        }
      }
    },
    "fmBankAccountDetails": {
      "type": "object",
      "properties": {
        "bank_name": {
          "type": "string",
          "title": "Name of the bank"
        },
        "branch_name": {
          "type": "string",
          "title": "Branch name"
        },
        "account_number": {
          "type": "string",
          "title": "Account number"
        },
        "s_code": {
          "type": "string",
          "title": "some code"
        },
        "account_holder_name": {
          "type": "string",
          "title": "account holder name"
        }
      },
      "title": "Bank accounts details collection"
    },
    "fmBenefits": {
      "type": "object",
      "properties": {
        "bonus_enhancement": {
          "type": "boolean",
          "title": "if there is any kind of bonus/enhancement"
        },
        "added_benefits": {
          "type": "string",
          "title": "added benefits"
        },
        "other_benefits": {
          "type": "string",
          "title": "other kind of benefits"
        },
        "sick_pay_claim": {
          "type": "boolean",
          "title": "whether sick pay claim is possible or not"
        },
        "sick_pay_claim_details": {
          "type": "string",
          "title": "details of sick pay claim"
        },
        "maternity_paternity_eligibility": {
          "type": "string",
          "title": "maternity/paternity eligibility"
        }
      }
    },
    "fmCRMDates": {
      "type": "object",
      "properties": {
        "task_date": {
          "type": "string",
          "format": "date-time",
          "title": "task date"
        },
        "status": {
          "type": "string",
          "title": "status of the task date"
        }
      }
    },
    "fmCRMMobTasks": {
      "type": "object",
      "properties": {
        "crm_task_id": {
          "type": "string",
          "title": "unique id of the crm_task"
        },
        "title": {
          "type": "string",
          "title": "title name"
        },
        "task_owner": {
          "type": "string",
          "title": "task_owner : employee_id"
        },
        "deadline": {
          "type": "string",
          "format": "date-time",
          "title": "deadline of the task"
        },
        "task_detail": {
          "type": "string",
          "title": "task detail"
        },
        "status": {
          "type": "string",
          "title": "status of the task"
        },
        "task_dates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fmCRMTaskDates"
          },
          "title": "dates of the task"
        }
      }
    },
    "fmCRMTaskDates": {
      "type": "object",
      "properties": {
        "crm_task_date_id": {
          "type": "string",
          "title": "unique id of the crm-task-date"
        },
        "task_date": {
          "type": "string",
          "format": "date-time",
          "title": "task date"
        },
        "status": {
          "type": "string",
          "title": "status of the task date"
        }
      }
    },
    "fmCRMTasks": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "title": "title name"
        },
        "task_owner": {
          "type": "string",
          "title": "task_owner : employee_id"
        },
        "deadline": {
          "type": "string",
          "format": "date-time",
          "title": "deadline of the task"
        },
        "task_detail": {
          "type": "string",
          "title": "task detail"
        },
        "status": {
          "type": "string",
          "title": "status of the task"
        },
        "task_dates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fmCRMDates"
          },
          "title": "dates of the task"
        }
      }
    },
    "fmCancelTaskRequest": {
      "type": "object",
      "properties": {
        "task_id": {
          "type": "string",
          "title": "unique id of the task to be cancelled"
        },
        "organization_id": {
          "type": "string",
          "title": "id of the organization"
        }
      }
    },
    "fmCancelTaskResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "boolean",
          "title": "acknowledgment respone"
        }
      }
    },
    "fmChangeAbsenceStatusRequest": {
      "type": "object",
      "properties": {
        "employee_absence_id": {
          "type": "string",
          "title": "employee absence id whose status is to be changed"
        },
        "status_by_id": {
          "type": "string",
          "title": "employee id who approves or rejects the status change"
        },
        "status": {
          "type": "string",
          "title": "status after being changed"
        },
        "payment_type": {
          "type": "string",
          "title": "payment type after updated"
        }
      }
    },
    "fmChangeAbsenceStatusResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "boolean",
          "title": "action response"
        }
      }
    },
    "fmChangePasswordRequest": {
      "type": "object",
      "properties": {
        "user_id": {
          "type": "string",
          "title": "unique id of user"
        },
        "employee_id": {
          "type": "string",
          "title": "unique id of employee"
        },
        "organization_id": {
          "type": "string",
          "title": "unique id of organization"
        },
        "old_password": {
          "type": "string",
          "title": "previous password used to log in"
        },
        "new_password": {
          "type": "string",
          "title": "new password of user"
        }
      }
    },
    "fmChangePasswordResponse": {
      "type": "object",
      "properties": {
        "user_id": {
          "type": "string",
          "title": "unique id of user"
        }
      }
    },
    "fmChangeTimesheetCorrectionStatusRequest": {
      "type": "object",
      "properties": {
        "timesheet_correction_id": {
          "type": "string",
          "title": "timesheet correction id"
        },
        "status": {
          "type": "string",
          "title": "Status to change to either `PENDING`, `APPROVED`, `REJECTED`"
        }
      }
    },
    "fmChangeTimesheetCorrectionStatusResponse": {
      "type": "object",
      "properties": {
        "timesheet_correction_id": {
          "type": "string",
          "title": "timesheet correcetion id"
        }
      }
    },
    "fmChangeUserEmployeePasswordRequest": {
      "type": "object",
      "properties": {
        "user_employee_id": {
          "type": "string",
          "title": "unique id of the user-employee whose password is to be changes"
        },
        "password": {
          "type": "string",
          "title": "password to be changed"
        }
      }
    },
    "fmChangeUserEmployeePasswordResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "boolean",
          "title": "acknowledgement status"
        }
      }
    },
    "fmCheckInOutRequest": {
      "type": "object",
      "properties": {
        "check_id": {
          "type": "string",
          "title": "check in or out to particular check item with check_id"
        }
      },
      "title": "Request for checking in to opening_check and checking out to closing_check"
    },
    "fmCheckinTaskRequest": {
      "type": "object",
      "properties": {
        "task_id": {
          "type": "string"
        }
      },
      "title": "Request for checking in to task"
    },
    "fmCheckoutTaskRequest": {
      "type": "object",
      "properties": {
        "task_id": {
          "type": "string",
          "title": "id of the task to checkout"
        }
      },
      "title": "Request for checking out from task"
    },
    "fmClientAddAttachmentRequest": {
      "type": "object",
      "properties": {
        "client_id": {
          "type": "string",
          "title": "unique identifier of the client"
        },
        "attachment_path": {
          "type": "string",
          "title": "path of attachment"
        },
        "attachment_type": {
          "type": "string",
          "title": "type of attachment"
        },
        "uploaded_by": {
          "type": "string",
          "title": "uploaded by"
        }
      }
    },
    "fmClientAddAttachmentResponse": {
      "type": "object",
      "properties": {
        "attachment_id": {
          "type": "string",
          "title": "unique identifier of the newly created attachment record"
        }
      }
    },
    "fmClientChangeStatusRequest": {
      "type": "object",
      "properties": {
        "client_id": {
          "type": "string",
          "title": "unique identifier of the client"
        },
        "status": {
          "type": "string",
          "title": "status to change to"
        },
        "client_code": {
          "type": "string",
          "title": "unique code of client"
        },
        "client_date": {
          "$ref": "#/definitions/fmCreateClientDate",
          "title": "required dates of client"
        }
      },
      "title": "Request for changing status of client"
    },
    "fmClientChangeStatusResponse": {
      "type": "object",
      "properties": {
        "client_id": {
          "type": "string",
          "title": "unique identifier of the client"
        }
      }
    },
    "fmClientConfidentialDetailResponse": {
      "type": "object",
      "properties": {
        "client_id": {
          "type": "string",
          "title": "id of the client"
        },
        "confidential_contact_people": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fmContactPerson"
          },
          "description": "Confidential contact person details of the client."
        }
      }
    },
    "fmClientDate": {
      "type": "object",
      "properties": {
        "start_date": {
          "type": "string",
          "format": "date-time",
          "title": "Start of the contract with the client"
        },
        "end_date": {
          "type": "string",
          "format": "date-time",
          "title": "End of the contract with the client"
        },
        "effective_date": {
          "type": "string",
          "format": "date-time"
        },
        "last_review_date": {
          "type": "string",
          "format": "date-time"
        },
        "renew_date": {
          "type": "string",
          "format": "date-time",
          "title": "Date in which client contract is expected to be renewed next time"
        }
      }
    },
    "fmClientDateDetailResponse": {
      "type": "object",
      "properties": {
        "organization_id": {
          "type": "string",
          "title": "unique id of organization"
        },
        "clients": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fmClientWithDate"
          },
          "title": "date details of client"
        }
      }
    },
    "fmClientDetail": {
      "type": "object",
      "properties": {
        "area": {
          "$ref": "#/definitions/fmArea",
          "title": "Area"
        },
        "sector": {
          "type": "string"
        },
        "date": {
          "$ref": "#/definitions/fmClientDate"
        },
        "status": {
          "type": "string",
          "title": "This field is only used in list and detail API\nOther APIs will ignore this field"
        },
        "site_supervisor_id": {
          "type": "string",
          "title": "Site supervisor aka client supervisor"
        },
        "site_supervisor_email": {
          "type": "string"
        },
        "site_supervisor_phone": {
          "type": "string"
        },
        "region": {
          "$ref": "#/definitions/fmRegion",
          "title": "Region"
        },
        "client_code": {
          "type": "string",
          "title": "client code"
        }
      }
    },
    "fmClientDetailResponse": {
      "type": "object",
      "properties": {
        "client_id": {
          "type": "string",
          "title": "unique identifier of the client"
        },
        "organization_id": {
          "type": "string",
          "title": "organization id the client belongs to"
        },
        "name": {
          "type": "string",
          "title": "unique name of the client"
        },
        "contact_detail": {
          "$ref": "#/definitions/fmContactDetail",
          "title": "contact detail of the client"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "title": "time the client was created at"
        },
        "client_detail": {
          "$ref": "#/definitions/fmClientDetail",
          "title": "information details of the client"
        },
        "confidential_contact_people": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fmContactPerson"
          },
          "title": "Confidential contact person details of the client. Backend saves to\nClientContactPersonService"
        },
        "bank_account_details": {
          "$ref": "#/definitions/fmBankAccountDetails",
          "title": "Bank account details of the client"
        },
        "contact_people": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fmContactPerson"
          },
          "title": "List of contact perople details of the client. Backend saves to\nClientContactPersonService"
        },
        "is_head_office": {
          "type": "boolean",
          "title": "Boolean: shows wether client is head office or not"
        },
        "profile_image": {
          "type": "string",
          "title": "profile image of client"
        },
        "total_branches": {
          "type": "integer",
          "format": "int32",
          "title": "If current client is main office, count of branches"
        },
        "branch_head_office_id": {
          "type": "string",
          "title": "if current client is branch office, info of head office"
        },
        "lead_detail": {
          "$ref": "#/definitions/fmLeadClientDetail",
          "title": "Details for lead client"
        }
      },
      "title": "Response for client detail"
    },
    "fmClientListAttachmentResponse": {
      "type": "object",
      "properties": {
        "client_id": {
          "type": "string",
          "title": "unique identifier of the client"
        },
        "attachments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClientListAttachmentResponseClientAttachmentPayload"
          },
          "title": "list of attachments"
        }
      }
    },
    "fmClientSetHeadOfficeRequest": {
      "type": "object",
      "properties": {
        "organization_id": {
          "type": "string",
          "title": "organization id"
        },
        "head_office_client_id": {
          "type": "string",
          "title": "id of client which is to be set to head offfice"
        }
      }
    },
    "fmClientSetHeadOfficeResponse": {
      "type": "object",
      "properties": {
        "head_office_client_id": {
          "type": "string",
          "title": "id of client which is to be set to head offfice"
        }
      }
    },
    "fmClientWithDate": {
      "type": "object",
      "properties": {
        "client_id": {
          "type": "string",
          "title": "unique id of client"
        },
        "name": {
          "type": "string",
          "title": "name of client"
        },
        "client_code": {
          "type": "string",
          "title": "unique code of client"
        },
        "client_dates": {
          "$ref": "#/definitions/fmCreateClientDate",
          "title": "date information"
        }
      }
    },
    "fmCommentResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "to uniquely identify a comment"
        },
        "employee_id": {
          "type": "string",
          "title": "the id of the employee who is commenting"
        },
        "commentable_type": {
          "type": "string",
          "title": "a unique type for comment"
        },
        "commentable_id": {
          "type": "string",
          "title": "an id to uniquely identify a comment"
        },
        "comment": {
          "type": "string",
          "title": "the comment string"
        },
        "description": {
          "type": "string",
          "title": "description if you need it"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "title": "timestamp of when the comment was created"
        },
        "replies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fmReplyResponse"
          }
        }
      }
    },
    "fmConfidentialEmployeeDetails": {
      "type": "object",
      "properties": {
        "dob": {
          "type": "string",
          "title": "date of birth"
        },
        "national_insurance_number": {
          "type": "string",
          "title": "National insurance number"
        },
        "tax_code": {
          "type": "string",
          "title": "Tax code"
        }
      },
      "title": "General Confidential Employee Details"
    },
    "fmConfidentialEmployeeInfo": {
      "type": "object",
      "properties": {
        "employee_details": {
          "$ref": "#/definitions/fmConfidentialEmployeeDetails",
          "title": "Employee details"
        },
        "bank_account_details": {
          "$ref": "#/definitions/fmEmployeeBankAccountDetails",
          "title": "Bank details"
        }
      },
      "title": "Confidential Employee information"
    },
    "fmContactDetail": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "title": "email address"
        },
        "phone": {
          "type": "string",
          "title": "phone number"
        },
        "address": {
          "$ref": "#/definitions/ContactDetailAddress",
          "title": "address"
        },
        "mobile": {
          "type": "string",
          "title": "Mobile phone number"
        },
        "website": {
          "type": "string",
          "title": "website of the contact"
        },
        "contact_no": {
          "type": "string",
          "title": "contact number\nNOTE: creating and not deleting older fields for backward compatibility"
        }
      }
    },
    "fmContactPerson": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "designation": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "mobile": {
          "type": "string"
        },
        "position": {
          "type": "string"
        }
      }
    },
    "fmCoverResponse": {
      "type": "object",
      "properties": {
        "employee_id": {
          "type": "string",
          "title": "Employee id of employee who has requested a leave/holiday"
        },
        "leave_from_date": {
          "type": "string",
          "format": "date-time",
          "title": "Leave from date"
        },
        "leave_to_date": {
          "type": "string",
          "format": "date-time",
          "title": "Leave upto date"
        },
        "covered_by_employee_id": {
          "type": "string",
          "title": "The employee who will be covering the absentee employee"
        },
        "client_id": {
          "type": "string",
          "title": "Client at which the employee is taking a lave"
        },
        "status": {
          "type": "string",
          "title": "Status of the holiday request"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "title": "The timestamp at which holiday record was created"
        },
        "organization_id": {
          "type": "string",
          "title": "Organization id of the employee"
        },
        "leave_id": {
          "type": "string",
          "title": "leave id"
        },
        "leave_type": {
          "type": "string",
          "title": "leave type"
        }
      },
      "title": "Single cover Payload"
    },
    "fmCreateAbsenceRequest": {
      "type": "object",
      "properties": {
        "employee_id": {
          "type": "string",
          "title": "Employee id of employee who has requested for a holiday/sick/absence"
        },
        "client_id": {
          "type": "string",
          "title": "Client id"
        },
        "organization_id": {
          "type": "string",
          "title": "Organization id of the employee"
        },
        "type": {
          "type": "string",
          "title": "type of leave i.e. HOLIDAY, SICK OR ABSENT"
        },
        "payment_type": {
          "type": "string",
          "title": "type of payment i.e. PAID OR UNPAID"
        },
        "description": {
          "type": "string",
          "title": "description regarding the leave"
        },
        "dates": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "date-time"
          },
          "title": "dates for which leave is taken"
        }
      },
      "title": "Request for creating absence for an employee"
    },
    "fmCreateAbsenceResponse": {
      "type": "object",
      "properties": {
        "employee_absence_id": {
          "type": "string",
          "title": "id of the created employee absence"
        }
      },
      "title": "Response for absence creation success"
    },
    "fmCreateAppointmentRequest": {
      "type": "object",
      "properties": {
        "client_id": {
          "type": "string",
          "title": "unique client id required for the appointment"
        },
        "organization_id": {
          "type": "string",
          "title": "organization id to which the appointment belongs"
        },
        "appointment_date": {
          "type": "string",
          "format": "date-time",
          "title": "date for the appointment"
        },
        "estimated_time": {
          "type": "string",
          "title": "estimated time of the appointment"
        },
        "location": {
          "type": "string",
          "title": "location of the appointment"
        },
        "attendee_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "id of employees who come for the appointment"
        },
        "subject": {
          "type": "string",
          "title": "subject of appointment"
        },
        "note": {
          "type": "string",
          "title": "note detail"
        }
      }
    },
    "fmCreateAppointmentResponse": {
      "type": "object",
      "properties": {
        "appointment_id": {
          "type": "string",
          "title": "id of the created appointment"
        }
      }
    },
    "fmCreateAreaRequest": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "title": "title of area"
        },
        "organization_id": {
          "type": "string",
          "title": "organization for the area"
        },
        "region_id": {
          "type": "string",
          "title": "region that area belongs to"
        },
        "area_manager": {
          "type": "string",
          "title": "id of area manager (employee-id)"
        },
        "areamanager_restricted_clients": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "id of clients disabled for area_manager"
        }
      }
    },
    "fmCreateBidPlannerRequest": {
      "type": "object",
      "properties": {
        "client_id": {
          "type": "string",
          "title": "client id"
        },
        "source": {
          "type": "string",
          "title": "source of bid planner"
        },
        "value": {
          "type": "string",
          "title": "value of bid planner"
        },
        "deadline": {
          "type": "string",
          "format": "date-time",
          "title": "deadline of the bid planner"
        },
        "stages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fmCreateStageRequest"
          },
          "title": "multiple stages for the bid planner"
        }
      }
    },
    "fmCreateBidPlannerResponse": {
      "type": "object",
      "properties": {
        "bid_planner_id": {
          "type": "string",
          "title": "id of the created bid planner"
        }
      }
    },
    "fmCreateBidPlannerStatusRequest": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "title": "title of the bid planner status"
        },
        "description": {
          "type": "string",
          "title": "description regarding the bid planner status"
        },
        "organization_id": {
          "type": "string",
          "title": "organization id to which it belongs"
        }
      }
    },
    "fmCreateBidPlannerStatusResponse": {
      "type": "object",
      "properties": {
        "bid_planner_status_id": {
          "type": "string",
          "title": "id of the created training type"
        }
      }
    },
    "fmCreateCRMMobilizationRequest": {
      "type": "object",
      "properties": {
        "client_id": {
          "type": "string",
          "title": "id of the client"
        },
        "template_id": {
          "type": "string",
          "title": "id of the mobilization template"
        },
        "organization_id": {
          "type": "string",
          "title": "id of the organization"
        },
        "tasks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fmCRMTasks"
          },
          "title": "tasks of the mobilization"
        }
      }
    },
    "fmCreateCRMMobilizationResponse": {
      "type": "object",
      "properties": {
        "crm_mobilization_id": {
          "type": "string",
          "title": "unique id of the created mobilization"
        }
      }
    },
    "fmCreateCRMMobilizationTaskDatesRequest": {
      "type": "object",
      "properties": {
        "crm_task_id": {
          "type": "string",
          "title": "id of the crm-task"
        },
        "organization_id": {
          "type": "string",
          "title": "id of the organization"
        },
        "task_dates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fmCRMDates"
          },
          "title": "dates of the task"
        }
      }
    },
    "fmCreateCRMMobilizationTaskDatesResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "boolean",
          "title": "action response"
        }
      }
    },
    "fmCreateCRMMobilizationsRequest": {
      "type": "object",
      "properties": {
        "organization_id": {
          "type": "string",
          "title": "id of the organization"
        },
        "templates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CreateCRMMobilizationsRequestReqTemplates"
          },
          "title": "multiple template id requests"
        }
      }
    },
    "fmCreateCRMMobilizationsResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "boolean",
          "title": "action response"
        }
      }
    },
    "fmCreateCallRequest": {
      "type": "object",
      "properties": {
        "client_id": {
          "type": "string",
          "title": "unique client id"
        },
        "organization_id": {
          "type": "string",
          "title": "organization id"
        },
        "call_date": {
          "type": "string",
          "format": "date-time",
          "title": "date of the call"
        },
        "call_duration": {
          "type": "string",
          "title": "duration of the call"
        },
        "subject": {
          "type": "string",
          "title": "subject of the call"
        },
        "caller": {
          "type": "string",
          "title": "caller"
        },
        "receiver": {
          "type": "string",
          "title": "receiver"
        },
        "message": {
          "type": "string",
          "title": "message details"
        },
        "caller_receiver": {
          "type": "string",
          "title": "to identify whether the individual is a caller or a receiver"
        }
      }
    },
    "fmCreateCallResponse": {
      "type": "object",
      "properties": {
        "call_id": {
          "type": "string",
          "title": "unique id of the created call"
        }
      }
    },
    "fmCreateCategoryQuestionRequest": {
      "type": "object",
      "properties": {
        "category_id": {
          "type": "string",
          "title": "id of the category for which the question is being created"
        },
        "client_id": {
          "type": "string",
          "title": "id of the client under which the created question falls"
        },
        "organization_id": {
          "type": "string",
          "title": "id of the organization"
        },
        "question": {
          "type": "string",
          "title": "the actual question that is being created"
        },
        "answer_word_count": {
          "type": "integer",
          "format": "int32",
          "title": "number of words allowed for the answer to this question"
        },
        "answer_type": {
          "type": "string",
          "title": "type of answer allowed"
        },
        "deadline": {
          "type": "string",
          "format": "date-time",
          "title": "deadline of the question"
        }
      }
    },
    "fmCreateCategoryQuestionResponse": {
      "type": "object",
      "properties": {
        "question_id": {
          "type": "string",
          "title": "id of the created question"
        }
      }
    },
    "fmCreateCategoryRequest": {
      "type": "object",
      "properties": {
        "client_id": {
          "type": "string",
          "title": "unique id of the client"
        },
        "organization_id": {
          "type": "string",
          "title": "unique id of the organization to which the category belongs"
        },
        "category_name": {
          "type": "string",
          "title": "name of the category"
        },
        "employee_id": {
          "type": "string",
          "title": "unique id of the employee"
        },
        "percentage": {
          "type": "number",
          "format": "float",
          "title": "percentage"
        },
        "deadline": {
          "type": "string",
          "format": "date-time",
          "title": "deadline of the category"
        }
      }
    },
    "fmCreateCategoryResponse": {
      "type": "object",
      "properties": {
        "category_id": {
          "type": "string",
          "title": "id of the created category"
        }
      }
    },
    "fmCreateCheckRequest": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "title": "title of the check"
        },
        "instruction": {
          "type": "string",
          "title": "detail instruction of the opening_check"
        },
        "employee_id": {
          "type": "string",
          "title": "employee the opening_check is assigned to"
        },
        "check_type": {
          "type": "string",
          "title": "check_type = opening for opening check and check_type = closing for closing\ncheck"
        },
        "start_time": {
          "type": "string",
          "format": "date-time",
          "title": "check must start by at least this time. Start time is combination of\nappointment date and time"
        },
        "organization_id": {
          "type": "string",
          "title": "organization id"
        }
      },
      "title": "Request to create check"
    },
    "fmCreateCheckResponse": {
      "type": "object",
      "properties": {
        "check_id": {
          "type": "string",
          "title": "unique id of the check"
        }
      },
      "title": "Response from create check"
    },
    "fmCreateClientDate": {
      "type": "object",
      "properties": {
        "start_date": {
          "type": "string",
          "format": "date-time",
          "title": "Start of the contract with the client"
        },
        "end_date": {
          "type": "string",
          "format": "date-time",
          "title": "End of the contract with the client"
        },
        "effective_date": {
          "type": "string",
          "format": "date-time"
        },
        "renew_date": {
          "type": "string",
          "format": "date-time",
          "title": "Date in which client contract is expected to be renewed next time"
        }
      }
    },
    "fmCreateClientDetail": {
      "type": "object",
      "properties": {
        "area": {
          "$ref": "#/definitions/fmArea",
          "title": "Area"
        },
        "sector": {
          "type": "string"
        },
        "date": {
          "$ref": "#/definitions/fmCreateClientDate"
        },
        "site_supervisor_id": {
          "type": "string",
          "title": "Site supervisor aka client supervisor"
        },
        "site_supervisor_email": {
          "type": "string"
        },
        "site_supervisor_phone": {
          "type": "string"
        },
        "region": {
          "$ref": "#/definitions/fmRegion",
          "title": "Region"
        }
      }
    },
    "fmCreateClientEmployeeResponse": {
      "type": "object",
      "properties": {
        "client_employee_id": {
          "type": "string"
        }
      }
    },
    "fmCreateClientMobilizationRequest": {
      "type": "object",
      "properties": {
        "client_id": {
          "type": "string",
          "title": "client id for the mobilization"
        },
        "category": {
          "type": "string",
          "title": "category of mobilization"
        },
        "subject": {
          "type": "string",
          "title": "subject of mobilization"
        },
        "message": {
          "type": "string",
          "title": "message for the mobilization"
        },
        "by": {
          "$ref": "#/definitions/fmMobilizationPrincipal",
          "title": "mobilization by"
        },
        "to": {
          "$ref": "#/definitions/fmMobilizationPrincipal",
          "title": "mobilization to"
        },
        "date_of_mobilization": {
          "type": "string",
          "format": "date-time",
          "title": "mobilization date"
        }
      },
      "title": "Request to create client mobilization"
    },
    "fmCreateClientMobilizationResponse": {
      "type": "object",
      "properties": {
        "client_mobilization_id": {
          "type": "string",
          "title": "unique id of the mobilization"
        }
      },
      "title": "Response for client mobilization creation"
    },
    "fmCreateClientRequest": {
      "type": "object",
      "properties": {
        "organization_id": {
          "type": "string",
          "title": "id of the organization this client belongs to"
        },
        "name": {
          "type": "string",
          "title": "unique name of the client"
        },
        "contact_detail": {
          "$ref": "#/definitions/fmContactDetail",
          "title": "contact details of the client"
        },
        "client_detail": {
          "$ref": "#/definitions/fmCreateClientDetail",
          "title": "information details of the client"
        },
        "contact_people": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fmContactPerson"
          },
          "title": "Contact people details of the client. Backend saves to\nClientContactPersonService"
        },
        "bank_account_details": {
          "$ref": "#/definitions/fmBankAccountDetails",
          "title": "Bank account details"
        },
        "client_code": {
          "type": "string",
          "title": "unique code of client within the organization"
        },
        "profile_image": {
          "type": "string",
          "title": "profile image of client"
        },
        "branch_head_office": {
          "type": "string",
          "title": "string head office client id"
        },
        "lead_detail": {
          "$ref": "#/definitions/fmLeadClientDetailUpsert",
          "title": "Details for lead client"
        }
      }
    },
    "fmCreateClientResponse": {
      "type": "object",
      "properties": {
        "client_id": {
          "type": "string"
        }
      },
      "title": "Response for create client requests"
    },
    "fmCreateCommentRequest": {
      "type": "object",
      "properties": {
        "employee_id": {
          "type": "string",
          "title": "the id of the employee who is commenting"
        },
        "organization_id": {
          "type": "string",
          "title": "id of the associated organization"
        },
        "commentable_type": {
          "type": "string",
          "title": "a unique type for comment"
        },
        "commentable_id": {
          "type": "string",
          "title": "an id to uniquely identify a comment"
        },
        "comment": {
          "type": "string",
          "title": "the comment string"
        },
        "description": {
          "type": "string",
          "title": "description if you need it (optional)"
        }
      }
    },
    "fmCreateCoverRequest": {
      "type": "object",
      "properties": {
        "employee_absence_id": {
          "type": "string",
          "title": "unqiue absence id"
        },
        "covered_by": {
          "type": "string",
          "title": "employee id"
        },
        "cover_rate": {
          "type": "number",
          "format": "float",
          "title": "cover rate"
        },
        "estimate_time": {
          "type": "string",
          "title": "estimated time for cover task"
        },
        "absence_task_id": {
          "type": "string",
          "title": "unique id of task"
        },
        "recurrence_task_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "recurrence task ids"
        }
      }
    },
    "fmCreateCoverResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "boolean"
        }
      }
    },
    "fmCreateDepartmentRequest": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "organization_id": {
          "type": "string"
        }
      }
    },
    "fmCreateDepartmentResponse": {
      "type": "object",
      "properties": {
        "department_id": {
          "type": "string"
        }
      }
    },
    "fmCreateDesignationRequest": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "title": "job title. eg, manager, supervisor, cleaner"
        },
        "department_id": {
          "type": "string",
          "title": "this gives information about the department under which the designation\nfalls"
        },
        "description": {
          "type": "string",
          "title": "admin can add brief details about the designation, if required"
        },
        "organization_id": {
          "type": "string",
          "title": "designation is at organization level and also it is used for authentication"
        }
      }
    },
    "fmCreateDesignationResponse": {
      "type": "object",
      "properties": {
        "designation_id": {
          "type": "string"
        }
      }
    },
    "fmCreateEmailRequest": {
      "type": "object",
      "properties": {
        "client_id": {
          "type": "string",
          "title": "id of the client"
        },
        "organization_id": {
          "type": "string",
          "title": "organization id"
        },
        "email_date": {
          "type": "string",
          "format": "date-time",
          "title": "date on which the email is sent"
        },
        "subject": {
          "type": "string",
          "title": "subject of the email"
        },
        "sender": {
          "type": "string",
          "title": "email sender's id"
        },
        "receiver": {
          "type": "string",
          "title": "email receiver's id"
        },
        "message": {
          "type": "string",
          "title": "message details"
        },
        "sender_receiver": {
          "type": "string",
          "title": "to identify whether the individual is a 'SENDER' or a 'RECEIVER'"
        },
        "sender_email": {
          "type": "string",
          "title": "sender's email"
        },
        "receiver_email": {
          "type": "string",
          "title": "receiver's email"
        },
        "cc": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fmEmailCC"
          },
          "title": "cc of the email"
        }
      }
    },
    "fmCreateEmailResponse": {
      "type": "object",
      "properties": {
        "email_id": {
          "type": "string",
          "title": "unique id of the created email"
        }
      }
    },
    "fmCreateEmployeeCheckRequest": {
      "type": "object",
      "properties": {
        "employee_id": {
          "type": "string",
          "title": "id of employee who is about to check in or check out"
        },
        "organization_id": {
          "type": "string",
          "title": "organization id of the employee"
        },
        "check_type": {
          "type": "string",
          "title": "type of check i.e. check in or check out"
        },
        "reason": {
          "type": "string",
          "title": "reason"
        },
        "checked_details": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "checked details ids"
        }
      }
    },
    "fmCreateEmployeeCheckResponse": {
      "type": "object",
      "properties": {
        "employee_check_id": {
          "type": "string",
          "title": "employee check id"
        }
      }
    },
    "fmCreateEmployeeRequest": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "title": "title of employee, EG: Mr, Mrs, Miss"
        },
        "first_name": {
          "type": "string",
          "title": "First Name of the employee"
        },
        "middle_name": {
          "type": "string",
          "title": "Middle name of the employee"
        },
        "last_name": {
          "type": "string",
          "title": "Last name of the employee"
        },
        "contact_detail": {
          "$ref": "#/definitions/fmContactDetail",
          "title": "contact details of the employee"
        },
        "organization_id": {
          "type": "string",
          "title": "organization the employee belongs to"
        },
        "employee_code": {
          "type": "string",
          "format": "int64",
          "title": "unique employee code for organization"
        },
        "employee_info": {
          "$ref": "#/definitions/fmEmployeeInformationForUpsert",
          "title": "Employee information"
        },
        "training_info": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fmTrainingEmployeeInfo"
          },
          "title": "trainig Information filled by the organization"
        },
        "history_info": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fmEmploymentHistoryInfo"
          },
          "title": "employment history Information filled by the organization"
        },
        "reference_employee_info": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fmReferenceEmployeeInfo"
          },
          "title": "Reference Information about the employee"
        },
        "criminal_conv_emp_info": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fmCriminalConvictionEmployeeInfo"
          },
          "title": "Criminal Conviction Information about the employee"
        },
        "next_of_keen_employee_info": {
          "$ref": "#/definitions/fmNextOfKeenEmployeeInfo",
          "title": "Next of kee Information about the employee"
        },
        "education_employee_info": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fmEducationEmployeeInformation"
          },
          "title": "education Information about the employee"
        }
      },
      "title": "request to create new employee"
    },
    "fmCreateEmployeeResponse": {
      "type": "object",
      "properties": {
        "employee_id": {
          "type": "string",
          "title": "unique id of the employee"
        }
      },
      "title": "response returned when reating employee"
    },
    "fmCreateEmployeeTrainingRequest": {
      "type": "object",
      "properties": {
        "trainee_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Unique ids of trainee employees who are to be assigned to the training program"
        },
        "trainer_id": {
          "type": "string",
          "title": "Unique id of trainer employee"
        },
        "training_subject": {
          "type": "string",
          "title": "Subject of the training"
        },
        "training_date": {
          "type": "string",
          "format": "date-time",
          "title": "Date of the training"
        },
        "attachment_files": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Attachment files regarding training"
        },
        "organization_id": {
          "type": "string",
          "title": "id of the organization"
        }
      },
      "title": "Request to create employee training"
    },
    "fmCreateEmployeeTrainingResponse": {
      "type": "object",
      "properties": {
        "employee_training_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Unique ids of the training for employees"
        }
      },
      "title": "Response for creating employee training"
    },
    "fmCreateFeedbackRequest": {
      "type": "object",
      "properties": {
        "employee_id": {
          "type": "string",
          "title": "unique id of employee"
        },
        "client_id": {
          "type": "string",
          "title": "unique id of client who is providing feedback"
        },
        "sector": {
          "type": "string",
          "title": "sector of employee"
        },
        "department_id": {
          "type": "string",
          "title": "unique id of department"
        },
        "rating": {
          "type": "string",
          "title": "provided rating"
        },
        "feedback_comments": {
          "type": "string",
          "title": "provided feedback comments"
        },
        "organization_id": {
          "type": "string",
          "title": "organization id"
        }
      }
    },
    "fmCreateFeedbackResponse": {
      "type": "object",
      "properties": {
        "feedback_id": {
          "type": "string",
          "title": "unique id of feedback"
        }
      }
    },
    "fmCreateInventoryCategoryRequest": {
      "type": "object",
      "properties": {
        "organization_id": {
          "type": "string",
          "title": "Organization id for the category"
        },
        "category_name": {
          "type": "string",
          "title": "Category name"
        },
        "category_detail": {
          "type": "string",
          "title": "Category detail"
        },
        "parent_category_id": {
          "type": "string",
          "title": "Parent category id"
        },
        "status": {
          "type": "string",
          "title": "Status"
        }
      },
      "title": "Request to create a new inventory item category"
    },
    "fmCreateInventoryCategoryResponse": {
      "type": "object",
      "properties": {
        "inventory_category_id": {
          "type": "string",
          "title": "Inventory category id"
        }
      },
      "title": "Response for successful creation of a inventory category"
    },
    "fmCreateInventoryItemRequest": {
      "type": "object",
      "properties": {
        "organization_id": {
          "type": "string",
          "title": "Organization id for the item"
        },
        "item_name": {
          "type": "string",
          "title": "Item name"
        },
        "category_id": {
          "type": "string",
          "title": "Item Category"
        },
        "supplier_id": {
          "type": "string",
          "title": "Supplier id"
        },
        "unit_price": {
          "type": "number",
          "format": "float",
          "title": "Unit price"
        },
        "item_code": {
          "type": "string",
          "title": "Item code"
        },
        "comment": {
          "type": "string",
          "title": "Comment on the item"
        }
      },
      "title": "Request to create inventory item"
    },
    "fmCreateInventoryItemResponse": {
      "type": "object",
      "properties": {
        "inventory_item_id": {
          "type": "string",
          "title": "Inventory item id"
        }
      },
      "title": "Response after successfull creation of inventory item"
    },
    "fmCreateIssueRequest": {
      "type": "object",
      "properties": {
        "client_id": {
          "type": "string",
          "title": "id of the client"
        },
        "organization_id": {
          "type": "string",
          "title": "id of the organization"
        },
        "details": {
          "type": "string",
          "title": "details of the issue"
        },
        "raised_by": {
          "type": "string",
          "title": "id of the user raising the issue"
        },
        "employee_id": {
          "type": "string",
          "title": "id of the employee"
        },
        "assigned_to": {
          "type": "string",
          "title": "id of the user responsible for solving the issue"
        },
        "action_plan": {
          "type": "string",
          "title": "action plan of the issue"
        },
        "deadline": {
          "type": "string",
          "format": "date-time",
          "title": "deadline of solving the issue"
        },
        "issue_type": {
          "type": "string",
          "title": "type of the issue : CLIENT, EMPLOYEE, OFFICE, OTHER, NA"
        }
      },
      "title": "Create issue request"
    },
    "fmCreateIssueResponse": {
      "type": "object",
      "properties": {
        "issue_id": {
          "type": "string",
          "title": "unique id of the issue created"
        }
      },
      "title": "Create issue response"
    },
    "fmCreateJobTypeRequest": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "organization_id": {
          "type": "string"
        }
      }
    },
    "fmCreateJobTypeResponse": {
      "type": "object",
      "properties": {
        "job_type_id": {
          "type": "string"
        }
      }
    },
    "fmCreateMarketingCampaignRequest": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "title": "title of the campaign"
        },
        "organization_id": {
          "type": "string",
          "title": "organization id"
        },
        "email_date": {
          "type": "string",
          "format": "date-time",
          "title": "date on which the email is sent"
        },
        "subject": {
          "type": "string",
          "title": "subject of the email"
        },
        "sender": {
          "type": "string",
          "title": "email sender's id"
        },
        "receiver": {
          "type": "string",
          "title": "email receiver's id"
        },
        "message": {
          "type": "string",
          "title": "message details"
        },
        "sender_receiver": {
          "type": "string",
          "title": "to identify whether the individual is a 'SENDER' or a 'RECEIVER'"
        },
        "sender_email": {
          "type": "string",
          "title": "sender's email"
        },
        "receiver_email": {
          "type": "string",
          "title": "receiver's email"
        },
        "cc": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fmEmailCC"
          },
          "title": "cc of the email"
        }
      }
    },
    "fmCreateMarketingCampaignResponse": {
      "type": "object",
      "properties": {
        "marketing_campaign_id": {
          "type": "string",
          "title": "unique id of the created marketing-campaign"
        }
      }
    },
    "fmCreateMeetingRequest": {
      "type": "object",
      "properties": {
        "organization_id": {
          "type": "string",
          "title": "id of the organization this meeting belongs to"
        },
        "meeting_date": {
          "type": "string",
          "format": "date-time",
          "title": "date of the meeting"
        },
        "estimated_time": {
          "type": "string",
          "title": "estimated time of the meeting"
        },
        "department_id": {
          "type": "string",
          "title": "id of department of generated meeting"
        },
        "employees_info": {
          "$ref": "#/definitions/fmEmployees",
          "title": "ids of employees"
        },
        "attendee_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "ids of employees who attend the  meetings"
        },
        "agendas": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fmAgenda"
          },
          "title": "information of agenda of the meetong"
        },
        "client_id": {
          "type": "string",
          "title": "required if meeting is for client else it is optional"
        },
        "title": {
          "type": "string",
          "title": "title of the meeting"
        },
        "location": {
          "type": "string",
          "title": "location of meeting"
        },
        "meeting_type": {
          "type": "string",
          "title": "type of meeting i.e.\"OPEN\" or \"CLOSE\""
        }
      },
      "title": "Meeting creation request"
    },
    "fmCreateMeetingResponse": {
      "type": "object",
      "properties": {
        "meeting_id": {
          "type": "string"
        }
      },
      "title": "Response for create meeting requests"
    },
    "fmCreateMobilizationTemplateRequest": {
      "type": "object",
      "properties": {
        "parent_mobilization_id": {
          "type": "string",
          "title": "id of the associated parent mobilization"
        },
        "organization_id": {
          "type": "string",
          "title": "id of the associated organization"
        },
        "name": {
          "type": "string",
          "title": "name of the mobilization template"
        },
        "tasks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fmMobilizationTasks"
          },
          "title": "tasks of the template"
        }
      }
    },
    "fmCreateMobilizationTemplateResponse": {
      "type": "object",
      "properties": {
        "mobilization_template_id": {
          "type": "string",
          "title": "unique id of the created mobilization template"
        }
      }
    },
    "fmCreateNewEmployeeRequest": {
      "type": "object",
      "properties": {
        "organization_code": {
          "type": "string",
          "title": "code of the organization"
        },
        "title": {
          "type": "string",
          "title": "title of employee, EG: Mr, Mrs, Miss"
        },
        "first_name": {
          "type": "string",
          "title": "First Name of the employee"
        },
        "middle_name": {
          "type": "string",
          "title": "Middle name of the employee"
        },
        "last_name": {
          "type": "string",
          "title": "Last name of the employee"
        },
        "contact_detail": {
          "$ref": "#/definitions/fmContactDetail",
          "title": "contact details of the employee"
        },
        "national_insurance_number": {
          "type": "string",
          "title": "National insurance number"
        },
        "job_description": {
          "type": "string",
          "title": "job description"
        },
        "reference": {
          "type": "string",
          "title": "reference"
        }
      }
    },
    "fmCreateNewEmployeeResponse": {
      "type": "object",
      "properties": {
        "employee_id": {
          "type": "string",
          "title": "unique id of the created new employee"
        }
      }
    },
    "fmCreateNewMobilizationRequest": {
      "type": "object",
      "properties": {
        "client_id": {
          "type": "string",
          "title": "id of the client"
        },
        "organization_id": {
          "type": "string",
          "title": "id of the organization"
        },
        "owner": {
          "type": "string",
          "title": "owner : employee_id"
        },
        "status": {
          "type": "string",
          "title": "status of the mobilization"
        },
        "start_date": {
          "type": "string",
          "format": "date-time",
          "title": "start date of the mobilization"
        },
        "end_date": {
          "type": "string",
          "format": "date-time",
          "title": "end date of the mobilization"
        }
      }
    },
    "fmCreateNewMobilizationResponse": {
      "type": "object",
      "properties": {
        "new_mobilization_id": {
          "type": "string",
          "title": "unique id of the created mobilization"
        }
      }
    },
    "fmCreateNewStageRequest": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "title": "title of the stage"
        },
        "description": {
          "type": "string",
          "title": "description of the stage"
        },
        "organization_id": {
          "type": "string",
          "title": "organization id to which the stage belongs"
        }
      }
    },
    "fmCreateNewStageResponse": {
      "type": "object",
      "properties": {
        "stage_id": {
          "type": "string",
          "title": "id of the created stage"
        }
      }
    },
    "fmCreateNoteRequest": {
      "type": "object",
      "properties": {
        "organization_id": {
          "type": "string",
          "title": "id of the organization this note belongs to"
        },
        "created_by": {
          "type": "string",
          "title": "id of the note creater"
        },
        "for": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "notes for"
        },
        "notes": {
          "type": "string",
          "title": "notes detail"
        },
        "note_date": {
          "type": "string",
          "format": "date-time",
          "title": "note date"
        },
        "client_id": {
          "type": "string",
          "title": "unique id of the client if note_type is 'CLIENT'"
        },
        "employee_id": {
          "type": "string",
          "title": "id of the employee if note_type is 'EMPLOYEE'"
        },
        "note_type": {
          "type": "string",
          "title": "type of the note : CLIENT, EMPLOYEE, OFFICE, OTHER, NA"
        }
      },
      "title": "Create note request"
    },
    "fmCreateNoteResponse": {
      "type": "object",
      "properties": {
        "note_id": {
          "type": "string",
          "title": "unique id of the created note"
        }
      },
      "title": "Create note response"
    },
    "fmCreateOpeningClosingCheckRequest": {
      "type": "object",
      "properties": {
        "check_type": {
          "type": "string",
          "title": "check whether it is a check_in or check_out"
        },
        "organization_id": {
          "type": "string",
          "title": "organization id"
        },
        "type": {
          "type": "string",
          "title": "type of opening/closing: GLOBAL, EMPLOYEE, GROUP"
        },
        "employee_id": {
          "type": "string",
          "title": "unique id of employee (optional / required for type=EMPLOYEE)"
        },
        "employee_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "list of employees (optional / required for type=GROUP)"
        },
        "client_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "unique id of clients (optional)"
        },
        "designation_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "unique id of designations (optional)"
        },
        "department_id": {
          "type": "string",
          "title": "unique id of department (optional)"
        },
        "designation_id": {
          "type": "string",
          "title": "unique id of designation (optional)"
        },
        "display_date": {
          "type": "string",
          "format": "date-time",
          "title": "Date on which opening/closing check is shown (required if is_recurrence is false)"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "List of instructions"
        },
        "is_recurrence": {
          "type": "boolean",
          "title": "wether opening/closing check is recurrence"
        },
        "recurrence": {
          "$ref": "#/definitions/fmUpsertRecurrence",
          "title": "details of recurrence"
        }
      }
    },
    "fmCreateOpeningClosingCheckResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "boolean",
          "title": "action response"
        }
      }
    },
    "fmCreateOrganizationRequest": {
      "type": "object",
      "properties": {
        "org_details": {
          "$ref": "#/definitions/CreateOrganizationRequestOrganizationDetails",
          "title": "details of the organization to be created"
        },
        "user_details": {
          "$ref": "#/definitions/CreateOrganizationRequestUserDetails",
          "title": "details of the user"
        }
      }
    },
    "fmCreateOrganizationResponse": {
      "type": "object",
      "properties": {
        "organization_id": {
          "type": "string",
          "title": "unique id of the organization"
        }
      },
      "title": "response when creating new organization"
    },
    "fmCreatePlannerRequest": {
      "type": "object",
      "properties": {
        "client_id": {
          "type": "string",
          "title": "id of the client"
        },
        "organization_id": {
          "type": "string",
          "title": "id of the organization"
        },
        "task_title": {
          "type": "string",
          "title": "title of the task"
        },
        "description": {
          "type": "string",
          "title": "description of the task"
        },
        "task_type": {
          "type": "string",
          "title": "type of task: Allowed [\"DOC\", \"VARIATION\", \"MOBILE\", \"OTHERS\", \"PERIODIC(REGULAR)\", \"PERIODIC(ONE OFF)\", \"PERIODIC(WINDOW)\", \"PERIODIC(ACCOMODATION)\"]"
        },
        "task_dates": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "date-time"
          },
          "title": "dates of the task"
        }
      }
    },
    "fmCreatePlannerResponse": {
      "type": "object",
      "properties": {
        "planner_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "unique ids of the planners created"
        }
      }
    },
    "fmCreateRegionRequest": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "title": "title of region"
        },
        "organization_id": {
          "type": "string",
          "title": "id of organization"
        },
        "regional_manager": {
          "type": "string",
          "title": "signle region manager"
        }
      }
    },
    "fmCreateReplyRequest": {
      "type": "object",
      "properties": {
        "employee_id": {
          "type": "string",
          "title": "the id of the employee who is replying to comment"
        },
        "comment_id": {
          "type": "string",
          "title": "id of the comment"
        },
        "comment": {
          "type": "string",
          "title": "the comment string"
        },
        "description": {
          "type": "string",
          "title": "description if you need it (optional)"
        }
      }
    },
    "fmCreateReplyResponse": {
      "type": "object",
      "properties": {
        "reply_id": {
          "type": "string",
          "title": "unique if of reply"
        }
      }
    },
    "fmCreateSectorRequest": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "organization_id": {
          "type": "string"
        }
      }
    },
    "fmCreateSectorResponse": {
      "type": "object",
      "properties": {
        "sector_id": {
          "type": "string"
        }
      }
    },
    "fmCreateStageRequest": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "title": "title of the stage"
        },
        "employee_id": {
          "type": "string",
          "title": "employee id"
        },
        "description": {
          "type": "string",
          "title": "description of the stage"
        },
        "deadline": {
          "type": "string",
          "format": "date-time",
          "title": "deadline of the stage"
        }
      }
    },
    "fmCreateSubAreaRequest": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "title": "title of sub area"
        },
        "organization_id": {
          "type": "string",
          "title": "organization of the sub area"
        },
        "area_id": {
          "type": "string",
          "title": "area that sub area belongs to"
        },
        "client_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "client ids"
        },
        "area_supervisors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "id of area supervisors (employee_id)"
        }
      }
    },
    "fmCreateTaskRequest": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "title": "title (name) of the task"
        },
        "description": {
          "type": "string",
          "title": "description of the task"
        },
        "client_id": {
          "type": "string",
          "title": "client the task is associated with. Optional"
        },
        "employee_id": {
          "type": "string",
          "title": "employee the task is assigned to"
        },
        "start_time": {
          "type": "string",
          "format": "date-time",
          "title": "task must start by at least this time. Start time is combination of\nappointment date and time"
        },
        "estimate_time": {
          "type": "string",
          "title": "the estimated time period to complete the task"
        },
        "organization_id": {
          "type": "string",
          "title": "the organization of the employee"
        },
        "is_variation": {
          "type": "boolean",
          "title": "flag to confirm if the task is variation or not"
        },
        "is_vary": {
          "type": "boolean",
          "title": "whether task is vary or not"
        },
        "is_break": {
          "type": "boolean",
          "title": "if break is true or false"
        },
        "break_type": {
          "type": "string",
          "title": "if break is paid or unpaid"
        },
        "is_recurrence": {
          "type": "boolean",
          "title": "whether task is recurrence"
        },
        "task_type": {
          "type": "string",
          "title": "type of task: Allowed [\"DOC\", \"VARIATION\", \"MOBILE\", \"OTHERS\", \"PERIODIC(REGULAR)\", \"PERIODIC(ONE OFF)\", \"PERIODIC(WINDOW)\", \"PERIODIC(ACCOMODATION)\"]"
        },
        "rate": {
          "type": "number",
          "format": "float",
          "title": "rate if task type is 'MOBILE' or 'OTHERS'"
        },
        "recurrence": {
          "$ref": "#/definitions/fmUpsertRecurrence",
          "title": "details of recurrence"
        }
      },
      "title": "Request to create task"
    },
    "fmCreateTaskResponse": {
      "type": "object",
      "properties": {
        "task_id": {
          "type": "string",
          "title": "unique id of the task"
        }
      },
      "title": "Response from create task"
    },
    "fmCreateTrainingTypeRequest": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "title": "title of the training type"
        },
        "description": {
          "type": "string",
          "title": "description regarding the type of training"
        },
        "organization_id": {
          "type": "string",
          "title": "organization id"
        },
        "frequency": {
          "type": "string",
          "title": "frequency"
        }
      }
    },
    "fmCreateTrainingTypeResponse": {
      "type": "object",
      "properties": {
        "training_type_id": {
          "type": "string",
          "title": "id of the created training type"
        }
      }
    },
    "fmCreateTransferRequest": {
      "type": "object",
      "properties": {
        "employee_id": {
          "type": "string",
          "title": "unique id of employee to transfer"
        },
        "department_id": {
          "type": "string",
          "title": "new department id"
        },
        "from_client_id": {
          "type": "string",
          "title": "unique id of client from which employee is transfered"
        },
        "to_client_id": {
          "type": "string",
          "title": "unique id of client to which employee is transfered"
        },
        "transfer_date": {
          "type": "string",
          "format": "date-time",
          "title": "effective date of transfer"
        },
        "transfer_reason": {
          "type": "string",
          "title": "reason of employee transfer"
        },
        "sector": {
          "type": "string",
          "title": "new sector"
        },
        "organization_id": {
          "type": "string",
          "title": "organization id"
        }
      }
    },
    "fmCreateTransferResponse": {
      "type": "object",
      "properties": {
        "transfer_id": {
          "type": "string",
          "title": "unique id of employee transfer"
        }
      }
    },
    "fmCreateTupeRequest": {
      "type": "object",
      "properties": {
        "client_id": {
          "type": "string",
          "title": "id of the client"
        },
        "organization_id": {
          "type": "string",
          "title": "id of the organization"
        },
        "job_detail": {
          "$ref": "#/definitions/fmJobDetails",
          "title": "details about the job"
        },
        "job_dates": {
          "$ref": "#/definitions/fmJobDates",
          "title": "details about job dates"
        },
        "age_range": {
          "type": "string",
          "title": "age range"
        },
        "holiday_entitlement_days": {
          "type": "integer",
          "format": "int32",
          "title": "number of holidays entitled"
        },
        "employee_notice_period": {
          "type": "string",
          "title": "notice period for employee"
        },
        "employer_notice_period": {
          "type": "string",
          "title": "notice period for employer"
        },
        "records_detail": {
          "$ref": "#/definitions/fmRecords",
          "title": "details about different kinds of records"
        },
        "pension_detail": {
          "$ref": "#/definitions/fmPensionDetails",
          "title": "details about pension"
        },
        "benefits_detail": {
          "$ref": "#/definitions/fmBenefits",
          "title": "details about benefits"
        }
      }
    },
    "fmCreateTupeResponse": {
      "type": "object",
      "properties": {
        "tupe_id": {
          "type": "string",
          "title": "unique id of the created tupe"
        }
      }
    },
    "fmCreateUserEmployeeRequest": {
      "type": "object",
      "properties": {
        "employee_id": {
          "type": "string",
          "title": "id of the employee"
        }
      }
    },
    "fmCreateUserEmployeeResponse": {
      "type": "object",
      "properties": {
        "user_employee_id": {
          "type": "string",
          "title": "unique id of the user-employee"
        }
      }
    },
    "fmCreateUserOnEmployeeCreateRequest": {
      "type": "object",
      "properties": {
        "organization_id": {
          "type": "string",
          "title": "id of organization"
        },
        "email": {
          "type": "string",
          "title": "email of user"
        },
        "name": {
          "type": "string",
          "title": "name of user"
        }
      }
    },
    "fmCreateUserOnEmployeeCreateResponse": {
      "type": "object",
      "properties": {
        "user_id": {
          "type": "string",
          "title": "id of user"
        }
      }
    },
    "fmCreateUserRequest": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "title": "username of the user"
        },
        "password": {
          "type": "string",
          "title": "this password is never stored in the server. the hash is calculated and\nstored in the pwd store"
        },
        "name": {
          "type": "string",
          "title": "Name of the user"
        }
      }
    },
    "fmCreateUserResponse": {
      "type": "object",
      "properties": {
        "user_id": {
          "type": "string",
          "title": "id of the created user"
        }
      },
      "title": "response for create user requests"
    },
    "fmCriminalConvictionEmployeeInfo": {
      "type": "object",
      "properties": {
        "is_subject_to_conditions": {
          "type": "boolean",
          "title": "yes or no"
        },
        "details": {
          "type": "string",
          "title": "details"
        },
        "signature": {
          "type": "string",
          "title": "signature file upload"
        },
        "signature_text": {
          "type": "string",
          "title": "signature text"
        },
        "have_prior_medical_condition": {
          "type": "boolean",
          "title": "have_prior_medical_condition of criminal conviction or not"
        },
        "condition_details": {
          "type": "string",
          "title": "prior_medical_condition details"
        },
        "is_disable": {
          "type": "boolean",
          "title": "is_disable"
        },
        "disable_details": {
          "type": "string",
          "title": "disablity details"
        },
        "adaptation_for_interview": {
          "type": "string",
          "title": "adaptation_for_interview"
        }
      },
      "title": "CriminalConviction employee information"
    },
    "fmDbsDetails": {
      "type": "object",
      "properties": {
        "dbs_number": {
          "type": "string",
          "title": "DBS number"
        },
        "dbs_start_date": {
          "type": "string",
          "format": "date-time",
          "title": "DBS start date"
        },
        "dbs_review_date": {
          "type": "string",
          "format": "date-time",
          "title": "DBS next review date"
        },
        "dbs_expiry_date": {
          "type": "string",
          "format": "date-time",
          "title": "DBS expiry date"
        }
      },
      "title": "Dbs details of employee"
    },
    "fmDeleteAgendaDecisionObjectionRequest": {
      "type": "object",
      "properties": {
        "meeting_id": {
          "type": "string",
          "title": "id of meeting"
        },
        "decision_objection_id": {
          "type": "string",
          "title": "id of objection of a decision"
        }
      }
    },
    "fmDeleteAgendaViewRequest": {
      "type": "object",
      "properties": {
        "meeting_id": {
          "type": "string",
          "title": "id of meeting"
        },
        "agenda_view_id": {
          "type": "string",
          "title": "id of agenda"
        }
      }
    },
    "fmDeleteAppointmentRequest": {
      "type": "object",
      "properties": {
        "appointment_id": {
          "type": "string",
          "title": "id of the appointment to be deleted"
        },
        "organization_id": {
          "type": "string",
          "title": "organization id to which the appointment belongs"
        }
      }
    },
    "fmDeleteAreaRequest": {
      "type": "object",
      "properties": {
        "area_id": {
          "type": "string",
          "title": "id of Area to be deleted"
        },
        "region_id": {
          "type": "string",
          "title": "region to which the area belongs"
        }
      }
    },
    "fmDeleteAreaResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "boolean",
          "title": "action response"
        }
      }
    },
    "fmDeleteBidPlannerStatusRequest": {
      "type": "object",
      "properties": {
        "bid_planner_status_id": {
          "type": "string",
          "title": "id of the bid planner status to be deleted"
        },
        "organization_id": {
          "type": "string",
          "title": "organization id"
        }
      }
    },
    "fmDeleteCRMMobilizationRequest": {
      "type": "object",
      "properties": {
        "crm_mobilization_id": {
          "type": "string",
          "title": "id of the crm mobilization to be deleted"
        },
        "organization_id": {
          "type": "string",
          "title": "id of the organization"
        }
      }
    },
    "fmDeleteCRMMobilizationTaskDateRequest": {
      "type": "object",
      "properties": {
        "crm_task_date_id": {
          "type": "string",
          "title": "unique id of the crm-task-date to be deleted"
        },
        "organization_id": {
          "type": "string",
          "title": "id of the organization"
        }
      }
    },
    "fmDeleteCRMMobilizationTaskRequest": {
      "type": "object",
      "properties": {
        "crm_task_id": {
          "type": "string",
          "title": "id of the crm task to be deleted"
        },
        "organization_id": {
          "type": "string",
          "title": "id of the organization"
        }
      }
    },
    "fmDeleteCallRequest": {
      "type": "object",
      "properties": {
        "call_id": {
          "type": "string",
          "title": "id of the call to be deleted"
        },
        "client_id": {
          "type": "string",
          "title": "associated client id of the call to be deleted"
        }
      }
    },
    "fmDeleteCategoryQuestionRequest": {
      "type": "object",
      "properties": {
        "question_id": {
          "type": "string",
          "title": "id of the question that is to be deleted"
        },
        "category_id": {
          "type": "string",
          "title": "id of the category to which the question belongs"
        },
        "organization_id": {
          "type": "string",
          "title": "id of the organization"
        }
      }
    },
    "fmDeleteCategoryRequest": {
      "type": "object",
      "properties": {
        "category_id": {
          "type": "string",
          "title": "id of the category to be deleted"
        },
        "organization_id": {
          "type": "string",
          "title": "id of the organization to which the category belongs"
        }
      }
    },
    "fmDeleteClientAreaRequest": {
      "type": "object",
      "properties": {
        "client_id": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "client ids to be deleted"
        },
        "area": {
          "type": "string",
          "title": "area of the client"
        },
        "organization_id": {
          "type": "string",
          "title": "organization of the clients"
        }
      }
    },
    "fmDeleteClientRegionRequest": {
      "type": "object",
      "properties": {
        "client_id": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "client ids to be deleted"
        },
        "region": {
          "type": "string",
          "title": "region of the client"
        },
        "organization_id": {
          "type": "string",
          "title": "organization of the clients"
        }
      }
    },
    "fmDeleteCommentRequest": {
      "type": "object",
      "properties": {
        "comment_id": {
          "type": "string",
          "title": "the unique id of comment"
        },
        "organization_id": {
          "type": "string",
          "title": "id of the associated organization"
        }
      }
    },
    "fmDeleteCommentResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "boolean",
          "title": "the status of action"
        }
      }
    },
    "fmDeleteDepartmentRequest": {
      "type": "object",
      "properties": {
        "organization_id": {
          "type": "string",
          "title": "organization_id to which the department belongs to"
        },
        "department_id": {
          "type": "string",
          "title": "department_id of department to be deleted"
        }
      }
    },
    "fmDeleteDesignationRequest": {
      "type": "object",
      "properties": {
        "designation_id": {
          "type": "string",
          "title": "designation_id of designation to be deleted"
        },
        "department_id": {
          "type": "string",
          "title": "department_id to which the designation belongs to"
        },
        "organization_id": {
          "type": "string",
          "title": "organization_id to which the designation belongs to"
        }
      }
    },
    "fmDeleteEmailRequest": {
      "type": "object",
      "properties": {
        "email_id": {
          "type": "string",
          "title": "id of the email to be deleted"
        },
        "client_id": {
          "type": "string",
          "title": "id of the client"
        }
      }
    },
    "fmDeleteEmployeeTrainingRequest": {
      "type": "object",
      "properties": {
        "employee_training_id": {
          "type": "string",
          "title": "unique id of the employee training to be deleted"
        },
        "organization_id": {
          "type": "string",
          "title": "id of the organization"
        }
      }
    },
    "fmDeleteIssueRequest": {
      "type": "object",
      "properties": {
        "issue_id": {
          "type": "string",
          "title": "id of the issue to be deleted"
        },
        "organization_id": {
          "type": "string",
          "title": "id of the organization"
        }
      }
    },
    "fmDeleteMarketingCampaignRequest": {
      "type": "object",
      "properties": {
        "marketing_campaign_id": {
          "type": "string",
          "title": "id of the marketing-campaign to be deleted"
        },
        "organization_id": {
          "type": "string",
          "title": "organization id"
        }
      }
    },
    "fmDeleteMobilizationTemplateRequest": {
      "type": "object",
      "properties": {
        "mobilization_template_id": {
          "type": "string",
          "title": "id of the mobilization template to be deleted"
        },
        "organization_id": {
          "type": "string",
          "title": "organization id"
        }
      }
    },
    "fmDeleteNewMobilizationRequest": {
      "type": "object",
      "properties": {
        "new_mobilization_id": {
          "type": "string",
          "title": "id of the new-mobilization to be deleted"
        },
        "organization_id": {
          "type": "string",
          "title": "id of the organization"
        }
      }
    },
    "fmDeleteNewStageRequest": {
      "type": "object",
      "properties": {
        "stage_id": {
          "type": "string",
          "title": "id of the stage to be deleted"
        },
        "organization_id": {
          "type": "string",
          "title": "organization id of the stage"
        }
      }
    },
    "fmDeleteNoteRequest": {
      "type": "object",
      "properties": {
        "note_id": {
          "type": "string",
          "title": "id of the note to be deleted"
        },
        "organization_id": {
          "type": "string",
          "title": "id of the organization to which the note belongs"
        }
      }
    },
    "fmDeleteOpeningClosingCheckRequest": {
      "type": "object",
      "properties": {
        "check_id": {
          "type": "string",
          "title": "check in/out id to be deleted"
        },
        "organization_id": {
          "type": "string",
          "title": "organization id"
        }
      }
    },
    "fmDeleteParentMobilizationRequest": {
      "type": "object",
      "properties": {
        "parent_mobilization_id": {
          "type": "string",
          "title": "id of the parent mobilization to be deleted"
        },
        "organization_id": {
          "type": "string",
          "title": "id of the organization"
        }
      }
    },
    "fmDeletePlannerRequest": {
      "type": "object",
      "properties": {
        "planner_id": {
          "type": "string",
          "title": "id of the planner to be deleted"
        },
        "organization_id": {
          "type": "string",
          "title": "id of the associated organization"
        }
      }
    },
    "fmDeleteRegionRequest": {
      "type": "object",
      "properties": {
        "region_id": {
          "type": "string",
          "title": "id of Region to be deleted"
        },
        "organization_id": {
          "type": "string",
          "title": "organization to which the region belongs"
        }
      }
    },
    "fmDeleteRegionResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "boolean",
          "title": "action response"
        }
      }
    },
    "fmDeleteReplyRequest": {
      "type": "object",
      "properties": {
        "reply_id": {
          "type": "string",
          "title": "the unique id of comment"
        }
      }
    },
    "fmDeleteReplyResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "boolean",
          "title": "the status of action"
        }
      }
    },
    "fmDeleteSectorRequest": {
      "type": "object",
      "properties": {
        "sector_id": {
          "type": "string",
          "title": "sector_id of sector to be deleted"
        },
        "organization_id": {
          "type": "string",
          "title": "organization_id to which the sector belongs to"
        }
      }
    },
    "fmDeleteSubAreaRequest": {
      "type": "object",
      "properties": {
        "sub_area_id": {
          "type": "string",
          "title": "id of sub area to be deleted"
        },
        "area_id": {
          "type": "string",
          "title": "id of area to which the sub area belongs to"
        }
      }
    },
    "fmDeleteSubAreaResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "boolean",
          "title": "action response"
        }
      }
    },
    "fmDeleteTrainingTypeRequest": {
      "type": "object",
      "properties": {
        "organization_id": {
          "type": "string",
          "title": "organization_id to which the training type belongs"
        },
        "training_type_id": {
          "type": "string",
          "title": "training_type_id to be deleted"
        }
      }
    },
    "fmDeleteTupeRequest": {
      "type": "object",
      "properties": {
        "tupe_id": {
          "type": "string",
          "title": "id of the tupe to be deleted"
        },
        "organization_id": {
          "type": "string",
          "title": "id of the organization"
        }
      }
    },
    "fmDetailMeetingResponse": {
      "type": "object",
      "properties": {
        "meeting_id": {
          "type": "string",
          "title": "unique identifier of the meeting"
        },
        "dates": {
          "$ref": "#/definitions/fmMeetingDates",
          "title": "dates related to the meeting"
        },
        "estimated_time": {
          "type": "string",
          "title": "duration time of the meeting"
        },
        "title": {
          "type": "string",
          "title": "title of the meeting"
        },
        "employees_info": {
          "$ref": "#/definitions/fmEmployees",
          "title": "ids of employees"
        },
        "attendee_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "attendees of  meeting"
        },
        "department_id": {
          "type": "string",
          "title": "department id of the meeting"
        },
        "organization_id": {
          "type": "string",
          "title": "organization id of the meeting"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "title": "timestamp at which the meeting was created"
        },
        "location": {
          "type": "string",
          "title": "location of meeting"
        },
        "status": {
          "type": "string",
          "title": "status of meeting"
        },
        "agenda_details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fmAgendaDetail"
          },
          "title": "agendas of meeting along with views/decisions"
        },
        "client_id": {
          "type": "string",
          "title": "required if meeting is for client else it is optional"
        },
        "meeting_type": {
          "type": "string",
          "title": "type of meeting i.e.\"OPEN\" or \"CLOSE\""
        },
        "actual_time": {
          "type": "string",
          "title": "actual time of the meeting discussed"
        }
      }
    },
    "fmDisableUserEmployeeRequest": {
      "type": "object",
      "properties": {
        "user_id": {
          "type": "string",
          "title": "id of user"
        },
        "employee_id": {
          "type": "string",
          "title": "id of employee"
        },
        "organization_id": {
          "type": "string",
          "title": "id of the organization"
        }
      }
    },
    "fmDisableUserEmployeeResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "boolean",
          "title": "acknowledgement response"
        }
      }
    },
    "fmEditAgendaViewRequest": {
      "type": "object",
      "properties": {
        "agenda_view_id": {
          "type": "string",
          "title": "id of agenda-view"
        },
        "meeting_id": {
          "type": "string",
          "title": "id of meeting"
        },
        "agenda_id": {
          "type": "string",
          "title": "id of agenda"
        },
        "description": {
          "type": "string",
          "title": "details"
        }
      }
    },
    "fmEducationEmployeeInformation": {
      "type": "object",
      "properties": {
        "place_of_edu": {
          "type": "string",
          "title": "place of education of the employee"
        },
        "study_date": {
          "type": "string",
          "format": "date-time",
          "title": "education started date"
        },
        "qualification": {
          "type": "string",
          "title": "qualificatioin ofemp"
        },
        "date_obtained": {
          "type": "string",
          "format": "date-time",
          "title": "education graduated date"
        }
      },
      "title": "education information of emp"
    },
    "fmEmailCC": {
      "type": "object",
      "properties": {
        "receiver_email": {
          "type": "string",
          "title": "receiver's email"
        },
        "receiver_name": {
          "type": "string",
          "title": "receiver's name"
        },
        "client_id": {
          "type": "string",
          "title": "id of the client"
        }
      }
    },
    "fmEmployeeAddAttachmentRequest": {
      "type": "object",
      "properties": {
        "employee_id": {
          "type": "string",
          "title": "unique identifier of the employee"
        },
        "attachment_path": {
          "type": "string",
          "title": "path of attachment"
        },
        "attachment_type": {
          "type": "string",
          "title": "type of attachment"
        },
        "attachment_name": {
          "type": "string",
          "title": "name of attachment"
        },
        "uploaded_by": {
          "type": "string",
          "title": "uploaded by"
        }
      },
      "title": "Request payload to add attachment to an employee"
    },
    "fmEmployeeAddAttachmentResponse": {
      "type": "object",
      "properties": {
        "attachment_id": {
          "type": "string",
          "title": "unique identifier of the newly created attachment record"
        }
      },
      "title": "Success response payload after adding attachment to an employee"
    },
    "fmEmployeeBankAccountDetails": {
      "type": "object",
      "properties": {
        "bank_name": {
          "type": "string",
          "title": "Name of the bank"
        },
        "branch_name": {
          "type": "string",
          "title": "Branch name"
        },
        "account_number": {
          "type": "string",
          "title": "Account number"
        },
        "s_code": {
          "type": "string",
          "title": "some code"
        },
        "account_holder_name": {
          "type": "string",
          "title": "account holder name"
        },
        "signature": {
          "type": "string",
          "title": "signature photo url"
        },
        "signature_text": {
          "type": "string",
          "title": "signature_text"
        }
      },
      "title": "Employee Bank accounts details collection"
    },
    "fmEmployeeCheckInfo": {
      "type": "object",
      "properties": {
        "employee_id": {
          "type": "string",
          "title": "id of employee"
        },
        "organization_id": {
          "type": "string",
          "title": "organization id of the employee"
        },
        "check_type": {
          "type": "string",
          "title": "type of check"
        },
        "date": {
          "type": "string",
          "format": "date-time",
          "title": "date for check ins and check outs"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fmGlobalCheckDetail"
          },
          "title": "employee specific instructions"
        },
        "reason": {
          "type": "string",
          "title": "reason"
        },
        "check_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "check_ids"
        }
      },
      "title": "Employee Check Info Definition"
    },
    "fmEmployeeConfidentialDetailResponse": {
      "type": "object",
      "properties": {
        "employee_id": {
          "type": "string",
          "title": "id of the employee"
        },
        "confidential_details": {
          "$ref": "#/definitions/EmployeeConfidentialDetailResponseConfidentialDetails",
          "title": "required confidential details"
        }
      },
      "title": "Response for employee's confidential details"
    },
    "fmEmployeeDeleteAttachmentRequest": {
      "type": "object",
      "properties": {
        "attachment_id": {
          "type": "string",
          "title": "unique identifier for an attachment"
        },
        "employee_id": {
          "type": "string",
          "title": "unique identifier for an employee"
        }
      },
      "title": "Request payload for deleting attachment of an employee"
    },
    "fmEmployeeDeleteAttachmentResponse": {
      "type": "object",
      "properties": {
        "attachment_id": {
          "type": "string"
        }
      },
      "title": "Success response after deleting an attachment of an employee"
    },
    "fmEmployeeDetailResponse": {
      "type": "object",
      "properties": {
        "employee_id": {
          "type": "string",
          "title": "unique identifier of the employee"
        },
        "title": {
          "type": "string",
          "title": "title of employee"
        },
        "first_name": {
          "type": "string",
          "title": "first name of the employee"
        },
        "middle_name": {
          "type": "string",
          "title": "middle name of the employee"
        },
        "last_name": {
          "type": "string",
          "title": "last name of the employee"
        },
        "contact_detail": {
          "$ref": "#/definitions/fmContactDetail",
          "title": "contact detail of the employee"
        },
        "organization_id": {
          "type": "string",
          "title": "organization id the employee belongs to"
        },
        "created_date": {
          "type": "string",
          "format": "date-time",
          "title": "time the employee was created at"
        },
        "activated_at": {
          "type": "string",
          "format": "date-time",
          "title": "Activated date"
        },
        "employee_info": {
          "$ref": "#/definitions/fmEmployeeInformationForListing",
          "title": "Employee information"
        },
        "confidential_employee_info": {
          "$ref": "#/definitions/fmConfidentialEmployeeInfo",
          "title": "Confidential Information about the employee"
        },
        "training_info": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fmTrainingEmployeeInfo"
          },
          "title": "trainig Information filled by the organization"
        },
        "history_info": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fmEmploymentHistoryInfo"
          },
          "title": "employment history Information filled by the organization"
        },
        "reference_employee_info": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fmReferenceEmployeeInfo"
          },
          "title": "Reference Information about the employee"
        },
        "criminal_conv_emp_info": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fmCriminalConvictionEmployeeInfo"
          },
          "title": "Criminal Conviction Information about the employee"
        },
        "next_of_keen_employee_info": {
          "$ref": "#/definitions/fmNextOfKeenEmployeeInfo",
          "title": "Next of kee Information about the employee"
        },
        "education_employee_info": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fmEducationEmployeeInformation"
          },
          "title": "education Information about the employee"
        },
        "status": {
          "type": "string",
          "title": "fetch employees of this status"
        },
        "organization_admin": {
          "type": "boolean",
          "title": "employee is org admin"
        },
        "job_description": {
          "type": "string",
          "title": "job description"
        },
        "reference": {
          "type": "string",
          "title": "reference"
        }
      },
      "title": "Response for employee detail"
    },
    "fmEmployeeInformationForListing": {
      "type": "object",
      "properties": {
        "general": {
          "$ref": "#/definitions/fmGeneralEmployeeInformation",
          "title": "general information of the employee"
        },
        "official": {
          "$ref": "#/definitions/fmOfficialEmployeeInformationForListing",
          "title": "official information of the employee"
        },
        "hm_revenue_details": {
          "$ref": "#/definitions/fmHmRevenueDetails",
          "title": "HM revenue information"
        }
      },
      "title": "Employee information for list, detail endpoints"
    },
    "fmEmployeeInformationForUpsert": {
      "type": "object",
      "properties": {
        "general": {
          "$ref": "#/definitions/fmGeneralEmployeeInformation",
          "title": "general information of the employee"
        },
        "official": {
          "$ref": "#/definitions/fmOfficialEmployeeInformationForUpsert",
          "title": "official information of the employee"
        },
        "hm_revenue_details": {
          "$ref": "#/definitions/fmHmRevenueDetails",
          "title": "HM revenue information"
        }
      },
      "title": "Employee information for upsert(create/update) endpoints"
    },
    "fmEmployeeLeaverResponse": {
      "type": "object",
      "properties": {
        "leave_id": {
          "type": "string",
          "title": "unique id of the leave"
        },
        "client_id": {
          "type": "string",
          "title": "fetch leaver employees this client_id belongs to"
        },
        "employee_id": {
          "type": "string",
          "title": "unique id of employee"
        },
        "organization_id": {
          "type": "string",
          "title": "fetch leaver employees this organization_id belongs to"
        },
        "leave_from_date": {
          "type": "string",
          "format": "date-time",
          "title": "Leave from date"
        },
        "leave_to_date": {
          "type": "string",
          "format": "date-time",
          "title": "Leave upto date"
        },
        "status": {
          "type": "string",
          "title": "Status of the leave request"
        },
        "leave_type": {
          "type": "string",
          "title": "leave type"
        },
        "leave_reason": {
          "type": "string",
          "title": "leave reason"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "title": "The timestamp at which leave record was created"
        }
      }
    },
    "fmEmployeeListAttachmentResponse": {
      "type": "object",
      "properties": {
        "employee_id": {
          "type": "string",
          "title": "unique identifier of the employee"
        },
        "attachments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EmployeeListAttachmentResponseEmployeeAttachmentPayload"
          },
          "title": "list of attachments"
        }
      },
      "title": "Response payload for attachment list request"
    },
    "fmEmployees": {
      "type": "object",
      "properties": {
        "raised_by": {
          "type": "string",
          "title": "id of employee who raised the meeting"
        },
        "minutes_by": {
          "type": "string",
          "title": "minutes_by : employee_id"
        },
        "cheered_by": {
          "type": "string",
          "title": "cheered_by : employee_id"
        },
        "created_by": {
          "type": "string",
          "title": "id of employee who created the meeting"
        },
        "proposed_by": {
          "type": "string",
          "title": "proposed by : employee id"
        },
        "second_by": {
          "type": "string",
          "title": "second by : employee id"
        }
      }
    },
    "fmEmployeesDetails": {
      "type": "object",
      "properties": {
        "employee_id": {
          "type": "string",
          "title": "unique id of the employee"
        },
        "organization_id": {
          "type": "string",
          "title": "id of the organization the employee belongs to"
        },
        "first_name": {
          "type": "string",
          "title": "first name of the employee"
        },
        "middle_name": {
          "type": "string",
          "title": "middle name of the employee (if exists)"
        },
        "last_name": {
          "type": "string",
          "title": "last/family name of the employee"
        },
        "contact_detail": {
          "$ref": "#/definitions/fmContactDetail",
          "title": "contact details of the employee"
        },
        "created_date": {
          "type": "string",
          "format": "date-time",
          "title": "time the employee was created at"
        },
        "user_employee_details": {
          "$ref": "#/definitions/fmUserEmployeeDetails",
          "title": "user-employee details"
        }
      }
    },
    "fmEmploymentHistoryInfo": {
      "type": "object",
      "properties": {
        "recent_employer": {
          "type": "string",
          "title": "recent employer name"
        },
        "position": {
          "type": "string",
          "title": "position at previous job"
        },
        "contact_name": {
          "type": "string",
          "title": "contact name at recent employment post"
        },
        "contact_person_number": {
          "type": "string",
          "title": "contact person phone number at recent employment post"
        },
        "contact_person_email": {
          "type": "string",
          "title": "contact person email at recent employment post"
        },
        "is_able_to_contact": {
          "type": "string",
          "title": "can the person be able to contact"
        }
      },
      "title": "history of employment of employee information"
    },
    "fmEnableUserEmployeeRequest": {
      "type": "object",
      "properties": {
        "user_id": {
          "type": "string",
          "title": "id of user"
        },
        "employee_id": {
          "type": "string",
          "title": "id of employee"
        },
        "organization_id": {
          "type": "string",
          "title": "id of the organization"
        }
      }
    },
    "fmEnableUserEmployeeResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "boolean",
          "title": "acknowledgement response"
        }
      }
    },
    "fmFaqData": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "title": "key"
        },
        "value": {
          "type": "string",
          "title": "value"
        }
      }
    },
    "fmFeedbackResponse": {
      "type": "object",
      "properties": {
        "employee_id": {
          "type": "string",
          "title": "unique id of employee"
        },
        "client_id": {
          "type": "string",
          "title": "unique id of client who is providing feedback"
        },
        "sector": {
          "type": "string",
          "title": "sector of employee"
        },
        "department_id": {
          "type": "string",
          "title": "unique id of department"
        },
        "rating": {
          "type": "string",
          "title": "provided rating"
        },
        "feedback_comments": {
          "type": "string",
          "title": "provided feedback comments"
        },
        "organization_id": {
          "type": "string",
          "title": "organization id"
        },
        "feedback_id": {
          "type": "string",
          "title": "unique id of feedback"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "title": "transfer data creation time"
        }
      }
    },
    "fmForgotPasswordRequest": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "title": "email id of user"
        }
      }
    },
    "fmForgotPasswordResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "title": "acknowlege"
        }
      }
    },
    "fmGeneralEmployeeInformation": {
      "type": "object",
      "properties": {
        "region": {
          "type": "string",
          "title": "Region of the employee"
        },
        "area": {
          "type": "string",
          "title": "Area of the employee"
        },
        "profile_picture": {
          "type": "string",
          "title": "profile picture"
        },
        "photo_id": {
          "type": "string",
          "title": "photo for id card"
        }
      },
      "title": "General employee information"
    },
    "fmGetClientEmployeeIdsByEmployeeResponse": {
      "type": "object",
      "properties": {
        "client_employee_id": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Array of client_employee_ids"
        }
      },
      "title": "Response containing list of client_employee_ids"
    },
    "fmGetClientIdsByEmployeeResponse": {
      "type": "object",
      "properties": {
        "client_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Array of client_employee_ids"
        }
      },
      "title": "Response containing list of client_ids"
    },
    "fmGetContractedHoursByClientResponse": {
      "type": "object",
      "properties": {
        "employees_contracted_hours": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fmGetContractedHoursResponse"
          }
        }
      }
    },
    "fmGetContractedHoursByEmployeeResponse": {
      "type": "object",
      "properties": {
        "clients_contracted_hours": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fmGetContractedHoursResponse"
          }
        }
      }
    },
    "fmGetContractedHoursResponse": {
      "type": "object",
      "properties": {
        "client_employee_id": {
          "type": "string",
          "title": "unique id of client employee relation"
        },
        "client_id": {
          "type": "string",
          "title": "unique id of client"
        },
        "employee_id": {
          "type": "string",
          "title": "unique id of employee"
        },
        "department_id": {
          "type": "string",
          "title": "department of employee"
        },
        "designation": {
          "type": "string",
          "title": "designation of employee in the client"
        },
        "shift_contracted_day_hours": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fmShiftContractedDayHours"
          },
          "title": "contracted hours for the day of the week"
        },
        "start_date": {
          "type": "string",
          "format": "date-time",
          "title": "contract start date"
        },
        "end_date": {
          "type": "string",
          "format": "date-time",
          "title": "contract end date"
        },
        "is_head_office": {
          "type": "boolean",
          "title": "is employee from head office"
        },
        "allow_all_clients": {
          "type": "boolean",
          "title": "allow access to all client"
        },
        "allowed_client_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "list of allowed clients"
        }
      }
    },
    "fmGetEmployeeCheckResponse": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fmEmployeeCheckInfo"
          },
          "title": "result of checkIn and CheckOut"
        }
      }
    },
    "fmGetEmployeeIdsByClientIdResponse": {
      "type": "object",
      "properties": {
        "employee_list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GetEmployeeIdsByClientIdResponseEmployeeListData"
          },
          "title": "List of employees"
        }
      },
      "title": "Response containing employee_ids"
    },
    "fmGetEmployeeTrainingResponse": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GetEmployeeTrainingResponseEmployeeTrainingResponse"
          }
        }
      },
      "title": "Response for get employee trainings"
    },
    "fmGetGlobalDescriptionResponse": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/GetGlobalDescriptionResponseGlobalDescriptionDetails",
          "title": "Global Description details"
        }
      }
    },
    "fmGetOrganizationCodeResponse": {
      "type": "object",
      "properties": {
        "organization_id": {
          "type": "string",
          "title": "id of the organization"
        },
        "organization_code": {
          "type": "string",
          "title": "code of the requested organization"
        }
      }
    },
    "fmGetTargetTasksResponse": {
      "type": "object",
      "properties": {
        "client_employee_id": {
          "type": "string",
          "title": "unique identifier for the client employee relation"
        },
        "start_date": {
          "type": "string",
          "format": "date-time",
          "title": "start date for target tasks"
        },
        "end_date": {
          "type": "string",
          "format": "date-time",
          "title": "end date for target tasks"
        },
        "weekly_target_tasks": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "int64"
          },
          "title": "The target tasks for the 7 days"
        }
      },
      "title": "Response for getting target task of an employee for a client"
    },
    "fmGetUserListFromRoleResponse": {
      "type": "object",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fmUserData"
          },
          "title": "list of users with their roles and scopes"
        }
      }
    },
    "fmGetUserListRequest": {
      "type": "object",
      "properties": {
        "organization_id": {
          "type": "string",
          "title": "id of organization"
        },
        "employee_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "employeee ids"
        }
      }
    },
    "fmGetUserListResponse": {
      "type": "object",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fmUserData"
          },
          "title": "list of users with their roles and scopes"
        }
      }
    },
    "fmGlobalCheckDetail": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "unique id of global check detail"
        },
        "detail": {
          "type": "string",
          "title": "instruction"
        }
      }
    },
    "fmHmRevenueDetails": {
      "type": "object",
      "properties": {
        "full_name": {
          "type": "string",
          "title": "declaration full name"
        },
        "declaration_date": {
          "type": "string",
          "title": "declaration date"
        },
        "employment_start_date": {
          "type": "string",
          "title": "employement start date"
        },
        "gender": {
          "type": "string",
          "title": "gender"
        },
        "employment_statement": {
          "type": "string",
          "title": "employement statement"
        },
        "student_loan_faq": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fmFaqData"
          },
          "title": "student loan questions"
        },
        "postgraduate_loan_faq": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fmFaqData"
          },
          "title": "post graduate loan question"
        },
        "signature": {
          "type": "string",
          "title": "signatute file upload"
        },
        "signature_text": {
          "type": "string",
          "title": "signature: full_name"
        }
      }
    },
    "fmHourlyRateInfo": {
      "type": "object",
      "properties": {
        "weekdays_rate": {
          "type": "string",
          "title": "weekdays_rate details"
        },
        "weekend_rate": {
          "type": "string",
          "title": "weekend_rate details"
        },
        "overtime_rate": {
          "type": "string",
          "title": "overtime_rate details"
        }
      },
      "title": "Hourly rate of Employee information"
    },
    "fmIssueResponse": {
      "type": "object",
      "properties": {
        "issue_id": {
          "type": "string",
          "title": "unique id of the issue"
        },
        "assigned_to": {
          "type": "string",
          "title": "id of the user responsible for solving the issue"
        },
        "details": {
          "type": "string",
          "title": "details of the isssue"
        },
        "deadline": {
          "type": "string",
          "format": "date-time",
          "title": "deadline of solving the issue"
        },
        "organization_id": {
          "type": "string",
          "title": "unique id of the organization"
        },
        "department_id": {
          "type": "string",
          "title": "unique id of the department"
        },
        "status": {
          "type": "string",
          "title": "status of the issue"
        },
        "resolved_at": {
          "type": "string",
          "format": "date-time",
          "title": "resolved date"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "title": "date of issue creation"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "title": "date of issue updated"
        },
        "raised_by": {
          "type": "string",
          "title": "id of the user raising the issue"
        },
        "client_id": {
          "type": "string",
          "title": "unique id of the client"
        },
        "subject": {
          "type": "string",
          "title": "subject of the issue"
        },
        "action_plan": {
          "type": "string",
          "title": "action plan of the issue"
        },
        "employee_id": {
          "type": "string",
          "title": "id of the employee"
        },
        "issue_type": {
          "type": "string",
          "title": "type of issue"
        }
      }
    },
    "fmJobDates": {
      "type": "object",
      "properties": {
        "job_start_date": {
          "type": "string",
          "format": "date-time",
          "title": "start date of the job"
        },
        "job_end_date": {
          "type": "string",
          "format": "date-time",
          "title": "end date of the job"
        }
      }
    },
    "fmJobDetails": {
      "type": "object",
      "properties": {
        "job_title": {
          "type": "string",
          "title": "title of the job"
        },
        "hours_per_week": {
          "type": "number",
          "format": "float",
          "title": "working hours per week"
        },
        "contract_working_weeks": {
          "type": "integer",
          "format": "int32",
          "title": "number of working weeks based on contract"
        },
        "hours_spent": {
          "type": "number",
          "format": "float",
          "title": "percentage of hours spent"
        },
        "hourly_pay_rate": {
          "type": "number",
          "format": "float",
          "title": "hourly pay rate"
        },
        "contract_type": {
          "type": "string",
          "title": "type of contract"
        },
        "type": {
          "type": "string",
          "title": "type"
        }
      }
    },
    "fmLeadClientDetail": {
      "type": "object",
      "properties": {
        "lead_status": {
          "type": "string",
          "title": "status of lead client : allowed \"ACTIVE\", \"INACTIVE\""
        },
        "lead_employees": {
          "type": "integer",
          "format": "int32",
          "title": "estimated employees required"
        },
        "lead_employee_hours": {
          "type": "number",
          "format": "float",
          "title": "estimated hours required"
        }
      },
      "title": "Lead client data for listing"
    },
    "fmLeadClientDetailUpsert": {
      "type": "object",
      "properties": {
        "lead_employees": {
          "type": "integer",
          "format": "int32",
          "title": "estimated employees required"
        },
        "lead_employee_hours": {
          "type": "number",
          "format": "float",
          "title": "estimated hours required"
        }
      },
      "title": "Lead Client data for upsert"
    },
    "fmLeadStatusChangeRequest": {
      "type": "object",
      "properties": {
        "client_id": {
          "type": "string",
          "title": "unique id of client"
        },
        "lead_status": {
          "type": "string",
          "title": "status of lead client: Allowed ACTIVE,INACTIVE"
        }
      }
    },
    "fmLicenseDetails": {
      "type": "object",
      "properties": {
        "is_valid_license": {
          "type": "boolean",
          "title": "is_valid_license yes/no"
        },
        "license_number": {
          "type": "string",
          "title": "if valid , license no"
        }
      }
    },
    "fmListAbsenceResponse": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ListAbsenceResponseAbsenceList"
          },
          "title": "list of employee absence"
        }
      }
    },
    "fmListAllCountResponse": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ListAllCountResponseCountResponse"
          },
          "title": "list of counts of call, issue, note and email"
        }
      }
    },
    "fmListAppointmentResponse": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ListAppointmentResponseAppointmentResponse"
          },
          "title": "list of appointments"
        }
      }
    },
    "fmListAreaResponse": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ListAreaResponseAreaResponse"
          }
        }
      }
    },
    "fmListBidPlannerResponse": {
      "type": "object",
      "properties": {
        "bidplanners": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ListBidPlannerResponseBidPlannerResponse"
          },
          "title": "list of bid planners"
        }
      }
    },
    "fmListBidPlannerStatusResponse": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ListBidPlannerStatusResponseBidPlannerStatusResponse"
          },
          "title": "list of bid planner status"
        }
      }
    },
    "fmListCRMMobilizationResponse": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ListCRMMobilizationResponseCRMMobilizationList"
          },
          "title": "lists of crm mobilization"
        }
      }
    },
    "fmListCallResponse": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ListCallResponseCallResponse"
          },
          "title": "list of calls"
        }
      }
    },
    "fmListCategoriesAndQuestionsResponse": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ListCategoriesAndQuestionsResponseAllCategoryResponse"
          },
          "title": "lists of categories"
        }
      }
    },
    "fmListCategoryQuestionsResponse": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ListCategoryQuestionsResponseCategoryQuestions"
          },
          "title": "lists of questions"
        }
      }
    },
    "fmListCategoryResponse": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ListCategoryResponseCategoryResponse"
          },
          "title": "lists of categories"
        }
      }
    },
    "fmListCheckResponse": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ListCheckResponseCheckResponse"
          },
          "title": "list of checks"
        }
      },
      "title": "Response for list of check request"
    },
    "fmListClientEmployeeResponse": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ListClientEmployeeResponseClientEmployeeResponse"
          }
        }
      }
    },
    "fmListClientMobilizationResponse": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ListClientMobilizationResponseClientMobilizationResponse"
          }
        },
        "metadata": {
          "$ref": "#/definitions/fmListResponseMetadata",
          "title": "metadata about response"
        }
      },
      "title": "Response for list of client mobilization"
    },
    "fmListClientRequestSearchParam": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "name of client"
        },
        "client_code": {
          "type": "string",
          "title": "unique client code"
        },
        "area": {
          "type": "string",
          "title": "area of client"
        },
        "region": {
          "type": "string",
          "title": "region of client"
        },
        "head_office_id": {
          "type": "string",
          "title": "head office id"
        },
        "lead_status": {
          "type": "string",
          "title": "status of lead client : allowed \"ACTIVE\", \"INACTIVE\""
        },
        "lead_employees": {
          "type": "integer",
          "format": "int32",
          "title": "lead client estimated employees required"
        },
        "lead_employee_hours": {
          "type": "number",
          "format": "float",
          "title": "estimated hours required"
        },
        "sector_id": {
          "type": "string",
          "title": "unique id of sector"
        },
        "city": {
          "type": "string",
          "title": "city of client"
        },
        "post_code": {
          "type": "string",
          "title": "post code"
        }
      }
    },
    "fmListClientResponse": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ListClientResponseClientResponse"
          },
          "title": "list of clients"
        },
        "metadata": {
          "$ref": "#/definitions/fmListResponseMetadata",
          "title": "metadata about response"
        }
      }
    },
    "fmListCommentResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fmCommentResponse"
          }
        }
      }
    },
    "fmListCorrectionResponse": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ListCorrectionResponseCorrectionResponse"
          }
        }
      }
    },
    "fmListCoverData": {
      "type": "object",
      "properties": {
        "cover_id": {
          "type": "string",
          "title": "unique id of cover"
        },
        "employee_absence_id": {
          "type": "string",
          "title": "absence id"
        },
        "absence_task_id": {
          "type": "string",
          "title": "absence task id"
        },
        "covered_by": {
          "type": "string",
          "title": "employee who covers the task"
        },
        "covered_task_id": {
          "type": "string",
          "title": "covered task id"
        },
        "estimated_time": {
          "type": "string",
          "title": "estimated time of task"
        }
      }
    },
    "fmListCoverResponse": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fmCoverResponse"
          },
          "title": "list of Covers"
        }
      },
      "title": "Response for Cover list"
    },
    "fmListDepartmentResponse": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ListDepartmentResponseDepartmentResponse"
          }
        }
      }
    },
    "fmListDesignationResponse": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ListDesignationResponseDesignationResponse"
          }
        }
      }
    },
    "fmListEmailResponse": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ListEmailResponseEmailResponse"
          },
          "title": "list of emails"
        }
      }
    },
    "fmListEmployeeCheckRequest": {
      "type": "object",
      "properties": {
        "organization_id": {
          "type": "string",
          "title": "organization id of the employee"
        },
        "employee_id": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "employee ids"
        },
        "date": {
          "type": "string",
          "format": "date-time",
          "title": "date for check ins and check outs"
        }
      }
    },
    "fmListEmployeeCheckResponse": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fmEmployeeCheckInfo"
          },
          "title": "result list"
        }
      }
    },
    "fmListEmployeeLeaverResponse": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fmEmployeeLeaverResponse"
          },
          "title": "list of leaver employees"
        }
      },
      "title": "Response for listing leavers"
    },
    "fmListEmployeeRequestSearchParam": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "name of client"
        },
        "employee_code": {
          "type": "string",
          "format": "int64",
          "title": "unique client code"
        },
        "area": {
          "type": "string",
          "title": "area of client"
        },
        "region": {
          "type": "string",
          "title": "region of client"
        }
      }
    },
    "fmListEmployeeResponse": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ListEmployeeResponseEmployeeResponse"
          },
          "title": "list of employees"
        },
        "metadata": {
          "$ref": "#/definitions/fmListResponseMetadata",
          "title": "metadata about response"
        }
      },
      "title": "response for fetching list of employees"
    },
    "fmListFeedbackResponse": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fmFeedbackResponse"
          }
        }
      }
    },
    "fmListGlobalCheckResponse": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ListGlobalCheckResponseGlobalCheckResponse"
          },
          "title": "list of global checks"
        }
      }
    },
    "fmListInventoryCategoryResponse": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ListInventoryCategoryResponseInventoryCategory"
          },
          "title": "Output list for inventory categories"
        },
        "metadata": {
          "$ref": "#/definitions/fmListResponseMetadata",
          "title": "metadata about response"
        }
      },
      "title": "Response for listing inventory categories"
    },
    "fmListInventoryItemResponse": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ListInventoryItemResponseInventoryItem"
          },
          "title": "Output list"
        },
        "metadata": {
          "$ref": "#/definitions/fmListResponseMetadata",
          "title": "metadata about response"
        }
      },
      "title": "Response of item list"
    },
    "fmListIssuesResponse": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fmIssueResponse"
          },
          "title": "list of issues"
        },
        "metadata": {
          "$ref": "#/definitions/fmListResponseMetadata",
          "title": "metadata about response"
        }
      },
      "title": "List issues response"
    },
    "fmListJobTypeResponse": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ListJobTypeResponseJobTypeResponse"
          }
        }
      }
    },
    "fmListMarketingCampaignResponse": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ListMarketingCampaignResponseMarketingCampaignResponse"
          },
          "title": "list of marketing campaign"
        }
      }
    },
    "fmListMeetingResponse": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ListMeetingResponseMeetingResponse"
          },
          "title": "list of meetings"
        },
        "metadata": {
          "$ref": "#/definitions/fmListResponseMetadata",
          "title": "metadata about response"
        }
      }
    },
    "fmListMobilizationTemplateResponse": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ListMobilizationTemplateResponseMobilizationTemplateResponse"
          },
          "title": "list of mobilization templates"
        }
      }
    },
    "fmListNewMobilizationResponse": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ListNewMobilizationResponseNewMobilizationList"
          },
          "title": "response list of new mobilization"
        }
      }
    },
    "fmListNewStageResponse": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ListNewStageResponseNewStagesResponse"
          },
          "title": "list of new stages"
        }
      }
    },
    "fmListNotesResponse": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fmNoteResponse"
          },
          "title": "list of Notes"
        },
        "metadata": {
          "$ref": "#/definitions/fmListResponseMetadata",
          "title": "metadata about response"
        }
      },
      "title": "List Notes response"
    },
    "fmListOpeningClosingCheckResponse": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fmOpeningClosingForListing"
          }
        }
      }
    },
    "fmListOrganizationResponse": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ListOrganizationResponseOrganizationResponse"
          },
          "title": "list of organizations"
        }
      },
      "title": "response for fetching list of organization"
    },
    "fmListOrganizationRolesResponse": {
      "type": "object",
      "properties": {
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ListOrganizationRolesResponseOrganizationRoles"
          },
          "title": "list of available roles"
        }
      }
    },
    "fmListParentMobilizationResponse": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ListParentMobilizationResponseParentMobilizationResponse"
          },
          "title": "list response of the parent mobilization"
        }
      }
    },
    "fmListPeriodicTaskResponse": {
      "type": "object",
      "properties": {
        "tasks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fmTimesheetResponse"
          },
          "title": "list of periodic tasks  queried by user"
        }
      }
    },
    "fmListPlannerResponse": {
      "type": "object",
      "properties": {
        "planners": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ListPlannerResponsePlannerList"
          },
          "title": "list response of planner"
        }
      }
    },
    "fmListRegionResponse": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ListRegionResponseRegionResponse"
          }
        }
      }
    },
    "fmListRequestFilter": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "format": "int32"
        },
        "page": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "fmListResponseMetadata": {
      "type": "object",
      "properties": {
        "total_rows": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "fmListSectorResponse": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ListSectorResponseSectorResponse"
          }
        }
      }
    },
    "fmListTaskByClientResponse": {
      "type": "object",
      "properties": {
        "tasks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ListTaskByClientResponseTaskByClientResponse"
          }
        }
      }
    },
    "fmListTaskByEmployeeResponse": {
      "type": "object",
      "properties": {
        "tasks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fmTaskByEmployeeResponse"
          },
          "title": "list of tasks by employee_id queried by user"
        }
      }
    },
    "fmListTaskByMobileEmployeesResponse": {
      "type": "object",
      "properties": {
        "tasks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fmTaskByEmployeeResponse"
          },
          "title": "list of mobile tasks by employee_id queried by user"
        }
      }
    },
    "fmListTaskByVariationClientsResponse": {
      "type": "object",
      "properties": {
        "tasks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fmTaskByEmployeeResponse"
          }
        }
      }
    },
    "fmListTaskEmployeeResponse": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ListTaskEmployeeResponseTaskEmployeeResponse"
          },
          "title": "list response of task"
        },
        "metadata": {
          "$ref": "#/definitions/fmListResponseMetadata",
          "title": "metadata about response"
        }
      }
    },
    "fmListTaskGroupByAllClientResponse": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fmTaskGroupByClientResponse"
          },
          "title": "list response"
        }
      }
    },
    "fmListTaskResponse": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fmTaskResponse"
          },
          "title": "list of tasks"
        }
      },
      "title": "Response for list of task request"
    },
    "fmListTenderStatusResponse": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ListTenderStatusResponseTenderStatusResponse"
          },
          "title": "lists of tender status"
        }
      }
    },
    "fmListTrainingTypeResponse": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ListTrainingTypeResponseTrainingTypeResponse"
          },
          "title": "list of training type"
        }
      }
    },
    "fmListTransferResponse": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fmTransferResponse"
          }
        }
      }
    },
    "fmListTupeResponse": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ListTupeResponseTupeResponse"
          },
          "title": "lists of tupe"
        }
      }
    },
    "fmListUserEmployeeRolesScopesResponse": {
      "type": "object",
      "properties": {
        "user_employees": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ListUserEmployeeRolesScopesResponseUserEmployeeRolesScopes"
          },
          "title": "list of user-employee roles/scopes"
        }
      }
    },
    "fmLoginRequest": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "title": "username of user"
        },
        "password": {
          "type": "string",
          "title": "password of user"
        }
      },
      "title": "Request for login"
    },
    "fmLoginResponse": {
      "type": "object",
      "properties": {
        "access_token": {
          "type": "string",
          "title": "access token"
        },
        "refresh_token": {
          "type": "string",
          "title": "refresh token"
        }
      },
      "title": "Response for login"
    },
    "fmLogoutRequest": {
      "type": "object",
      "properties": {
        "refresh_token": {
          "type": "string",
          "title": "authentication token for logout requests"
        }
      },
      "title": "Request for logout"
    },
    "fmLogoutResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "title": "action result"
        }
      },
      "title": "Response for logout"
    },
    "fmMeetingDates": {
      "type": "object",
      "properties": {
        "meeting_date": {
          "type": "string",
          "format": "date-time",
          "title": "date of the meeting"
        },
        "start_time": {
          "type": "string",
          "format": "date-time",
          "title": "start time of the meeting"
        },
        "end_time": {
          "type": "string",
          "format": "date-time",
          "title": "end time of the meeting"
        }
      }
    },
    "fmMeetingTimerUpdateRequest": {
      "type": "object",
      "properties": {
        "meeting_id": {
          "type": "string",
          "title": "id of the meeting"
        },
        "action": {
          "type": "string",
          "title": "timer-action : \"START\" or \"STOP\""
        }
      }
    },
    "fmMeetingTimerUpdateResponse": {
      "type": "object",
      "properties": {
        "meeting_id": {
          "type": "string",
          "title": "id of the updated meeting"
        }
      }
    },
    "fmMobilizationPrincipal": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "title": "type of user"
        },
        "id": {
          "type": "string",
          "title": "unique id of the user"
        },
        "name": {
          "type": "string",
          "title": "name of the user"
        }
      }
    },
    "fmMobilizationTasks": {
      "type": "object",
      "properties": {
        "title_number": {
          "type": "number",
          "format": "float",
          "title": "title number"
        },
        "title": {
          "type": "string",
          "title": "title name"
        }
      }
    },
    "fmMobilizationTemplates": {
      "type": "object",
      "properties": {
        "mobilization_template_id": {
          "type": "string",
          "title": "unique id of the mobilization template"
        },
        "parent_mobilization_id": {
          "type": "string",
          "title": "id of the associated parent mobilization"
        },
        "organization_id": {
          "type": "string",
          "title": "organization id"
        },
        "name": {
          "type": "string",
          "title": "name of the mobilization template"
        },
        "tasks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fmMobilizationTasks"
          },
          "title": "tasks of the template"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "title": "created date of the template"
        }
      }
    },
    "fmNextOfKeenEmployeeInfo": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "name of next of keen"
        },
        "relation": {
          "type": "string",
          "title": "relation"
        },
        "address": {
          "type": "string",
          "title": "address"
        },
        "postcode": {
          "type": "string",
          "title": "postcode"
        },
        "contact_number": {
          "type": "string",
          "title": "contact_number"
        },
        "mobile_number": {
          "type": "string",
          "title": "mobile_number"
        },
        "email": {
          "type": "string",
          "title": "email details"
        },
        "date": {
          "type": "string",
          "format": "date-time",
          "title": "date"
        },
        "signature": {
          "type": "string",
          "title": "signature file upload"
        },
        "signature_text": {
          "type": "string",
          "title": "signature text"
        }
      },
      "title": "Next of Keen employee information"
    },
    "fmNoteResponse": {
      "type": "object",
      "properties": {
        "organization_id": {
          "type": "string",
          "title": "id of the organization this note belongs to"
        },
        "created_by": {
          "type": "string",
          "title": "id of the note creater"
        },
        "for": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "notes for"
        },
        "notes": {
          "type": "string",
          "title": "notes detail"
        },
        "note_date": {
          "type": "string",
          "format": "date-time",
          "title": "note date"
        },
        "note_id": {
          "type": "string",
          "title": "unique id of note to be updated"
        },
        "client_id": {
          "type": "string",
          "title": "unique id of the client"
        },
        "employee_id": {
          "type": "string",
          "title": "id of the employee"
        },
        "note_type": {
          "type": "string",
          "title": "type of the note : CLIENT, EMPLOYEE, OFFICE, OTHER, NA"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "title": "date of note creation"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "title": "date of note updated"
        }
      }
    },
    "fmOfficialEmployeeInformationForListing": {
      "type": "object",
      "properties": {
        "employee_code": {
          "type": "string",
          "format": "int64",
          "title": "Employee code within the organization"
        },
        "work_permit_expiry_date": {
          "type": "string",
          "format": "date-time",
          "title": "Work permit expiry date of the employee"
        },
        "dbs_details": {
          "$ref": "#/definitions/fmDbsDetails",
          "title": "dbs details of employee"
        },
        "payment_type": {
          "type": "string",
          "title": "Payment type"
        },
        "department_id": {
          "type": "string",
          "title": "Department ID"
        },
        "cv_attachment": {
          "type": "string",
          "title": "CV path"
        },
        "employee_type": {
          "type": "string",
          "title": "Employee type"
        },
        "is_tupe": {
          "type": "boolean",
          "title": "Is tupe"
        },
        "training_type": {
          "type": "string",
          "title": "type of training to be given to employee"
        },
        "training_date_time": {
          "type": "string",
          "format": "date-time",
          "title": "Training date/time"
        },
        "comment": {
          "type": "string",
          "title": "comments if any"
        },
        "licence_details": {
          "$ref": "#/definitions/fmLicenseDetails",
          "title": "license details"
        },
        "hourly_rate": {
          "$ref": "#/definitions/fmHourlyRateInfo"
        },
        "interviewer": {
          "type": "string",
          "title": "interviewer is also from among the active employee  list"
        },
        "interviewing_date_time": {
          "type": "string",
          "format": "date-time",
          "title": "Interview date/time"
        }
      },
      "title": "Official employee information used by list, detail endpoint\nan extra employee_code field is added here from\nOfficialEmployeeInformationForUpsert"
    },
    "fmOfficialEmployeeInformationForUpsert": {
      "type": "object",
      "properties": {
        "work_permit_expiry_date": {
          "type": "string",
          "format": "date-time",
          "title": "Work permit expiry date of the employee"
        },
        "dbs_details": {
          "$ref": "#/definitions/fmDbsDetails"
        },
        "is_tupe": {
          "type": "boolean",
          "title": "Is tupe"
        },
        "payment_type": {
          "type": "string",
          "title": "Payment type"
        },
        "department_id": {
          "type": "string",
          "title": "Department ID"
        },
        "cv_attachment": {
          "type": "string",
          "title": "CV path"
        },
        "employee_type": {
          "type": "string",
          "title": "type of contract the employee have with the org: dropdown value -\npermanent, temporary and zero hour"
        },
        "interviewer": {
          "type": "string",
          "title": "interviewer is also from among the active employee  list"
        },
        "interviewing_date_time": {
          "type": "string",
          "format": "date-time",
          "title": "Interview date/time"
        },
        "training_type": {
          "type": "string",
          "title": "type of training to be given to employee"
        },
        "training_date_time": {
          "type": "string",
          "format": "date-time",
          "title": "Training date/time"
        },
        "comment": {
          "type": "string",
          "title": "comments if any"
        },
        "licence_details": {
          "$ref": "#/definitions/fmLicenseDetails",
          "title": "license details"
        },
        "hourly_rate": {
          "$ref": "#/definitions/fmHourlyRateInfo"
        }
      },
      "title": "Official employee information used by create, update endpoints"
    },
    "fmOpeningClosingForListing": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "unique id of opening/closing check"
        },
        "check_type": {
          "type": "string",
          "title": "check whether it is a check_in or check_out"
        },
        "organization_id": {
          "type": "string",
          "title": "organization id"
        },
        "type": {
          "type": "string",
          "title": "type of opening/closing: GLOBAL, EMPLOYEE, GLOBAL"
        },
        "employee_id": {
          "type": "string",
          "title": "unique if of employee"
        },
        "employee_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "list of employees"
        },
        "client_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "unique id of clients"
        },
        "designation_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "unique id of designations"
        },
        "department_id": {
          "type": "string",
          "title": "unique id of department"
        },
        "designation_id": {
          "type": "string",
          "title": "unique if of designation"
        },
        "display_date": {
          "type": "string",
          "format": "date-time",
          "title": "Date on which opening/closing check is shown (required if is_recurrence is false)"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "List of instructions"
        },
        "is_recurrence": {
          "type": "boolean",
          "title": "wether opening/closing check is recurrence"
        },
        "recurrence": {
          "$ref": "#/definitions/fmRecurrenceDetails",
          "title": "details of recurrence"
        }
      }
    },
    "fmOrganizationDetailResponse": {
      "type": "object",
      "properties": {
        "organization_id": {
          "type": "string",
          "title": "unique id of organization"
        },
        "name": {
          "type": "string",
          "title": "name of organization"
        },
        "contact_detail": {
          "$ref": "#/definitions/fmContactDetail",
          "title": "contact details of the organization"
        },
        "created_date": {
          "type": "string",
          "format": "date-time",
          "title": "time the organization was created at"
        },
        "employees_details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fmEmployeesDetails"
          },
          "title": "details of employees of this organization"
        }
      }
    },
    "fmPensionDetails": {
      "type": "object",
      "properties": {
        "pension_eligibility": {
          "type": "boolean",
          "title": "whether eligible for pension or not"
        },
        "is_pension_b_on_final_salary": {
          "type": "boolean",
          "title": "whether pension is based on final salary or not"
        },
        "is_pension_b_on_pension_scheme": {
          "type": "boolean",
          "title": "whether pension is based on pension scheme or not"
        },
        "is_pensionable_service": {
          "type": "boolean",
          "title": "whether the service is pensionable or not"
        }
      }
    },
    "fmRecords": {
      "type": "object",
      "properties": {
        "employee_contribution": {
          "type": "number",
          "format": "float",
          "title": "percentage of employee contribution"
        },
        "employer_contribution": {
          "type": "number",
          "format": "float",
          "title": "percentage of employer contribution"
        },
        "sickness_record": {
          "type": "boolean",
          "title": "whether any kind of sickness has been recorded over the last 12 months or not"
        },
        "legal_action_taken": {
          "type": "boolean",
          "title": "if any kind of legal action is taken over the last 2 years"
        },
        "disciplinary_and_grievance": {
          "type": "boolean",
          "title": "if there is any kind of disciplinary and grievance procedure taken"
        },
        "holiday_taken_days": {
          "type": "integer",
          "format": "int32",
          "title": "number of holidays taken"
        }
      }
    },
    "fmRecurrenceDetails": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "id of task recurrence"
        },
        "type": {
          "type": "string",
          "title": "type of recurrence: Allowed [CUSTOM, DAILY, WEEKLY, MONTHLY_DAY, MONTHLY_WEEK, YEARLY]"
        },
        "type_details": {
          "$ref": "#/definitions/fmRecurrenceTypeDetails",
          "title": "type details;"
        },
        "start_date": {
          "type": "string",
          "format": "date-time",
          "title": "Date from which recurrence starts"
        },
        "end_date": {
          "type": "string",
          "format": "date-time",
          "title": "Date until which recurrence is created"
        },
        "status": {
          "type": "boolean",
          "title": "status : by default set to true"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "title": "created_date"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "title": "updated_date"
        }
      }
    },
    "fmRecurrenceTypeDetails": {
      "type": "object",
      "properties": {
        "dates": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "date-time"
          },
          "title": "multiple dates : For CUSTOM type"
        },
        "week_days": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "multiple week_days name: allowed SUNDAY, MONDAY, ... SATURDAY"
        },
        "day_of_month": {
          "type": "integer",
          "format": "int32",
          "title": "day of the month: for MONTHLY_DATE or YEARLY"
        },
        "name_of_month": {
          "type": "string",
          "title": "string name of month : for YEARLY"
        },
        "monthly_week_details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RecurrenceTypeDetailsMonthlyWeekDetails"
          },
          "title": "Monthly week details"
        }
      }
    },
    "fmReferenceEmployeeInfo": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "name of reference person"
        },
        "relation": {
          "type": "string",
          "title": "relation to reference person"
        },
        "address": {
          "type": "string",
          "title": "address of reference person"
        },
        "postcode": {
          "type": "string",
          "title": "postcode of reference person"
        },
        "contact_number": {
          "type": "string",
          "title": "contact number of reference person"
        },
        "email": {
          "type": "string",
          "title": "email of reference person"
        },
        "can_contact_without_notifying": {
          "type": "boolean"
        }
      },
      "title": "Reference employee information"
    },
    "fmRefreshRequest": {
      "type": "object",
      "properties": {
        "refresh_token": {
          "type": "string",
          "title": "authetication token for refresh requests"
        }
      },
      "title": "Request for refresh"
    },
    "fmRegion": {
      "type": "object",
      "properties": {
        "region": {
          "type": "string"
        },
        "region_manager": {
          "type": "string",
          "title": "Region manager employee_id"
        }
      }
    },
    "fmReplyResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "unique id of reply"
        },
        "comment_id": {
          "type": "string",
          "title": "id of the comment"
        },
        "comment": {
          "type": "string",
          "title": "the comment string"
        },
        "description": {
          "type": "string",
          "title": "description if you need it (optional)"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "title": "timestamp of when the comment was created"
        }
      }
    },
    "fmReqTasks": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "title": "title of the task"
        }
      }
    },
    "fmResetAllUserPasswordRequest": {
      "type": "object",
      "properties": {
        "organization_id": {
          "type": "string",
          "title": "unique id of organization"
        },
        "employee_id": {
          "type": "string",
          "title": "id of employee who is resetting the password"
        }
      }
    },
    "fmResetAllUserPasswordResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "boolean",
          "title": "acknowledge"
        }
      }
    },
    "fmResetPasswordRequest": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "title": "email of user"
        },
        "token": {
          "type": "string",
          "title": "token for reset"
        },
        "password": {
          "type": "string",
          "title": "new password of user"
        }
      }
    },
    "fmResetPasswordResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "title": "action report"
        }
      }
    },
    "fmRoleResponse": {
      "type": "object",
      "properties": {
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RoleResponseUserRole"
          },
          "title": "available roles"
        }
      }
    },
    "fmScopeResponse": {
      "type": "object",
      "properties": {
        "scope_groups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fmUserScopeGroup"
          },
          "title": "available scopes"
        }
      }
    },
    "fmSendEmailResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "boolean",
          "title": "acknowledge"
        }
      }
    },
    "fmShiftContractedDayHours": {
      "type": "object",
      "properties": {
        "shift": {
          "type": "string",
          "title": "shift of the employee for the client"
        },
        "shift_start_time": {
          "type": "string",
          "title": "shift start time of the employee for the client"
        },
        "shift_end_time": {
          "type": "string",
          "title": "shift end time of the employee for the client"
        },
        "vacancy_id": {
          "type": "string",
          "title": "vacancy id"
        }
      }
    },
    "fmStageStatusChangeRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "stage id whose status is to be changed"
        },
        "bid_planner_id": {
          "type": "string",
          "title": "bid-planner id of the particular stage"
        },
        "status": {
          "type": "string",
          "title": "status after being changed"
        },
        "client_id": {
          "type": "string",
          "title": "client id of the bid planner"
        }
      }
    },
    "fmStageStatusChangeResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "boolean",
          "title": "action response"
        }
      }
    },
    "fmSubAreaDetails": {
      "type": "object",
      "properties": {
        "sub_area_id": {
          "type": "string",
          "title": "id of sub area"
        },
        "area_id": {
          "type": "string",
          "title": "id of area to which the sub area belongs"
        },
        "title": {
          "type": "string",
          "title": "tile of the sub area"
        },
        "organization_id": {
          "type": "string",
          "title": "organization that the sub area belongs to"
        },
        "area_supervisors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "id of area supervisors (employee_id)"
        },
        "client_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "client ids"
        }
      }
    },
    "fmTaskByEmployeeResponse": {
      "type": "object",
      "properties": {
        "client_id": {
          "type": "string",
          "title": "unique identifier of the client on which employee was involved"
        },
        "task_id": {
          "type": "string",
          "title": "unique identifier of the task completed by employee on the client in\nparticular date"
        },
        "start_time": {
          "type": "string",
          "format": "date-time",
          "title": "task must start by at least this time. Start time is combination of\nappointment date and time"
        },
        "estimate_time": {
          "type": "string",
          "title": "the estimated time period to complete the task"
        },
        "check_in_time": {
          "type": "string",
          "format": "date-time",
          "title": "check in time of the task on the particular date"
        },
        "check_out_time": {
          "type": "string",
          "format": "date-time",
          "title": "check out time of the task on the particular date"
        },
        "title": {
          "type": "string",
          "title": "task title"
        },
        "description": {
          "type": "string",
          "title": "task descriptiom"
        },
        "employee_id": {
          "type": "string",
          "title": "employee id of the employee for which the task was assigned to"
        }
      }
    },
    "fmTaskDetailResponse": {
      "type": "object",
      "properties": {
        "task_detail": {
          "$ref": "#/definitions/fmTaskResponse",
          "title": "Details of the task"
        }
      }
    },
    "fmTaskDetailedInformation": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "total_tasks": {
          "type": "integer",
          "format": "int32"
        },
        "total_hours": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "fmTaskGroupByClientResponse": {
      "type": "object",
      "properties": {
        "client_id": {
          "type": "string",
          "title": "id of client"
        },
        "employee_information": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaskGroupByClientResponseTaskEmployeeDetailedInformation"
          },
          "title": "task information"
        },
        "total_tasks": {
          "type": "integer",
          "format": "int32",
          "title": "total tasks done"
        },
        "task_total_time": {
          "type": "number",
          "format": "double",
          "title": "total task working duration in seconds"
        }
      }
    },
    "fmTaskGroupByEmployeeResponse": {
      "type": "object",
      "properties": {
        "employee_id": {
          "type": "string",
          "title": "id of employee"
        },
        "task_information": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fmTaskDetailedInformation"
          },
          "title": "task information"
        },
        "total_tasks": {
          "type": "integer",
          "format": "int32",
          "title": "total tasks done"
        },
        "task_total_time": {
          "type": "number",
          "format": "double",
          "title": "total task working duration in seconds"
        }
      }
    },
    "fmTaskGroupResponse": {
      "type": "object",
      "properties": {
        "employee_data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaskGroupResponseEmployeeTaskData"
          },
          "title": "employee data"
        }
      }
    },
    "fmTaskGroupWeeklyData": {
      "type": "object",
      "properties": {
        "day_of_week": {
          "type": "string",
          "title": "day of week"
        },
        "total_tasks": {
          "type": "integer",
          "format": "int32",
          "title": "total tasks done"
        },
        "task_total_time": {
          "type": "number",
          "format": "double",
          "title": "total task working duration in seconds"
        }
      }
    },
    "fmTaskResponse": {
      "type": "object",
      "properties": {
        "task_id": {
          "type": "string",
          "title": "unique identifier for the task"
        },
        "title": {
          "type": "string",
          "title": "title (name) of the task"
        },
        "description": {
          "type": "string",
          "title": "description of the task"
        },
        "client_id": {
          "type": "string",
          "title": "client the task is associated with. Optional"
        },
        "employee_id": {
          "type": "string",
          "title": "employee the task is assigned to"
        },
        "start_time": {
          "type": "string",
          "format": "date-time",
          "title": "task must start by at least this time. Start time is combination of\nappointment date and time"
        },
        "estimate_time": {
          "type": "string",
          "title": "the estimated time period to complete the task"
        },
        "actual_in": {
          "type": "string",
          "format": "date-time",
          "title": "time the task was checked in"
        },
        "actual_out": {
          "type": "string",
          "format": "date-time",
          "title": "time the task was checked out"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "title": "time generated by system at the instance the task was created"
        },
        "organization_id": {
          "type": "string",
          "title": "organization id of the employee"
        },
        "is_variation": {
          "type": "boolean",
          "title": "flag to confirm if the task is variation or not"
        },
        "approved_correction": {
          "type": "string",
          "title": "approved correction duration of the task"
        },
        "is_vary": {
          "type": "boolean",
          "title": "flag to confirm if the task is vary or not"
        },
        "is_break": {
          "type": "boolean",
          "title": "to check break, true or false"
        },
        "break_type": {
          "type": "string",
          "title": "to check break type, paid or unpaid"
        },
        "task_type": {
          "type": "string",
          "title": "type of task: Allowed [\"DOC\", \"VARIATION\", \"MOBILE\", \"OTHERS\", \"PERIODIC(REGULAR)\", \"PERIODIC(ONE OFF)\", \"PERIODIC(WINDOW)\", \"PERIODIC(ACCOMODATION)\"]"
        },
        "rate": {
          "type": "number",
          "format": "float",
          "title": "rate if task type is 'MOBILE' or 'OTHERS'"
        },
        "cover_rate": {
          "type": "number",
          "format": "float",
          "title": "cover rate"
        },
        "cancel_status": {
          "type": "boolean",
          "title": "cancel status of the task"
        },
        "is_recurrence": {
          "type": "boolean",
          "title": "wether task is recurrence"
        },
        "recurrence": {
          "$ref": "#/definitions/fmRecurrenceDetails",
          "title": "details of recurrence"
        },
        "recurrence_parent_task": {
          "type": "string",
          "title": "Id of task from which current task was generated"
        },
        "vary_time": {
          "type": "string",
          "format": "date-time",
          "title": "Date/time at which vary task should be initiated"
        },
        "correction_data": {
          "$ref": "#/definitions/TaskResponseTaskCorrectionData",
          "title": "Correction data regardless of status"
        },
        "employee_absence": {
          "$ref": "#/definitions/TaskResponseTaskEmployeeAbsence",
          "title": "Employee Absence Data"
        }
      },
      "title": "Task definition"
    },
    "fmTimesheetResponse": {
      "type": "object",
      "properties": {
        "client_id": {
          "type": "string",
          "title": "unique identifier of the client on which employee was involved"
        },
        "employee_id": {
          "type": "string",
          "title": "unique identifier of the employee who was involved with the task"
        },
        "task_id": {
          "type": "string",
          "title": "unique identifier of the task completed by employee on the client in\nparticular date"
        },
        "type": {
          "type": "string",
          "title": "the type of periodic tasks. eg: one-off, accomodation, regular, window"
        },
        "check_in_time": {
          "type": "string",
          "format": "date-time",
          "title": "check in time of the task on the particular date"
        },
        "check_out_time": {
          "type": "string",
          "format": "date-time",
          "title": "check out time of the task on the particular date"
        }
      }
    },
    "fmTrainingEmployeeInfo": {
      "type": "object",
      "properties": {
        "skill": {
          "type": "string",
          "title": "skill title"
        },
        "details": {
          "type": "string",
          "title": "details of the skills"
        }
      },
      "title": "Training employee information"
    },
    "fmTransferResponse": {
      "type": "object",
      "properties": {
        "employee_id": {
          "type": "string",
          "title": "unique id of employee to transfer"
        },
        "department_id": {
          "type": "string",
          "title": "new department id"
        },
        "from_client_id": {
          "type": "string",
          "title": "unique id of client from which employee is transfered"
        },
        "to_client_id": {
          "type": "string",
          "title": "unique id of client to which employee is transfered"
        },
        "transfer_date": {
          "type": "string",
          "format": "date-time",
          "title": "effective date of transfer"
        },
        "transfer_reason": {
          "type": "string",
          "title": "reason of employee transfer"
        },
        "sector": {
          "type": "string",
          "title": "new sector"
        },
        "transfer_id": {
          "type": "string",
          "title": "unique id of employee transfer"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "title": "transfer data creation time"
        },
        "organization_id": {
          "type": "string",
          "title": "organization id"
        }
      }
    },
    "fmUpdateAbsenceRequest": {
      "type": "object",
      "properties": {
        "employee_absence_id": {
          "type": "string",
          "title": "id of the employee absence to be updated"
        },
        "type": {
          "type": "string",
          "title": "type of the leave to be updated"
        },
        "payment_type": {
          "type": "string",
          "title": "payment type to be updated"
        },
        "description": {
          "type": "string",
          "title": "description regarding the leave"
        },
        "dates": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "date-time"
          },
          "title": "dates to be updated for which leave is taken"
        }
      }
    },
    "fmUpdateAbsenceResponse": {
      "type": "object",
      "properties": {
        "employee_absence_id": {
          "type": "string",
          "title": "id of the employee absence whose details are updated"
        }
      }
    },
    "fmUpdateAgendaDecisionRequest": {
      "type": "object",
      "properties": {
        "agenda_decision_id": {
          "type": "string",
          "title": "id of decision"
        },
        "meeting_id": {
          "type": "string",
          "title": "id of meeting"
        },
        "agenda_id": {
          "type": "string",
          "title": "id of agenda"
        },
        "decision": {
          "type": "string",
          "title": "string decision of agenda"
        },
        "action_by": {
          "type": "string",
          "title": "action to be taken by"
        },
        "action_plan": {
          "type": "string",
          "title": "action plan"
        },
        "action": {
          "type": "string",
          "title": "particular action that is taken"
        },
        "deadline_date": {
          "type": "string",
          "format": "date-time",
          "title": "deadline for action to be taken"
        }
      }
    },
    "fmUpdateAppointmentRequest": {
      "type": "object",
      "properties": {
        "appointment_id": {
          "type": "string",
          "title": "appointment id to be updated"
        },
        "organization_id": {
          "type": "string",
          "title": "organization id to which the appointment belongs"
        },
        "appointment_date": {
          "type": "string",
          "format": "date-time",
          "title": "date for the appointment"
        },
        "estimated_time": {
          "type": "string",
          "title": "estimated time of the appointment"
        },
        "location": {
          "type": "string",
          "title": "location of the appointment"
        },
        "attendee_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "id of employees who come for the appointment"
        },
        "subject": {
          "type": "string",
          "title": "subject of appointment"
        },
        "note": {
          "type": "string",
          "title": "note detail"
        }
      }
    },
    "fmUpdateAppointmentResponse": {
      "type": "object",
      "properties": {
        "appointment_id": {
          "type": "string",
          "title": "id of the updated appointment"
        }
      }
    },
    "fmUpdateAreaRequest": {
      "type": "object",
      "properties": {
        "area_id": {
          "type": "string",
          "title": "id of area"
        },
        "title": {
          "type": "string",
          "title": "title of area"
        },
        "organization_id": {
          "type": "string",
          "title": "organization for the area"
        },
        "region_id": {
          "type": "string",
          "title": "Region that area belongs to"
        },
        "area_manager": {
          "type": "string",
          "title": "id of area manager (employee-id)"
        },
        "areamanager_restricted_clients": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "id of clients disabled for area_manager"
        }
      }
    },
    "fmUpdateBidPlannerRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "id of the bid planner that is to be updated"
        },
        "client_id": {
          "type": "string",
          "title": "client id"
        },
        "source": {
          "type": "string",
          "title": "source of the bid planner"
        },
        "value": {
          "type": "string",
          "title": "value of the bid planner"
        },
        "deadline": {
          "type": "string",
          "format": "date-time",
          "title": "deadline of the bid planner"
        },
        "stages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UpdateBidPlannerRequestUpdateStages"
          },
          "title": "stages of the bid planner that are to be updated"
        }
      }
    },
    "fmUpdateBidPlannerResponse": {
      "type": "object",
      "properties": {
        "bid_planner_id": {
          "type": "string",
          "title": "id of the bid planner that is updated"
        }
      }
    },
    "fmUpdateBidPlannerStatusRequest": {
      "type": "object",
      "properties": {
        "bid_planner_status_id": {
          "type": "string",
          "title": "id of the bid planner status to be updated"
        },
        "organization_id": {
          "type": "string",
          "title": "organization id"
        },
        "title": {
          "type": "string",
          "title": "title of the bid planner status"
        },
        "description": {
          "type": "string",
          "title": "description"
        }
      }
    },
    "fmUpdateBidPlannerStatusResponse": {
      "type": "object",
      "properties": {
        "bid_planner_status_id": {
          "type": "string",
          "title": "id of the updated bid planner status"
        }
      }
    },
    "fmUpdateCallRequest": {
      "type": "object",
      "properties": {
        "call_id": {
          "type": "string",
          "title": "id of the call to be updated"
        },
        "client_id": {
          "type": "string",
          "title": "client id"
        },
        "call_date": {
          "type": "string",
          "format": "date-time",
          "title": "date of the call"
        },
        "call_duration": {
          "type": "string",
          "title": "duration of the call"
        },
        "subject": {
          "type": "string",
          "title": "subject of the call"
        },
        "caller": {
          "type": "string",
          "title": "caller"
        },
        "receiver": {
          "type": "string",
          "title": "receiver"
        },
        "message": {
          "type": "string",
          "title": "message details"
        },
        "caller_receiver": {
          "type": "string",
          "title": "whether the individual is a caller or a receiver"
        }
      }
    },
    "fmUpdateCallResponse": {
      "type": "object",
      "properties": {
        "call_id": {
          "type": "string",
          "title": "id of the updated call"
        }
      }
    },
    "fmUpdateCategoryAnswerRequest": {
      "type": "object",
      "properties": {
        "question_id": {
          "type": "string",
          "title": "id of the question whose answer is to be updated"
        },
        "category_id": {
          "type": "string",
          "title": "id of the category for which answer is being updated"
        },
        "organization_id": {
          "type": "string",
          "title": "id of the organization"
        },
        "answer": {
          "type": "string",
          "title": "the actual answer to be updated"
        },
        "approved_by": {
          "type": "string",
          "title": "approved_by : employee_id"
        }
      }
    },
    "fmUpdateCategoryAnswerResponse": {
      "type": "object",
      "properties": {
        "question_id": {
          "type": "string",
          "title": "id of the question whose answer is updated"
        }
      }
    },
    "fmUpdateCategoryQuestionRequest": {
      "type": "object",
      "properties": {
        "question_id": {
          "type": "string",
          "title": "id of the question that is to be updated"
        },
        "category_id": {
          "type": "string",
          "title": "id of the category to which the question belongs"
        },
        "organization_id": {
          "type": "string",
          "title": "id of the organization"
        },
        "question": {
          "type": "string",
          "title": "the actual question to be updated"
        },
        "answer_type": {
          "type": "string",
          "title": "type of answer allowed"
        },
        "answer_word_count": {
          "type": "integer",
          "format": "int32",
          "title": "number of words allowed for the answer to this question"
        },
        "is_update_answer": {
          "type": "boolean",
          "title": "verify if the answer of the particular question is to be updated"
        },
        "deadline": {
          "type": "string",
          "format": "date-time",
          "title": "deadline of the question"
        }
      }
    },
    "fmUpdateCategoryQuestionResponse": {
      "type": "object",
      "properties": {
        "question_id": {
          "type": "string",
          "title": "id of the updated question"
        }
      }
    },
    "fmUpdateCategoryRequest": {
      "type": "object",
      "properties": {
        "category_id": {
          "type": "string",
          "title": "id of the category that is to be updated"
        },
        "organization_id": {
          "type": "string",
          "title": "id of the organization to which the category belongs"
        },
        "category_name": {
          "type": "string",
          "title": "name of the category"
        },
        "employee_id": {
          "type": "string",
          "title": "id of the employee"
        },
        "percentage": {
          "type": "number",
          "format": "float",
          "title": "percentage"
        },
        "deadline": {
          "type": "string",
          "format": "date-time",
          "title": "deadline of the category"
        }
      }
    },
    "fmUpdateCategoryResponse": {
      "type": "object",
      "properties": {
        "category_id": {
          "type": "string",
          "title": "id of the updated category"
        }
      }
    },
    "fmUpdateClientAreaRequest": {
      "type": "object",
      "properties": {
        "client_id": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "client ids"
        },
        "area": {
          "type": "string",
          "title": "area of the client"
        },
        "organization_id": {
          "type": "string",
          "title": "organization of the clients"
        }
      }
    },
    "fmUpdateClientAreaResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "boolean",
          "title": "action response"
        }
      }
    },
    "fmUpdateClientConfidentialRequest": {
      "type": "object",
      "properties": {
        "client_id": {
          "type": "string",
          "title": "unique id of the client"
        },
        "confidential_contact_people": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fmContactPerson"
          },
          "title": "confidential details to be updated"
        }
      }
    },
    "fmUpdateClientConfidentialResponse": {
      "type": "object",
      "properties": {
        "client_id": {
          "type": "string",
          "title": "id of the updated client"
        }
      }
    },
    "fmUpdateClientMobilizationRequest": {
      "type": "object",
      "properties": {
        "client_id": {
          "type": "string",
          "title": "client id for the mobilization"
        },
        "category": {
          "type": "string",
          "title": "category of mobilization"
        },
        "subject": {
          "type": "string",
          "title": "subject of mobilization"
        },
        "message": {
          "type": "string",
          "title": "message for the mobilization"
        },
        "by": {
          "$ref": "#/definitions/fmMobilizationPrincipal",
          "title": "mobilization by"
        },
        "to": {
          "$ref": "#/definitions/fmMobilizationPrincipal",
          "title": "mobilization to"
        },
        "date_of_mobilization": {
          "type": "string",
          "format": "date-time",
          "title": "mobilization date"
        },
        "client_mobilization_id": {
          "type": "string",
          "title": "unique id of the client mobilization"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "title": "date of mobilization creation"
        }
      },
      "title": "Request to update client mobilization"
    },
    "fmUpdateClientMobilizationResponse": {
      "type": "object",
      "properties": {
        "client_mobilization_id": {
          "type": "string",
          "title": "unique id of the updated client mobilization"
        }
      },
      "title": "Response for update client mobilization"
    },
    "fmUpdateClientRegionRequest": {
      "type": "object",
      "properties": {
        "client_id": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "client ids"
        },
        "region": {
          "type": "string",
          "title": "region of the client"
        },
        "organization_id": {
          "type": "string",
          "title": "organization of the clients"
        }
      }
    },
    "fmUpdateClientRegionResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "boolean",
          "title": "action response"
        }
      }
    },
    "fmUpdateClientRequest": {
      "type": "object",
      "properties": {
        "client_id": {
          "type": "string",
          "title": "client Id of the client to update"
        },
        "name": {
          "type": "string",
          "title": "full name of the client"
        },
        "contact_detail": {
          "$ref": "#/definitions/fmContactDetail",
          "title": "contact details of the client"
        },
        "client_detail": {
          "$ref": "#/definitions/fmClientDetail",
          "title": "information details of the client"
        },
        "contact_people": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fmContactPerson"
          },
          "title": "Contact Person details of the client. Backend saves to\nClientContactPersonService"
        },
        "bank_account_details": {
          "$ref": "#/definitions/fmBankAccountDetails",
          "title": "Bank account details of the client"
        },
        "client_code": {
          "type": "string",
          "title": "unique code of client within the organization"
        },
        "profile_image": {
          "type": "string",
          "title": "profile image of client"
        },
        "lead_detail": {
          "$ref": "#/definitions/fmLeadClientDetailUpsert",
          "title": "Details for lead client"
        }
      },
      "title": "request to update client by client id"
    },
    "fmUpdateClientResponse": {
      "type": "object",
      "properties": {
        "client_id": {
          "type": "string",
          "title": "client Id of the updated client"
        }
      },
      "title": "response for UpdateClientRequest"
    },
    "fmUpdateCommentRequest": {
      "type": "object",
      "properties": {
        "comment_id": {
          "type": "string",
          "title": "the unique id of comment"
        },
        "comment": {
          "type": "string",
          "title": "the comment string"
        },
        "description": {
          "type": "string",
          "title": "description if you need it (optional)"
        },
        "organization_id": {
          "type": "string",
          "title": "id of the associated organization"
        }
      }
    },
    "fmUpdateCommentResponse": {
      "type": "object",
      "properties": {
        "comment_id": {
          "type": "string",
          "title": "the unique id of comment"
        }
      }
    },
    "fmUpdateDepartmentRequest": {
      "type": "object",
      "properties": {
        "department_id": {
          "type": "string",
          "title": "department_id of updated department"
        },
        "organization_id": {
          "type": "string",
          "title": "organization_id  to which department belongs to"
        },
        "title": {
          "type": "string",
          "title": "title of department"
        },
        "description": {
          "type": "string",
          "title": "description of department"
        }
      }
    },
    "fmUpdateDepartmentResponse": {
      "type": "object",
      "properties": {
        "department_id": {
          "type": "string",
          "title": "department_id of updated department"
        }
      }
    },
    "fmUpdateDesignationRequest": {
      "type": "object",
      "properties": {
        "designation_id": {
          "type": "string",
          "title": "designation_id of updated designation"
        },
        "department_id": {
          "type": "string",
          "title": "department_id to which the designation belongs to"
        },
        "organization_id": {
          "type": "string",
          "title": "organization_id to which the designation belongs to"
        },
        "title": {
          "type": "string",
          "title": "job title"
        },
        "description": {
          "type": "string",
          "title": "details about the designation"
        }
      }
    },
    "fmUpdateDesignationResponse": {
      "type": "object",
      "properties": {
        "designation_id": {
          "type": "string",
          "title": "designation_id of updated designation"
        }
      }
    },
    "fmUpdateEmailRequest": {
      "type": "object",
      "properties": {
        "email_id": {
          "type": "string",
          "title": "unique id of the email to be updated"
        },
        "client_id": {
          "type": "string",
          "title": "id of the client"
        },
        "email_date": {
          "type": "string",
          "format": "date-time",
          "title": "date on which the email is sent"
        },
        "subject": {
          "type": "string",
          "title": "subject of the email"
        },
        "sender": {
          "type": "string",
          "title": "email sender id"
        },
        "receiver": {
          "type": "string",
          "title": "email receiver id"
        },
        "message": {
          "type": "string",
          "title": "message details"
        },
        "sender_receiver": {
          "type": "string",
          "title": "to identify whether the individual is a 'SENDER' or a 'RECEIVER'"
        },
        "sender_email": {
          "type": "string",
          "title": "sender's email"
        },
        "receiver_email": {
          "type": "string",
          "title": "receiver's email"
        },
        "cc": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fmEmailCC"
          },
          "title": "cc of the email"
        }
      }
    },
    "fmUpdateEmailResponse": {
      "type": "object",
      "properties": {
        "email_id": {
          "type": "string",
          "title": "id of the updated email"
        }
      }
    },
    "fmUpdateEmployeeConfidentialRequest": {
      "type": "object",
      "properties": {
        "employee_id": {
          "type": "string",
          "title": "id of the employee"
        },
        "confidential_employee_info": {
          "$ref": "#/definitions/fmConfidentialEmployeeInfo",
          "title": "confidential details to be updated"
        }
      }
    },
    "fmUpdateEmployeeConfidentialResponse": {
      "type": "object",
      "properties": {
        "employee_id": {
          "type": "string",
          "title": "id of the updated employee"
        }
      }
    },
    "fmUpdateEmployeeRequest": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "title": "title of employee : Eg: Mr, Mrs, Miss"
        },
        "employee_id": {
          "type": "string",
          "title": "employee Id of the employee to update"
        },
        "first_name": {
          "type": "string",
          "title": "first name of the employee"
        },
        "middle_name": {
          "type": "string",
          "title": "middle name of the employee"
        },
        "last_name": {
          "type": "string",
          "title": "last name of the employee"
        },
        "employee_code": {
          "type": "string",
          "format": "int64",
          "title": "unique employee code for organization"
        },
        "contact_detail": {
          "$ref": "#/definitions/fmContactDetail",
          "title": "contact details of the employee"
        },
        "employee_info": {
          "$ref": "#/definitions/fmEmployeeInformationForUpsert",
          "title": "Employee information"
        },
        "training_info": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fmTrainingEmployeeInfo"
          },
          "title": "trainig Information filled by the organization"
        },
        "history_info": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fmEmploymentHistoryInfo"
          },
          "title": "employment history Information filled by the organization"
        },
        "reference_employee_info": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fmReferenceEmployeeInfo"
          },
          "title": "Reference Information about the employee"
        },
        "criminal_conv_emp_info": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fmCriminalConvictionEmployeeInfo"
          },
          "title": "Criminal Conviction Information about the employee"
        },
        "next_of_keen_employee_info": {
          "$ref": "#/definitions/fmNextOfKeenEmployeeInfo",
          "title": "Next of kee Information about the employee"
        },
        "education_employee_info": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fmEducationEmployeeInformation"
          },
          "title": "education Information about the employee"
        }
      },
      "title": "request to update employee by employee id"
    },
    "fmUpdateEmployeeResponse": {
      "type": "object",
      "properties": {
        "employee_id": {
          "type": "string",
          "title": "employee Id of the updated employee"
        }
      },
      "title": "response for UpdateEmployeeRequest"
    },
    "fmUpdateEmployeeScopeRequest": {
      "type": "object",
      "properties": {
        "employee_id": {
          "type": "string",
          "title": "id the employee"
        },
        "user_id": {
          "type": "string",
          "title": "user_id"
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "roles for this association"
        },
        "scopes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "scopes for this association"
        },
        "organization_id": {
          "type": "string",
          "title": "id of organization"
        }
      }
    },
    "fmUpdateEmployeeStatusRequest": {
      "type": "object",
      "properties": {
        "employee_id": {
          "type": "string",
          "title": "unique identifier of the employee to update status of"
        },
        "status": {
          "type": "string",
          "title": "new status"
        }
      },
      "title": "Request to update employee status"
    },
    "fmUpdateEmployeeStatusResponse": {
      "type": "object",
      "properties": {
        "employee_id": {
          "type": "string",
          "title": "unique identifier of employee"
        }
      },
      "title": "Response when updating an employee status"
    },
    "fmUpdateEmployeeTrainingRequest": {
      "type": "object",
      "properties": {
        "employee_training_id": {
          "type": "string",
          "title": "Unique id of the training for employee"
        },
        "trainee_id": {
          "type": "string",
          "title": "Unique id of trainee employee"
        },
        "trainer_id": {
          "type": "string",
          "title": "Unique id of trainer employee"
        },
        "training_subject": {
          "type": "string",
          "title": "Subject of the training"
        },
        "training_date": {
          "type": "string",
          "format": "date-time",
          "title": "Date of the training"
        },
        "attachment_files": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Attachment files regarding training"
        },
        "organization_id": {
          "type": "string",
          "title": "id of the organization"
        }
      }
    },
    "fmUpdateEmployeeTrainingResponse": {
      "type": "object",
      "properties": {
        "employee_training_id": {
          "type": "string",
          "title": "unique id of the updated employee training program"
        }
      }
    },
    "fmUpdateEmployeeTrainingStatusRequest": {
      "type": "object",
      "properties": {
        "employee_training_id": {
          "type": "string",
          "title": "unique id of the employee training"
        },
        "organization_id": {
          "type": "string",
          "title": "id of the organization"
        },
        "status": {
          "type": "string",
          "title": "status of the training i.e. 'COMPLETE', 'INCOMPLETE'"
        }
      }
    },
    "fmUpdateEmployeeTrainingStatusResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "boolean",
          "title": "acknowledgement status"
        }
      }
    },
    "fmUpdateIssueRequest": {
      "type": "object",
      "properties": {
        "issue_id": {
          "type": "string",
          "title": "unique id of the issue"
        },
        "organization_id": {
          "type": "string",
          "title": "id of the organization"
        },
        "details": {
          "type": "string",
          "title": "details of the issue"
        },
        "assigned_to": {
          "type": "string",
          "title": "id of the user responsible for solving the issue"
        },
        "action_plan": {
          "type": "string",
          "title": "action plan of the issue"
        },
        "deadline": {
          "type": "string",
          "format": "date-time",
          "title": "deadline of solving the issue"
        }
      },
      "title": "Update issue request"
    },
    "fmUpdateIssueResponse": {
      "type": "object",
      "properties": {
        "issue_id": {
          "type": "string",
          "title": "unique id of the issue"
        }
      },
      "title": "Update issue response"
    },
    "fmUpdateIssueStatusRequest": {
      "type": "object",
      "properties": {
        "issue_id": {
          "type": "string",
          "title": "id of the issue whose status is to be updated"
        },
        "organization_id": {
          "type": "string",
          "title": "id of the organization to which the issue belongs"
        },
        "status": {
          "type": "string",
          "title": "status of the issue i.e. PENDING, COMPLETED, INPROGRESS"
        }
      }
    },
    "fmUpdateIssueStatusResponse": {
      "type": "object",
      "properties": {
        "issue_id": {
          "type": "string",
          "title": "id of the updated issue"
        }
      }
    },
    "fmUpdateMarketingCampaignRequest": {
      "type": "object",
      "properties": {
        "marketing_campaign_id": {
          "type": "string",
          "title": "unique id of the marketing-campaign to be updated"
        },
        "organization_id": {
          "type": "string",
          "title": "organization id"
        },
        "title": {
          "type": "string",
          "title": "title of the campaign"
        },
        "email_date": {
          "type": "string",
          "format": "date-time",
          "title": "date on which the email is sent"
        },
        "subject": {
          "type": "string",
          "title": "subject of the email"
        },
        "sender": {
          "type": "string",
          "title": "email sender id"
        },
        "receiver": {
          "type": "string",
          "title": "email receiver id"
        },
        "message": {
          "type": "string",
          "title": "message details"
        },
        "sender_receiver": {
          "type": "string",
          "title": "to identify whether the individual is a 'SENDER' or a 'RECEIVER'"
        },
        "sender_email": {
          "type": "string",
          "title": "sender's email"
        },
        "receiver_email": {
          "type": "string",
          "title": "receiver's email"
        },
        "cc": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fmEmailCC"
          },
          "title": "cc of the email"
        }
      }
    },
    "fmUpdateMarketingCampaignResponse": {
      "type": "object",
      "properties": {
        "marketing_campaign_id": {
          "type": "string",
          "title": "unique id of the updated campaign"
        }
      }
    },
    "fmUpdateMeetingRequest": {
      "type": "object",
      "properties": {
        "meeting_id": {
          "type": "string",
          "title": "meeting Id of the meeting to update"
        },
        "meeting_date": {
          "type": "string",
          "format": "date-time",
          "title": "date of the meeting"
        },
        "estimated_time": {
          "type": "string",
          "title": "estimated time of the meeting"
        },
        "title": {
          "type": "string",
          "title": "title of meeting"
        },
        "department_id": {
          "type": "string",
          "title": "id of department of generated meeting"
        },
        "employees_info": {
          "$ref": "#/definitions/fmEmployees",
          "title": "ids of employees"
        },
        "attendee_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "names of employees who attend the  meetings"
        },
        "agenda_detail": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fmAgendaUpdateDetail"
          },
          "title": "information of agenda of the meetong"
        },
        "location": {
          "type": "string",
          "title": "location of meeting"
        },
        "meeting_type": {
          "type": "string",
          "title": "type of meeting i.e.\"OPEN\" or \"CLOSE\""
        },
        "deleted_agenda_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "deleted_agenda_ids"
        }
      },
      "title": "request to update meeting by meeting_id"
    },
    "fmUpdateMeetingResponse": {
      "type": "object",
      "properties": {
        "meeting_id": {
          "type": "string",
          "title": "meeting Id of the updated meeting"
        }
      },
      "title": "response for UpdateMeetingRequest"
    },
    "fmUpdateMeetingStatusRequest": {
      "type": "object",
      "properties": {
        "meeting_id": {
          "type": "string",
          "title": "id of the meeting whose status is to be updated"
        },
        "status": {
          "type": "string",
          "title": "status after being changed"
        }
      }
    },
    "fmUpdateMeetingStatusResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "boolean",
          "title": "action response"
        }
      }
    },
    "fmUpdateMobilizationTemplateRequest": {
      "type": "object",
      "properties": {
        "mobilization_template_id": {
          "type": "string",
          "title": "id of the mobilization template to be updated"
        },
        "parent_mobilization_id": {
          "type": "string",
          "title": "id of the associated parent mobilization"
        },
        "organization_id": {
          "type": "string",
          "title": "organization id"
        },
        "name": {
          "type": "string",
          "title": "name of the mobilization template"
        },
        "tasks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fmMobilizationTasks"
          },
          "title": "tasks of the template"
        }
      }
    },
    "fmUpdateMobilizationTemplateResponse": {
      "type": "object",
      "properties": {
        "mobilization_template_id": {
          "type": "string",
          "title": "id of the updated mobilization template"
        }
      }
    },
    "fmUpdateNewMobilizationRequest": {
      "type": "object",
      "properties": {
        "new_mobilization_id": {
          "type": "string",
          "title": "id of the new-mobilization to be updated"
        },
        "organization_id": {
          "type": "string",
          "title": "organization id"
        },
        "owner": {
          "type": "string",
          "title": "owner : employee_id"
        },
        "status": {
          "type": "string",
          "title": "status of the mobilization"
        },
        "start_date": {
          "type": "string",
          "format": "date-time",
          "title": "start date of the mobilization"
        },
        "end_date": {
          "type": "string",
          "format": "date-time",
          "title": "end date of the mobilization"
        }
      }
    },
    "fmUpdateNewMobilizationResponse": {
      "type": "object",
      "properties": {
        "new_mobilization_id": {
          "type": "string",
          "title": "unique id of the updated new-mobilization"
        }
      }
    },
    "fmUpdateNewStageRequest": {
      "type": "object",
      "properties": {
        "stage_id": {
          "type": "string",
          "title": "id of the stage to be updated"
        },
        "organization_id": {
          "type": "string",
          "title": "organization to which the stage belongs"
        },
        "title": {
          "type": "string",
          "title": "title of the stage"
        },
        "description": {
          "type": "string",
          "title": "description of the stage"
        }
      }
    },
    "fmUpdateNewStageResponse": {
      "type": "object",
      "properties": {
        "stage_id": {
          "type": "string",
          "title": "id of the updated stage"
        }
      }
    },
    "fmUpdateNoteRequest": {
      "type": "object",
      "properties": {
        "organization_id": {
          "type": "string",
          "title": "id of the organization this note belongs to"
        },
        "created_by": {
          "type": "string",
          "title": "id of the note creater"
        },
        "for": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "notes for"
        },
        "notes": {
          "type": "string",
          "title": "notes detail"
        },
        "note_date": {
          "type": "string",
          "format": "date-time",
          "title": "note date"
        },
        "note_id": {
          "type": "string",
          "title": "unique id of note to be updated"
        },
        "client_id": {
          "type": "string",
          "title": "unique id of the client"
        }
      },
      "title": "Update note request"
    },
    "fmUpdateNoteResponse": {
      "type": "object",
      "properties": {
        "note_id": {
          "type": "string",
          "title": "unique id of the updated note"
        }
      },
      "title": "Update note response"
    },
    "fmUpdateOpeningClosingCheckRequest": {
      "type": "object",
      "properties": {
        "check_id": {
          "type": "string",
          "title": "check in/out id to be updated"
        },
        "organization_id": {
          "type": "string",
          "title": "organization id"
        },
        "display_date": {
          "type": "string",
          "format": "date-time",
          "title": "Date on which opening/closing check is shown (required if is_recurrence is false)"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "List of instructions"
        },
        "is_recurrence": {
          "type": "boolean",
          "title": "whether opening/closing check is recurrence"
        },
        "recurrence": {
          "$ref": "#/definitions/fmUpsertRecurrence",
          "title": "details of recurrence"
        }
      }
    },
    "fmUpdateOpeningClosingCheckResponse": {
      "type": "object",
      "properties": {
        "check_id": {
          "type": "string",
          "title": "updated check in/out id"
        }
      }
    },
    "fmUpdatePlannerRequest": {
      "type": "object",
      "properties": {
        "planner_id": {
          "type": "string",
          "title": "unique id of the planner to be updated"
        },
        "organization_id": {
          "type": "string",
          "title": "id of the organization"
        },
        "task_title": {
          "type": "string",
          "title": "title of the task"
        },
        "description": {
          "type": "string",
          "title": "description of the task"
        },
        "task_date": {
          "type": "string",
          "format": "date-time",
          "title": "date of the task"
        },
        "task_type": {
          "type": "string",
          "title": "type of task: Allowed [\"DOC\", \"VARIATION\", \"MOBILE\", \"OTHERS\", \"PERIODIC(REGULAR)\", \"PERIODIC(ONE OFF)\", \"PERIODIC(WINDOW)\", \"PERIODIC(ACCOMODATION)\"]"
        }
      }
    },
    "fmUpdatePlannerResponse": {
      "type": "object",
      "properties": {
        "planner_id": {
          "type": "string",
          "title": "unique id of the updated planner"
        }
      }
    },
    "fmUpdateRecurrenceRequest": {
      "type": "object",
      "properties": {
        "task_id": {
          "type": "string",
          "title": "id of task"
        },
        "is_recurrence": {
          "type": "boolean",
          "title": "is recurrence"
        },
        "recurrence_task_id": {
          "type": "string",
          "title": "id of recurrence task (optional)"
        },
        "recurrence": {
          "$ref": "#/definitions/fmUpsertRecurrence",
          "title": "details of recurrence"
        }
      }
    },
    "fmUpdateRecurrenceResponse": {
      "type": "object",
      "properties": {
        "task_id": {
          "type": "string",
          "title": "unique id of the task"
        }
      }
    },
    "fmUpdateRegionRequest": {
      "type": "object",
      "properties": {
        "region_id": {
          "type": "string",
          "title": "id of region"
        },
        "organization_id": {
          "type": "string",
          "title": "id of organization"
        },
        "title": {
          "type": "string",
          "title": "title of region"
        },
        "regional_manager": {
          "type": "string",
          "title": "id of area manager (employee-id)"
        }
      }
    },
    "fmUpdateReplyRequest": {
      "type": "object",
      "properties": {
        "reply_id": {
          "type": "string",
          "title": "the unique id of reply"
        },
        "comment": {
          "type": "string",
          "title": "the comment string"
        },
        "description": {
          "type": "string",
          "title": "description if you need it (optional)"
        }
      }
    },
    "fmUpdateReplyResponse": {
      "type": "object",
      "properties": {
        "reply_id": {
          "type": "string",
          "title": "the unique id of comment"
        }
      }
    },
    "fmUpdateSectorRequest": {
      "type": "object",
      "properties": {
        "sector_id": {
          "type": "string",
          "title": "sector_id of updated sector"
        },
        "organization_id": {
          "type": "string",
          "title": "organization_id to which the sector belongs to"
        },
        "title": {
          "type": "string",
          "title": "title of sector"
        },
        "description": {
          "type": "string",
          "title": "details about the sector"
        }
      }
    },
    "fmUpdateSectorResponse": {
      "type": "object",
      "properties": {
        "sector_id": {
          "type": "string",
          "title": "sector_id of updated sector"
        }
      }
    },
    "fmUpdateSubAreaRequest": {
      "type": "object",
      "properties": {
        "sub_area_id": {
          "type": "string",
          "title": "id of sub area to be updated"
        },
        "area_id": {
          "type": "string",
          "title": "id of area to which the sub area belongs"
        },
        "title": {
          "type": "string",
          "title": "title of sub area"
        },
        "organization_id": {
          "type": "string",
          "title": "organization id of the sub area"
        },
        "client_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "client ids"
        },
        "area_supervisors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "id of area supervisors (employee_id)"
        }
      }
    },
    "fmUpdateTaskByClientRequest": {
      "type": "object",
      "properties": {
        "client_id": {
          "type": "string",
          "title": "fetch timesheet for this client_id"
        },
        "tasks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UpdateTaskByClientRequestUpdateTaskByClient"
          },
          "title": "task list"
        }
      },
      "title": "Request for update client timesheet"
    },
    "fmUpdateTaskByClientResponse": {
      "type": "object",
      "properties": {
        "client_id": {
          "type": "string",
          "title": "unique id of the client"
        }
      }
    },
    "fmUpdateTaskByEmployeeRequest": {
      "type": "object",
      "properties": {
        "employee_id": {
          "type": "string",
          "title": "fetch timesheet for this employee_id"
        },
        "tasks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UpdateTaskByEmployeeRequestUpdateTaskByEmployee"
          }
        }
      },
      "title": "Request for update employee timesheet"
    },
    "fmUpdateTaskByEmployeeResponse": {
      "type": "object",
      "properties": {
        "employee_id": {
          "type": "string",
          "title": "unique id of the employee"
        }
      }
    },
    "fmUpdateTaskRequest": {
      "type": "object",
      "properties": {
        "task_id": {
          "type": "string",
          "title": "unique id of the task"
        },
        "title": {
          "type": "string",
          "title": "title (name) of the task"
        },
        "description": {
          "type": "string",
          "title": "description of the task"
        },
        "start_time": {
          "type": "string",
          "format": "date-time",
          "title": "task must start by at least this time. Start time is combination of\nappointment date and time"
        },
        "estimate_time": {
          "type": "string",
          "title": "the estimated time period to complete the task"
        },
        "is_variation": {
          "type": "boolean",
          "title": "flag to confirm if the task is variation or not"
        },
        "is_vary": {
          "type": "boolean",
          "title": "flag to confirm if the task is vary or not"
        },
        "is_break": {
          "type": "boolean",
          "title": "update break to true or false"
        },
        "break_type": {
          "type": "string",
          "title": "update break to true or false"
        },
        "task_type": {
          "type": "string",
          "title": "type of task"
        },
        "rate": {
          "type": "number",
          "format": "float",
          "title": "rate if task type is 'MOBILE' or 'OTHERS'"
        }
      },
      "title": "Request to update task"
    },
    "fmUpdateTaskResponse": {
      "type": "object",
      "properties": {
        "task_id": {
          "type": "string",
          "title": "unique id of the task"
        }
      },
      "title": "Response from update task"
    },
    "fmUpdateTaskVarytimeRequest": {
      "type": "object",
      "properties": {
        "task_id": {
          "type": "string",
          "title": "unique if of task"
        },
        "vary_time": {
          "type": "string",
          "format": "date-time",
          "title": "Date/time at which vary task should be initiated"
        }
      }
    },
    "fmUpdateTaskVarytimeResponse": {
      "type": "object",
      "properties": {
        "task_id": {
          "type": "string",
          "title": "id of task updated"
        }
      }
    },
    "fmUpdateTrainingTypeRequest": {
      "type": "object",
      "properties": {
        "training_type_id": {
          "type": "string",
          "title": "id of the training type to be updated"
        },
        "organization_id": {
          "type": "string",
          "title": "organization id"
        },
        "title": {
          "type": "string",
          "title": "title of the training type"
        },
        "description": {
          "type": "string",
          "title": "description of the training type"
        },
        "frequency": {
          "type": "string",
          "title": "frequency"
        }
      }
    },
    "fmUpdateTrainingTypeResponse": {
      "type": "object",
      "properties": {
        "training_type_id": {
          "type": "string",
          "title": "id of the updated training type"
        }
      }
    },
    "fmUpdateTupeRequest": {
      "type": "object",
      "properties": {
        "tupe_id": {
          "type": "string",
          "title": "unique id of the tupe to be updated"
        },
        "organization_id": {
          "type": "string",
          "title": "id of the organization"
        },
        "job_detail": {
          "$ref": "#/definitions/fmJobDetails",
          "title": "details about the job"
        },
        "job_dates": {
          "$ref": "#/definitions/fmJobDates",
          "title": "details about job dates"
        },
        "age_range": {
          "type": "string",
          "title": "age range"
        },
        "holiday_entitlement_days": {
          "type": "integer",
          "format": "int32",
          "title": "number of holidays entitled"
        },
        "employee_notice_period": {
          "type": "string",
          "title": "notice period for employee"
        },
        "employer_notice_period": {
          "type": "string",
          "title": "notice period for employer"
        },
        "records_detail": {
          "$ref": "#/definitions/fmRecords",
          "title": "details about different kinds of records"
        },
        "pension_detail": {
          "$ref": "#/definitions/fmPensionDetails",
          "title": "details about pension"
        },
        "benefits_detail": {
          "$ref": "#/definitions/fmBenefits",
          "title": "details about benefits"
        }
      }
    },
    "fmUpdateTupeResponse": {
      "type": "object",
      "properties": {
        "tupe_id": {
          "type": "string",
          "title": "unique id of the updated tupe"
        }
      }
    },
    "fmUpdateUserEmployeeRolesScopesRequest": {
      "type": "object",
      "properties": {
        "user_employee_id": {
          "type": "string",
          "title": "unique id of the user-employee"
        },
        "organization_id": {
          "type": "string",
          "title": "id of the organization the user-employee belongs to"
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "roles to be updated"
        },
        "scopes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "scopes to be updated"
        }
      }
    },
    "fmUpdateUserEmployeeRolesScopesResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "boolean",
          "title": "action response"
        }
      }
    },
    "fmUpsertAgendaDecisionObjectionResponse": {
      "type": "object",
      "properties": {
        "decision_objection_id": {
          "type": "string",
          "title": "id of objection"
        }
      }
    },
    "fmUpsertAgendaDecisionResponse": {
      "type": "object",
      "properties": {
        "agenda_decision_id": {
          "type": "string",
          "title": "id of decision"
        }
      }
    },
    "fmUpsertAgendaViewResponse": {
      "type": "object",
      "properties": {
        "agenda_view_id": {
          "type": "string",
          "title": "id of agenda view"
        }
      }
    },
    "fmUpsertAllTaskCorrectionRequest": {
      "type": "object",
      "properties": {
        "organization_id": {
          "type": "string",
          "title": "id of the organization"
        },
        "approved_by": {
          "type": "string",
          "title": "approved by : employee_id"
        },
        "tasks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UpsertAllTaskCorrectionRequestAllTasks"
          },
          "title": "list of tasks"
        }
      }
    },
    "fmUpsertAllTaskCorrectionResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "boolean",
          "title": "action response"
        }
      }
    },
    "fmUpsertAreaResponse": {
      "type": "object",
      "properties": {
        "area_id": {
          "type": "string"
        }
      }
    },
    "fmUpsertCRMMobilizationTaskDateRequest": {
      "type": "object",
      "properties": {
        "organization_id": {
          "type": "string",
          "title": "id of the organization"
        },
        "crm_task_date_id": {
          "type": "string",
          "title": "unique id of the crm-task-date"
        },
        "crm_task_id": {
          "type": "string",
          "title": "id of the associated crm-task"
        },
        "task_date": {
          "type": "string",
          "format": "date-time",
          "title": "date of the task (optional) - required if new date is to be added"
        },
        "status": {
          "type": "string",
          "title": "status of the task date"
        }
      }
    },
    "fmUpsertCRMMobilizationTaskDateResponse": {
      "type": "object",
      "properties": {
        "crm_task_date_id": {
          "type": "string",
          "title": "unique id of the crm task date"
        }
      }
    },
    "fmUpsertCRMMobilizationTaskRequest": {
      "type": "object",
      "properties": {
        "organization_id": {
          "type": "string",
          "title": "id of the organization"
        },
        "crm_task_id": {
          "type": "string",
          "title": "unique id of the crm_task"
        },
        "crm_mobilization_id": {
          "type": "string",
          "title": "id of the associated crm mobilization"
        },
        "title": {
          "type": "string",
          "title": "title name"
        },
        "task_owner": {
          "type": "string",
          "title": "task_owner : employee_id"
        },
        "deadline": {
          "type": "string",
          "format": "date-time",
          "title": "deadline of the task"
        },
        "task_detail": {
          "type": "string",
          "title": "task detail"
        },
        "status": {
          "type": "string",
          "title": "status of the task"
        }
      }
    },
    "fmUpsertCRMMobilizationTaskResponse": {
      "type": "object",
      "properties": {
        "crm_task_id": {
          "type": "string",
          "title": "unique id of the crm mobilization task"
        }
      }
    },
    "fmUpsertCRMMobilizationTasksRequest": {
      "type": "object",
      "properties": {
        "crm_mobilization_id": {
          "type": "string",
          "title": "unique id of the crm mobilization"
        },
        "organization_id": {
          "type": "string",
          "title": "id of the organization"
        },
        "tasks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fmCRMMobTasks"
          },
          "title": "tasks of the mobilization"
        }
      }
    },
    "fmUpsertCRMMobilizationTasksResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "boolean",
          "title": "action response"
        }
      }
    },
    "fmUpsertGlobalDescriptionRequest": {
      "type": "object",
      "properties": {
        "check_type": {
          "type": "string",
          "title": "check type i.e. opening or closing check"
        },
        "description": {
          "type": "string",
          "title": "description of the check"
        },
        "organization_id": {
          "type": "string",
          "title": "organization id"
        }
      }
    },
    "fmUpsertGlobalDescriptionResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "boolean",
          "title": "action response"
        }
      }
    },
    "fmUpsertOrganizationCodeRequest": {
      "type": "object",
      "properties": {
        "organization_id": {
          "type": "string",
          "title": "id of the organization"
        }
      }
    },
    "fmUpsertOrganizationCodeResponse": {
      "type": "object",
      "properties": {
        "organization_code": {
          "type": "string",
          "title": "unique code created for the organization"
        }
      }
    },
    "fmUpsertParentMobilizationRequest": {
      "type": "object",
      "properties": {
        "parent_mobilization_id": {
          "type": "string",
          "title": "unique id of the parent mobilization"
        },
        "organization_id": {
          "type": "string",
          "title": "id of the organization"
        },
        "name": {
          "type": "string",
          "title": "name of the parent mobilization"
        }
      }
    },
    "fmUpsertParentMobilizationResponse": {
      "type": "object",
      "properties": {
        "parent_mobilization_id": {
          "type": "string",
          "title": "unique id of the parent mobilization"
        }
      }
    },
    "fmUpsertRecurrence": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "title": "type of recurrence: Allowed [CUSTOM, DAILY, WEEKLY, MONTHLY_DAY, MONTHLY_WEEK, YEARLY]"
        },
        "type_details": {
          "$ref": "#/definitions/fmRecurrenceTypeDetails",
          "title": "type details;"
        },
        "start_date": {
          "type": "string",
          "format": "date-time",
          "title": "Date from which recurrence starts"
        },
        "end_date": {
          "type": "string",
          "format": "date-time",
          "title": "Date until which recurrence is created"
        }
      }
    },
    "fmUpsertRegionResponse": {
      "type": "object",
      "properties": {
        "region_id": {
          "type": "string"
        }
      }
    },
    "fmUpsertRoleRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "unique id"
        },
        "role": {
          "type": "string",
          "title": "role to update - this must be unique"
        },
        "scopes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "scopes included in the role"
        },
        "organization_id": {
          "type": "string",
          "title": "id of organization"
        }
      },
      "title": "Request for updating roles"
    },
    "fmUpsertScopeRequest": {
      "type": "object",
      "properties": {
        "organization_id": {
          "type": "string",
          "title": "id of organization"
        },
        "title": {
          "type": "string",
          "title": "title of scope group"
        },
        "scopes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fmUserScope"
          },
          "title": "scopes in the group"
        }
      }
    },
    "fmUpsertSubAreaResponse": {
      "type": "object",
      "properties": {
        "sub_area_id": {
          "type": "string",
          "title": "id of sub area"
        }
      }
    },
    "fmUpsertTaskCorrectionRequest": {
      "type": "object",
      "properties": {
        "task_id": {
          "type": "string",
          "title": "task id"
        },
        "client_id": {
          "type": "string",
          "title": "client id"
        },
        "employee_id": {
          "type": "string",
          "title": "employee id"
        },
        "organization_id": {
          "type": "string",
          "title": "organization id"
        },
        "corrected_by": {
          "type": "string",
          "title": "corrected by i.e. id"
        },
        "correction": {
          "type": "string",
          "title": "correction time"
        },
        "task_date": {
          "type": "string",
          "format": "date-time",
          "title": "date of the task"
        },
        "is_negative": {
          "type": "boolean",
          "title": "whether the correction time is negative or not"
        }
      }
    },
    "fmUpsertTaskCorrectionResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "boolean",
          "title": "action response"
        }
      }
    },
    "fmUpsertTenderStatusRequest": {
      "type": "object",
      "properties": {
        "client_id": {
          "type": "string",
          "title": "unique id of the client"
        },
        "organization_id": {
          "type": "string",
          "title": "organization id"
        },
        "status": {
          "type": "string",
          "title": "status of the tender"
        }
      }
    },
    "fmUpsertTenderStatusResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "boolean",
          "title": "action response"
        }
      }
    },
    "fmUserData": {
      "type": "object",
      "properties": {
        "user_id": {
          "type": "string",
          "title": "id of user"
        },
        "employee_id": {
          "type": "string",
          "title": "id of employee"
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "roles of user"
        },
        "scopes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "scopes of user"
        },
        "active": {
          "type": "boolean",
          "title": "active status of user-employee"
        }
      }
    },
    "fmUserEmployeeDetails": {
      "type": "object",
      "properties": {
        "user_employee_id": {
          "type": "string",
          "title": "unique id of the user-employee"
        },
        "employee_id": {
          "type": "string",
          "title": "id of the employee"
        },
        "user_id": {
          "type": "string",
          "title": "id of the user"
        },
        "username": {
          "type": "string",
          "title": "unique username of the user"
        },
        "full_name": {
          "type": "string",
          "title": "name of the user"
        }
      }
    },
    "fmUserScope": {
      "type": "object",
      "properties": {
        "alias": {
          "type": "string",
          "title": "alias of scope (readable for user)"
        },
        "scope": {
          "type": "string",
          "title": "name of scope (defined by dev)"
        },
        "description": {
          "type": "string",
          "title": "description of scope"
        }
      }
    },
    "fmUserScopeGroup": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "title of group"
        },
        "scopes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fmUserScope"
          },
          "title": "scopes in the group"
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "type_url": {
          "type": "string"
        },
        "value": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "runtimeError": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string"
        },
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    }
  }
}
